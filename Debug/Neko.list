
Neko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08003c58  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003c58  00005164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ea  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227d  00000000  00000000  00011a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00013ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a27  00000000  00000000  000149b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017653  00000000  00000000  000153d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe20  00000000  00000000  0002ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ce8  00000000  00000000  0003c84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000c3578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c6a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c00 	.word	0x08003c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003c00 	.word	0x08003c00

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1a      	ldr	r3, [pc, #104]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b17      	ldr	r3, [pc, #92]	@ (80001cc <MX_GPIO_Init+0x80>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b11      	ldr	r3, [pc, #68]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <MX_GPIO_Init+0x80>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin sensor3_Pin sensor4_Pin
                           sensor5_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin|sensor3_Pin|sensor4_Pin
 80001a8:	f44f 734e 	mov.w	r3, #824	@ 0x338
 80001ac:	613b      	str	r3, [r7, #16]
                          |sensor5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4619      	mov	r1, r3
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <MX_GPIO_Init+0x84>)
 80001be:	f001 fa67 	bl	8001690 <HAL_GPIO_Init>

}
 80001c2:	bf00      	nop
 80001c4:	3720      	adds	r7, #32
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f001 f814 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f84c 	bl	8000278 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001e0:	213c      	movs	r1, #60	@ 0x3c
 80001e2:	4821      	ldr	r0, [pc, #132]	@ (8000268 <main+0x94>)
 80001e4:	f002 fa36 	bl	8002654 <HAL_TIM_Encoder_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffb0 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ec:	f000 faae 	bl	800074c <MX_TIM2_Init>
  MX_TIM1_Init();
 80001f0:	f000 f9e8 	bl	80005c4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80001f4:	f000 fb34 	bl	8000860 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80001f8:	f000 ff60 	bl	80010bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	481b      	ldr	r0, [pc, #108]	@ (800026c <main+0x98>)
 8000200:	f002 f8e4 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8000204:	2104      	movs	r1, #4
 8000206:	4819      	ldr	r0, [pc, #100]	@ (800026c <main+0x98>)
 8000208:	f002 f8e0 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 800020c:	2108      	movs	r1, #8
 800020e:	4817      	ldr	r0, [pc, #92]	@ (800026c <main+0x98>)
 8000210:	f002 f8dc 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1);
 8000214:	2100      	movs	r1, #0
 8000216:	4816      	ldr	r0, [pc, #88]	@ (8000270 <main+0x9c>)
 8000218:	f002 f8d8 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_2);
 800021c:	2104      	movs	r1, #4
 800021e:	4814      	ldr	r0, [pc, #80]	@ (8000270 <main+0x9c>)
 8000220:	f002 f8d4 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_3);
 8000224:	2108      	movs	r1, #8
 8000226:	4812      	ldr	r0, [pc, #72]	@ (8000270 <main+0x9c>)
 8000228:	f002 f8d0 	bl	80023cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 800022c:	210c      	movs	r1, #12
 800022e:	4810      	ldr	r0, [pc, #64]	@ (8000270 <main+0x9c>)
 8000230:	f002 f8cc 	bl	80023cc <HAL_TIM_PWM_Start>

  // PID_Init(&mypid, 0, 0, 0, 800, 1000);

  HAL_TIM_Base_Start(&htim2);
 8000234:	480d      	ldr	r0, [pc, #52]	@ (800026c <main+0x98>)
 8000236:	f002 f827 	bl	8002288 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800023a:	480b      	ldr	r0, [pc, #44]	@ (8000268 <main+0x94>)
 800023c:	f002 f824 	bl	8002288 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 145);		// 舵机A驱动代码，舵机占空比代数取值为40~250
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <main+0x98>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2291      	movs	r2, #145	@ 0x91
 8000246:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 40);		// 舵机B驱动代码
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <main+0x98>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2228      	movs	r2, #40	@ 0x28
 800024e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 40);		// 舵机C驱动代码
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <main+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2228      	movs	r2, #40	@ 0x28
 8000256:	63da      	str	r2, [r3, #60]	@ 0x3c

  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  // HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
  TIM3->CCR1=TIM3->CCR4=80;
 8000258:	4a06      	ldr	r2, [pc, #24]	@ (8000274 <main+0xa0>)
 800025a:	2350      	movs	r3, #80	@ 0x50
 800025c:	6413      	str	r3, [r2, #64]	@ 0x40
 800025e:	4a05      	ldr	r2, [pc, #20]	@ (8000274 <main+0xa0>)
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Tracking();
 8000262:	f000 fc11 	bl	8000a88 <Tracking>
 8000266:	e7fc      	b.n	8000262 <main+0x8e>
 8000268:	200000bc 	.word	0x200000bc
 800026c:	20000074 	.word	0x20000074
 8000270:	2000002c 	.word	0x2000002c
 8000274:	40000400 	.word	0x40000400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	@ 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	@ 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fc8e 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fb81 	bl	80019c8 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002cc:	f000 f819 	bl	8000302 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fdee 	bl	8001ecc <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f804 	bl	8000302 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	@ 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000306:	b672      	cpsid	i
}
 8000308:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030a:	bf00      	nop
 800030c:	e7fd      	b.n	800030a <Error_Handler+0x8>
	...

08000310 <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__SetIn1PWM+0x1c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	79fa      	ldrb	r2, [r7, #7]
 8000320:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	2000002c 	.word	0x2000002c

08000330 <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 800033a:	4b04      	ldr	r3, [pc, #16]	@ (800034c <__SetIn2PWM+0x1c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	2000002c 	.word	0x2000002c

08000350 <__SetIn3PWM>:
/**
 * @brief 设置IN3引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn3PWM(uint8_t duty)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN3_TIM, IN3_CH, duty);
 800035a:	4b04      	ldr	r3, [pc, #16]	@ (800036c <__SetIn3PWM+0x1c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	2000002c 	.word	0x2000002c

08000370 <__SetIn4PWM>:
/**
 * @brief 设置IN4引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn4PWM(uint8_t duty)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN4_TIM, IN4_CH, duty);
 800037a:	4b04      	ldr	r3, [pc, #16]	@ (800038c <__SetIn4PWM+0x1c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000002c 	.word	0x2000002c

08000390 <A_Backward>:
/**
 * @brief 控制电机A前进
 * @param speed 速度值（0-100）
 */
void A_Backward(uint8_t speed)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b64      	cmp	r3, #100	@ 0x64
 800039e:	d901      	bls.n	80003a4 <A_Backward+0x14>
        speed = MAX_SPEED;
 80003a0:	2364      	movs	r3, #100	@ 0x64
 80003a2:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <A_Backward+0x48>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d107      	bne.n	80003bc <A_Backward+0x2c>
        __SetIn1PWM(speed);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffae 	bl	8000310 <__SetIn1PWM>
        __SetIn2PWM(0);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ffbb 	bl	8000330 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 80003ba:	e009      	b.n	80003d0 <A_Backward+0x40>
        __SetIn1PWM(MAX_SPEED);
 80003bc:	2064      	movs	r0, #100	@ 0x64
 80003be:	f7ff ffa7 	bl	8000310 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffb0 	bl	8000330 <__SetIn2PWM>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028

080003dc <B_Forward>:
/**
 * @brief 控制电机B前进
 * @param speed 速度值（0-100）
 */
void B_Forward(uint8_t speed)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b64      	cmp	r3, #100	@ 0x64
 80003ea:	d901      	bls.n	80003f0 <B_Forward+0x14>
        speed = MAX_SPEED;
 80003ec:	2364      	movs	r3, #100	@ 0x64
 80003ee:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <B_Forward+0x48>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d107      	bne.n	8000408 <B_Forward+0x2c>
        __SetIn3PWM(speed);
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ffa8 	bl	8000350 <__SetIn3PWM>
        __SetIn4PWM(0);
 8000400:	2000      	movs	r0, #0
 8000402:	f7ff ffb5 	bl	8000370 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED);
        __SetIn4PWM(MAX_SPEED - speed);
    }
}
 8000406:	e009      	b.n	800041c <B_Forward+0x40>
        __SetIn3PWM(MAX_SPEED);
 8000408:	2064      	movs	r0, #100	@ 0x64
 800040a:	f7ff ffa1 	bl	8000350 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED - speed);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffaa 	bl	8000370 <__SetIn4PWM>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000028 	.word	0x20000028

08000428 <A_Forward>:
/**
 * @brief 控制电机A后退
 * @param speed 速度值（0-100）
 */
void A_Forward(uint8_t speed)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b64      	cmp	r3, #100	@ 0x64
 8000436:	d901      	bls.n	800043c <A_Forward+0x14>
        speed = MAX_SPEED;
 8000438:	2364      	movs	r3, #100	@ 0x64
 800043a:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <A_Forward+0x48>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d107      	bne.n	8000454 <A_Forward+0x2c>
        __SetIn1PWM(0);
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff ff63 	bl	8000310 <__SetIn1PWM>
        __SetIn2PWM(speed);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff6f 	bl	8000330 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 8000452:	e009      	b.n	8000468 <A_Forward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff57 	bl	8000310 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 8000462:	2064      	movs	r0, #100	@ 0x64
 8000464:	f7ff ff64 	bl	8000330 <__SetIn2PWM>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000028 	.word	0x20000028

08000474 <B_Backward>:
/**
 * @brief 控制电机B后退
 * @param speed 速度值（0-100）
 */
void B_Backward(uint8_t speed)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b64      	cmp	r3, #100	@ 0x64
 8000482:	d901      	bls.n	8000488 <B_Backward+0x14>
        speed = MAX_SPEED;
 8000484:	2364      	movs	r3, #100	@ 0x64
 8000486:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <B_Backward+0x48>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d107      	bne.n	80004a0 <B_Backward+0x2c>
        __SetIn3PWM(0);
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff5d 	bl	8000350 <__SetIn3PWM>
        __SetIn4PWM(speed);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff69 	bl	8000370 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED - speed);
        __SetIn4PWM(MAX_SPEED);
    }
}
 800049e:	e009      	b.n	80004b4 <B_Backward+0x40>
        __SetIn3PWM(MAX_SPEED - speed);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff51 	bl	8000350 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED);
 80004ae:	2064      	movs	r0, #100	@ 0x64
 80004b0:	f7ff ff5e 	bl	8000370 <__SetIn4PWM>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000028 	.word	0x20000028

080004c0 <RIGHT>:

/**
 * @brief 右转
 */
void RIGHT(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	A_Forward(85);
 80004c4:	2055      	movs	r0, #85	@ 0x55
 80004c6:	f7ff ffaf 	bl	8000428 <A_Forward>
	B_Backward(35);
 80004ca:	2023      	movs	r0, #35	@ 0x23
 80004cc:	f7ff ffd2 	bl	8000474 <B_Backward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <LEFT>:

/**
 * @brief 左转
 */
void LEFT(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	A_Backward(30);
 80004d8:	201e      	movs	r0, #30
 80004da:	f7ff ff59 	bl	8000390 <A_Backward>
	B_Forward(70);
 80004de:	2046      	movs	r0, #70	@ 0x46
 80004e0:	f7ff ff7c 	bl	80003dc <B_Forward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 52);
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059c:	f000 fe78 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <USART3_IRQHandler+0x10>)
 80005aa:	f002 fe1b 	bl	80031e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000118 	.word	0x20000118

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fad3 	bl	8003ba8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000602:	4b50      	ldr	r3, [pc, #320]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000604:	4a50      	ldr	r2, [pc, #320]	@ (8000748 <MX_TIM1_Init+0x184>)
 8000606:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000608:	4b4e      	ldr	r3, [pc, #312]	@ (8000744 <MX_TIM1_Init+0x180>)
 800060a:	2247      	movs	r2, #71	@ 0x47
 800060c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b4d      	ldr	r3, [pc, #308]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000614:	4b4b      	ldr	r3, [pc, #300]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000616:	2263      	movs	r2, #99	@ 0x63
 8000618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b4a      	ldr	r3, [pc, #296]	@ (8000744 <MX_TIM1_Init+0x180>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000620:	4b48      	ldr	r3, [pc, #288]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b47      	ldr	r3, [pc, #284]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800062c:	4845      	ldr	r0, [pc, #276]	@ (8000744 <MX_TIM1_Init+0x180>)
 800062e:	f001 fddb 	bl	80021e8 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000638:	f7ff fe63 	bl	8000302 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000642:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000646:	4619      	mov	r1, r3
 8000648:	483e      	ldr	r0, [pc, #248]	@ (8000744 <MX_TIM1_Init+0x180>)
 800064a:	f002 f953 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000654:	f7ff fe55 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000658:	483a      	ldr	r0, [pc, #232]	@ (8000744 <MX_TIM1_Init+0x180>)
 800065a:	f001 fe5f 	bl	800231c <HAL_TIM_PWM_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000664:	f7ff fe4d 	bl	8000302 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000674:	4619      	mov	r1, r3
 8000676:	4833      	ldr	r0, [pc, #204]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000678:	f002 fcb4 	bl	8002fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000682:	f7ff fe3e 	bl	8000302 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000686:	2360      	movs	r3, #96	@ 0x60
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000692:	2300      	movs	r3, #0
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4826      	ldr	r0, [pc, #152]	@ (8000744 <MX_TIM1_Init+0x180>)
 80006ac:	f002 f860 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80006b6:	f7ff fe24 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	2204      	movs	r2, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4820      	ldr	r0, [pc, #128]	@ (8000744 <MX_TIM1_Init+0x180>)
 80006c4:	f002 f854 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80006ce:	f7ff fe18 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	2208      	movs	r2, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <MX_TIM1_Init+0x180>)
 80006dc:	f002 f848 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80006e6:	f7ff fe0c 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	220c      	movs	r2, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4814      	ldr	r0, [pc, #80]	@ (8000744 <MX_TIM1_Init+0x180>)
 80006f4:	f002 f83c 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80006fe:	f7ff fe00 	bl	8000302 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4807      	ldr	r0, [pc, #28]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000726:	f002 fcbb 	bl	80030a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000730:	f7ff fde7 	bl	8000302 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <MX_TIM1_Init+0x180>)
 8000736:	f000 f955 	bl	80009e4 <HAL_TIM_MspPostInit>

}
 800073a:	bf00      	nop
 800073c:	3758      	adds	r7, #88	@ 0x58
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40012c00 	.word	0x40012c00

0800074c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b37      	ldr	r3, [pc, #220]	@ (800085c <MX_TIM2_Init+0x110>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000784:	4b35      	ldr	r3, [pc, #212]	@ (800085c <MX_TIM2_Init+0x110>)
 8000786:	2247      	movs	r2, #71	@ 0x47
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b34      	ldr	r3, [pc, #208]	@ (800085c <MX_TIM2_Init+0x110>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000790:	4b32      	ldr	r3, [pc, #200]	@ (800085c <MX_TIM2_Init+0x110>)
 8000792:	2263      	movs	r2, #99	@ 0x63
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <MX_TIM2_Init+0x110>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <MX_TIM2_Init+0x110>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a2:	482e      	ldr	r0, [pc, #184]	@ (800085c <MX_TIM2_Init+0x110>)
 80007a4:	f001 fd20 	bl	80021e8 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007ae:	f7ff fda8 	bl	8000302 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007bc:	4619      	mov	r1, r3
 80007be:	4827      	ldr	r0, [pc, #156]	@ (800085c <MX_TIM2_Init+0x110>)
 80007c0:	f002 f898 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007ca:	f7ff fd9a 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ce:	4823      	ldr	r0, [pc, #140]	@ (800085c <MX_TIM2_Init+0x110>)
 80007d0:	f001 fda4 	bl	800231c <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007da:	f7ff fd92 	bl	8000302 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4619      	mov	r1, r3
 80007ec:	481b      	ldr	r0, [pc, #108]	@ (800085c <MX_TIM2_Init+0x110>)
 80007ee:	f002 fbf9 	bl	8002fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007f8:	f7ff fd83 	bl	8000302 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <MX_TIM2_Init+0x110>)
 8000814:	f001 ffac 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800081e:	f7ff fd70 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2204      	movs	r2, #4
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_TIM2_Init+0x110>)
 800082a:	f001 ffa1 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000834:	f7ff fd65 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2208      	movs	r2, #8
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM2_Init+0x110>)
 8000840:	f001 ff96 	bl	8002770 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800084a:	f7ff fd5a 	bl	8000302 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM2_Init+0x110>)
 8000850:	f000 f8c8 	bl	80009e4 <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3738      	adds	r7, #56	@ 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000074 	.word	0x20000074

08000860 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2224      	movs	r2, #36	@ 0x24
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f99a 	bl	8003ba8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800087c:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <MX_TIM4_Init+0xa0>)
 800087e:	4a21      	ldr	r2, [pc, #132]	@ (8000904 <MX_TIM4_Init+0xa4>)
 8000880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_TIM4_Init+0xa0>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_TIM4_Init+0xa0>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_TIM4_Init+0xa0>)
 8000890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000894:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_TIM4_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_TIM4_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80008b2:	230f      	movs	r3, #15
 80008b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ba:	2301      	movs	r3, #1
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80008c2:	230f      	movs	r3, #15
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_TIM4_Init+0xa0>)
 80008ce:	f001 fe1f 	bl	8002510 <HAL_TIM_Encoder_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80008d8:	f7ff fd13 	bl	8000302 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_TIM4_Init+0xa0>)
 80008ea:	f002 fb7b 	bl	8002fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80008f4:	f7ff fd05 	bl	8000302 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3730      	adds	r7, #48	@ 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000bc 	.word	0x200000bc
 8000904:	40000800 	.word	0x40000800

08000908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <HAL_TIM_Base_MspInit+0x58>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10c      	bne.n	8000934 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 8000920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000932:	e010      	b.n	8000956 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800093c:	d10b      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_TIM_Base_MspInit+0x5c>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40012c00 	.word	0x40012c00
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d123      	bne.n	80009d0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_TIM_Encoder_MspInit+0x74>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b8:	23c0      	movs	r3, #192	@ 0xc0
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <HAL_TIM_Encoder_MspInit+0x78>)
 80009cc:	f000 fe60 	bl	8001690 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40000800 	.word	0x40000800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <HAL_TIM_MspPostInit+0x98>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d119      	bne.n	8000a38 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a1c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <HAL_TIM_MspPostInit+0xa0>)
 8000a32:	f000 fe2d 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a36:	e01c      	b.n	8000a72 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a40:	d117      	bne.n	8000a72 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a0e      	ldr	r2, [pc, #56]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_TIM_MspPostInit+0x9c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <HAL_TIM_MspPostInit+0xa0>)
 8000a6e:	f000 fe0f 	bl	8001690 <HAL_GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800

08000a88 <Tracking>:
int LEFT_IN = 0;
int RIGHT_OUT = 0;
int LEFT_OUT = 0;
int PHASE = 0;

void Tracking(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// 入环判断、十字路口、T字路口
	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000a8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a90:	48a9      	ldr	r0, [pc, #676]	@ (8000d38 <Tracking+0x2b0>)
 8000a92:	f000 ff81 	bl	8001998 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d007      	beq.n	8000aac <Tracking+0x24>
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	48a6      	ldr	r0, [pc, #664]	@ (8000d38 <Tracking+0x2b0>)
 8000aa0:	f000 ff7a 	bl	8001998 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	f040 80ce 	bne.w	8000c48 <Tracking+0x1c0>
		HAL_Delay(DELAY_SP);
 8000aac:	200a      	movs	r0, #10
 8000aae:	f000 fc0b 	bl	80012c8 <HAL_Delay>
			// A-左侧赛道，右入环
		if(((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0))&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(LEFT_IN == 0)&&(RIGHT_IN == 0)){
 8000ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab6:	48a0      	ldr	r0, [pc, #640]	@ (8000d38 <Tracking+0x2b0>)
 8000ab8:	f000 ff6e 	bl	8001998 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <Tracking+0x48>
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	489c      	ldr	r0, [pc, #624]	@ (8000d38 <Tracking+0x2b0>)
 8000ac6:	f000 ff67 	bl	8001998 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d119      	bne.n	8000b04 <Tracking+0x7c>
 8000ad0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad4:	4898      	ldr	r0, [pc, #608]	@ (8000d38 <Tracking+0x2b0>)
 8000ad6:	f000 ff5f 	bl	8001998 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d111      	bne.n	8000b04 <Tracking+0x7c>
 8000ae0:	4b96      	ldr	r3, [pc, #600]	@ (8000d3c <Tracking+0x2b4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10d      	bne.n	8000b04 <Tracking+0x7c>
 8000ae8:	4b95      	ldr	r3, [pc, #596]	@ (8000d40 <Tracking+0x2b8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <Tracking+0x7c>
			RIGHT_IN = 1;
 8000af0:	4b93      	ldr	r3, [pc, #588]	@ (8000d40 <Tracking+0x2b8>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
			LEFT_IN = 0;
 8000af6:	4b91      	ldr	r3, [pc, #580]	@ (8000d3c <Tracking+0x2b4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
			PHASE = 1;
 8000afc:	4b91      	ldr	r3, [pc, #580]	@ (8000d44 <Tracking+0x2bc>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
			return;
 8000b02:	e2d2      	b.n	80010aa <Tracking+0x622>
		}
			// B-右侧赛道，左入环
		else if(((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0))&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(LEFT_IN == 0)&&(RIGHT_IN == 0)){
 8000b04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b08:	488b      	ldr	r0, [pc, #556]	@ (8000d38 <Tracking+0x2b0>)
 8000b0a:	f000 ff45 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <Tracking+0x9a>
 8000b14:	2110      	movs	r1, #16
 8000b16:	4888      	ldr	r0, [pc, #544]	@ (8000d38 <Tracking+0x2b0>)
 8000b18:	f000 ff3e 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d118      	bne.n	8000b54 <Tracking+0xcc>
 8000b22:	2108      	movs	r1, #8
 8000b24:	4884      	ldr	r0, [pc, #528]	@ (8000d38 <Tracking+0x2b0>)
 8000b26:	f000 ff37 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d111      	bne.n	8000b54 <Tracking+0xcc>
 8000b30:	4b82      	ldr	r3, [pc, #520]	@ (8000d3c <Tracking+0x2b4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10d      	bne.n	8000b54 <Tracking+0xcc>
 8000b38:	4b81      	ldr	r3, [pc, #516]	@ (8000d40 <Tracking+0x2b8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <Tracking+0xcc>
			LEFT_IN = 1;
 8000b40:	4b7e      	ldr	r3, [pc, #504]	@ (8000d3c <Tracking+0x2b4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
			RIGHT_IN = 0;
 8000b46:	4b7e      	ldr	r3, [pc, #504]	@ (8000d40 <Tracking+0x2b8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
			PHASE = 1;
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8000d44 <Tracking+0x2bc>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
			return;
 8000b52:	e2aa      	b.n	80010aa <Tracking+0x622>
		}
		HAL_Delay(DELAY_SP);
 8000b54:	200a      	movs	r0, #10
 8000b56:	f000 fbb7 	bl	80012c8 <HAL_Delay>
			// 十字路口
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5e:	4876      	ldr	r0, [pc, #472]	@ (8000d38 <Tracking+0x2b0>)
 8000b60:	f000 ff1a 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d11d      	bne.n	8000ba6 <Tracking+0x11e>
 8000b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b6e:	4872      	ldr	r0, [pc, #456]	@ (8000d38 <Tracking+0x2b0>)
 8000b70:	f000 ff12 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d115      	bne.n	8000ba6 <Tracking+0x11e>
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	486e      	ldr	r0, [pc, #440]	@ (8000d38 <Tracking+0x2b0>)
 8000b7e:	f000 ff0b 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10e      	bne.n	8000ba6 <Tracking+0x11e>
 8000b88:	2108      	movs	r1, #8
 8000b8a:	486b      	ldr	r0, [pc, #428]	@ (8000d38 <Tracking+0x2b0>)
 8000b8c:	f000 ff04 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d107      	bne.n	8000ba6 <Tracking+0x11e>
 8000b96:	2110      	movs	r1, #16
 8000b98:	4867      	ldr	r0, [pc, #412]	@ (8000d38 <Tracking+0x2b0>)
 8000b9a:	f000 fefd 	bl	8001998 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f000 827b 	beq.w	800109c <Tracking+0x614>
				return;
		}
			// A-T字左转
			else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000ba6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000baa:	4863      	ldr	r0, [pc, #396]	@ (8000d38 <Tracking+0x2b0>)
 8000bac:	f000 fef4 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d11d      	bne.n	8000bf2 <Tracking+0x16a>
 8000bb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bba:	485f      	ldr	r0, [pc, #380]	@ (8000d38 <Tracking+0x2b0>)
 8000bbc:	f000 feec 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d115      	bne.n	8000bf2 <Tracking+0x16a>
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	485b      	ldr	r0, [pc, #364]	@ (8000d38 <Tracking+0x2b0>)
 8000bca:	f000 fee5 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10e      	bne.n	8000bf2 <Tracking+0x16a>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4858      	ldr	r0, [pc, #352]	@ (8000d38 <Tracking+0x2b0>)
 8000bd8:	f000 fede 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d107      	bne.n	8000bf2 <Tracking+0x16a>
 8000be2:	2110      	movs	r1, #16
 8000be4:	4854      	ldr	r0, [pc, #336]	@ (8000d38 <Tracking+0x2b0>)
 8000be6:	f000 fed7 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	f000 81cb 	beq.w	8000f88 <Tracking+0x500>
				goto left;
			}
			// B-T字右转
			else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
 8000bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf6:	4850      	ldr	r0, [pc, #320]	@ (8000d38 <Tracking+0x2b0>)
 8000bf8:	f000 fece 	bl	8001998 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	f040 824e 	bne.w	80010a0 <Tracking+0x618>
 8000c04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c08:	484b      	ldr	r0, [pc, #300]	@ (8000d38 <Tracking+0x2b0>)
 8000c0a:	f000 fec5 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	f040 8245 	bne.w	80010a0 <Tracking+0x618>
 8000c16:	2120      	movs	r1, #32
 8000c18:	4847      	ldr	r0, [pc, #284]	@ (8000d38 <Tracking+0x2b0>)
 8000c1a:	f000 febd 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	f040 823d 	bne.w	80010a0 <Tracking+0x618>
 8000c26:	2108      	movs	r1, #8
 8000c28:	4843      	ldr	r0, [pc, #268]	@ (8000d38 <Tracking+0x2b0>)
 8000c2a:	f000 feb5 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 8235 	bne.w	80010a0 <Tracking+0x618>
 8000c36:	2110      	movs	r1, #16
 8000c38:	483f      	ldr	r0, [pc, #252]	@ (8000d38 <Tracking+0x2b0>)
 8000c3a:	f000 fead 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 822d 	bne.w	80010a0 <Tracking+0x618>
				goto right;
 8000c46:	e09b      	b.n	8000d80 <Tracking+0x2f8>
			}
}
	   // A-右转同时进行出环判断
	else if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4c:	483a      	ldr	r0, [pc, #232]	@ (8000d38 <Tracking+0x2b0>)
 8000c4e:	f000 fea3 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	f040 810b 	bne.w	8000e70 <Tracking+0x3e8>
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	4836      	ldr	r0, [pc, #216]	@ (8000d38 <Tracking+0x2b0>)
 8000c5e:	f000 fe9b 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8103 	bne.w	8000e70 <Tracking+0x3e8>
			HAL_Delay(5);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f000 fb2c 	bl	80012c8 <HAL_Delay>
			// 立刻判断一次是否在环内,若不是则直接清空所有标志
			if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){
 8000c70:	2120      	movs	r1, #32
 8000c72:	4831      	ldr	r0, [pc, #196]	@ (8000d38 <Tracking+0x2b0>)
 8000c74:	f000 fe90 	bl	8001998 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10e      	bne.n	8000c9c <Tracking+0x214>
				RIGHT_IN = 0;
 8000c7e:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <Tracking+0x2b8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
				LEFT_IN = 0;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <Tracking+0x2b4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
				RIGHT_OUT = 0;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <Tracking+0x2c0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
				LEFT_OUT = 0;
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <Tracking+0x2c4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
				PHASE = 0;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <Tracking+0x2bc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(DELAY_NO);
 8000c9c:	2014      	movs	r0, #20
 8000c9e:	f000 fb13 	bl	80012c8 <HAL_Delay>
			// B-右侧出环,清零左侧入环
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(LEFT_IN == 1)&&(PHASE == 2)){
 8000ca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca6:	4824      	ldr	r0, [pc, #144]	@ (8000d38 <Tracking+0x2b0>)
 8000ca8:	f000 fe76 	bl	8001998 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d14e      	bne.n	8000d50 <Tracking+0x2c8>
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4820      	ldr	r0, [pc, #128]	@ (8000d38 <Tracking+0x2b0>)
 8000cb6:	f000 fe6f 	bl	8001998 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d147      	bne.n	8000d50 <Tracking+0x2c8>
 8000cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc4:	481c      	ldr	r0, [pc, #112]	@ (8000d38 <Tracking+0x2b0>)
 8000cc6:	f000 fe67 	bl	8001998 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d13f      	bne.n	8000d50 <Tracking+0x2c8>
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <Tracking+0x2b4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d13b      	bne.n	8000d50 <Tracking+0x2c8>
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <Tracking+0x2bc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d137      	bne.n	8000d50 <Tracking+0x2c8>
				HAL_Delay(DELAY_NO);
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f000 faf1 	bl	80012c8 <HAL_Delay>
				if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(LEFT_IN == 1)&&(PHASE == 2)){
 8000ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cea:	4813      	ldr	r0, [pc, #76]	@ (8000d38 <Tracking+0x2b0>)
 8000cec:	f000 fe54 	bl	8001998 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d12c      	bne.n	8000d50 <Tracking+0x2c8>
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <Tracking+0x2b0>)
 8000cfa:	f000 fe4d 	bl	8001998 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d125      	bne.n	8000d50 <Tracking+0x2c8>
 8000d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <Tracking+0x2b0>)
 8000d0a:	f000 fe45 	bl	8001998 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11d      	bne.n	8000d50 <Tracking+0x2c8>
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <Tracking+0x2b4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d119      	bne.n	8000d50 <Tracking+0x2c8>
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <Tracking+0x2bc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d115      	bne.n	8000d50 <Tracking+0x2c8>
				RIGHT_OUT = 1;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <Tracking+0x2c0>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
				LEFT_OUT = 0;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <Tracking+0x2c4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
				LEFT_IN = 0;
 8000d30:	4b02      	ldr	r3, [pc, #8]	@ (8000d3c <Tracking+0x2b4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
				return;
 8000d36:	e1b8      	b.n	80010aa <Tracking+0x622>
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	20000108 	.word	0x20000108
 8000d40:	20000104 	.word	0x20000104
 8000d44:	20000114 	.word	0x20000114
 8000d48:	2000010c 	.word	0x2000010c
 8000d4c:	20000110 	.word	0x20000110
			}
	}
			// A-通常情况
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(RIGHT_OUT == 0)&&(RIGHT_IN == 0)){
 8000d50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d54:	4899      	ldr	r0, [pc, #612]	@ (8000fbc <Tracking+0x534>)
 8000d56:	f000 fe1f 	bl	8001998 <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d129      	bne.n	8000db4 <Tracking+0x32c>
 8000d60:	2108      	movs	r1, #8
 8000d62:	4896      	ldr	r0, [pc, #600]	@ (8000fbc <Tracking+0x534>)
 8000d64:	f000 fe18 	bl	8001998 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d122      	bne.n	8000db4 <Tracking+0x32c>
 8000d6e:	4b94      	ldr	r3, [pc, #592]	@ (8000fc0 <Tracking+0x538>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d11e      	bne.n	8000db4 <Tracking+0x32c>
 8000d76:	4b93      	ldr	r3, [pc, #588]	@ (8000fc4 <Tracking+0x53c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d11a      	bne.n	8000db4 <Tracking+0x32c>
				right:
 8000d7e:	bf00      	nop
		while(1){
			RIGHT();
 8000d80:	f7ff fb9e 	bl	80004c0 <RIGHT>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d88:	488c      	ldr	r0, [pc, #560]	@ (8000fbc <Tracking+0x534>)
 8000d8a:	f000 fe05 	bl	8001998 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f5      	bne.n	8000d80 <Tracking+0x2f8>
 8000d94:	2108      	movs	r1, #8
 8000d96:	4889      	ldr	r0, [pc, #548]	@ (8000fbc <Tracking+0x534>)
 8000d98:	f000 fdfe 	bl	8001998 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1ee      	bne.n	8000d80 <Tracking+0x2f8>
 8000da2:	2120      	movs	r1, #32
 8000da4:	4885      	ldr	r0, [pc, #532]	@ (8000fbc <Tracking+0x534>)
 8000da6:	f000 fdf7 	bl	8001998 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d000      	beq.n	8000db2 <Tracking+0x32a>
			RIGHT();
 8000db0:	e7e6      	b.n	8000d80 <Tracking+0x2f8>
			break ;
 8000db2:	bf00      	nop
			}
		}
	}
			// A-右侧已入环——第一阶段
			if((RIGHT_IN == 1)&&(PHASE == 1)){
 8000db4:	4b83      	ldr	r3, [pc, #524]	@ (8000fc4 <Tracking+0x53c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d134      	bne.n	8000e26 <Tracking+0x39e>
 8000dbc:	4b82      	ldr	r3, [pc, #520]	@ (8000fc8 <Tracking+0x540>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d130      	bne.n	8000e26 <Tracking+0x39e>
				while(1){
					RIGHT();
 8000dc4:	f7ff fb7c 	bl	80004c0 <RIGHT>
					if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dcc:	487b      	ldr	r0, [pc, #492]	@ (8000fbc <Tracking+0x534>)
 8000dce:	f000 fde3 	bl	8001998 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10d      	bne.n	8000df4 <Tracking+0x36c>
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4878      	ldr	r0, [pc, #480]	@ (8000fbc <Tracking+0x534>)
 8000ddc:	f000 fddc 	bl	8001998 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <Tracking+0x36c>
 8000de6:	2120      	movs	r1, #32
 8000de8:	4874      	ldr	r0, [pc, #464]	@ (8000fbc <Tracking+0x534>)
 8000dea:	f000 fdd5 	bl	8001998 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d018      	beq.n	8000e26 <Tracking+0x39e>
						break ;
					}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)){
 8000df4:	2108      	movs	r1, #8
 8000df6:	4871      	ldr	r0, [pc, #452]	@ (8000fbc <Tracking+0x534>)
 8000df8:	f000 fdce 	bl	8001998 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1e0      	bne.n	8000dc4 <Tracking+0x33c>
 8000e02:	2120      	movs	r1, #32
 8000e04:	486d      	ldr	r0, [pc, #436]	@ (8000fbc <Tracking+0x534>)
 8000e06:	f000 fdc7 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d1d9      	bne.n	8000dc4 <Tracking+0x33c>
 8000e10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e14:	4869      	ldr	r0, [pc, #420]	@ (8000fbc <Tracking+0x534>)
 8000e16:	f000 fdbf 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1d1      	bne.n	8000dc4 <Tracking+0x33c>
						PHASE = 2;
 8000e20:	4b69      	ldr	r3, [pc, #420]	@ (8000fc8 <Tracking+0x540>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	601a      	str	r2, [r3, #0]
						break ;
					}
				}
			}
			// B-左侧已入环——第二阶段
			if((LEFT_IN == 1)&&(PHASE == 2)){
 8000e26:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <Tracking+0x544>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	f040 813a 	bne.w	80010a4 <Tracking+0x61c>
 8000e30:	4b65      	ldr	r3, [pc, #404]	@ (8000fc8 <Tracking+0x540>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	f040 8135 	bne.w	80010a4 <Tracking+0x61c>
				while(1){
					LEFT();
 8000e3a:	f7ff fb4b 	bl	80004d4 <LEFT>
				 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e42:	485e      	ldr	r0, [pc, #376]	@ (8000fbc <Tracking+0x534>)
 8000e44:	f000 fda8 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f5      	bne.n	8000e3a <Tracking+0x3b2>
 8000e4e:	2108      	movs	r1, #8
 8000e50:	485a      	ldr	r0, [pc, #360]	@ (8000fbc <Tracking+0x534>)
 8000e52:	f000 fda1 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ee      	bne.n	8000e3a <Tracking+0x3b2>
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4857      	ldr	r0, [pc, #348]	@ (8000fbc <Tracking+0x534>)
 8000e60:	f000 fd9a 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d000      	beq.n	8000e6c <Tracking+0x3e4>
					LEFT();
 8000e6a:	e7e6      	b.n	8000e3a <Tracking+0x3b2>
					break ;
 8000e6c:	bf00      	nop
			if((LEFT_IN == 1)&&(PHASE == 2)){
 8000e6e:	e119      	b.n	80010a4 <Tracking+0x61c>
}



	   // B-左转同时进行出环判断
	else if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)){
 8000e70:	2108      	movs	r1, #8
 8000e72:	4852      	ldr	r0, [pc, #328]	@ (8000fbc <Tracking+0x534>)
 8000e74:	f000 fd90 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	f040 8107 	bne.w	800108e <Tracking+0x606>
 8000e80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e84:	484d      	ldr	r0, [pc, #308]	@ (8000fbc <Tracking+0x534>)
 8000e86:	f000 fd87 	bl	8001998 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 80fe 	bne.w	800108e <Tracking+0x606>
			HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f000 fa18 	bl	80012c8 <HAL_Delay>
			// 立刻判断一次是否在环内,若不是则直接清空所有标志
			if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4848      	ldr	r0, [pc, #288]	@ (8000fbc <Tracking+0x534>)
 8000e9c:	f000 fd7c 	bl	8001998 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <Tracking+0x43c>
				RIGHT_IN = 0;
 8000ea6:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <Tracking+0x53c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
				LEFT_IN = 0;
 8000eac:	4b47      	ldr	r3, [pc, #284]	@ (8000fcc <Tracking+0x544>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
				RIGHT_OUT = 0;
 8000eb2:	4b43      	ldr	r3, [pc, #268]	@ (8000fc0 <Tracking+0x538>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
				LEFT_OUT = 0;
 8000eb8:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <Tracking+0x548>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
				PHASE = 0;
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <Tracking+0x540>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(DELAY_NO);
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f000 f9ff 	bl	80012c8 <HAL_Delay>
			// A-左侧出环,清零右侧入环
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(RIGHT_IN == 1)&&(PHASE == 2)){
 8000eca:	2108      	movs	r1, #8
 8000ecc:	483b      	ldr	r0, [pc, #236]	@ (8000fbc <Tracking+0x534>)
 8000ece:	f000 fd63 	bl	8001998 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d13f      	bne.n	8000f58 <Tracking+0x4d0>
 8000ed8:	2120      	movs	r1, #32
 8000eda:	4838      	ldr	r0, [pc, #224]	@ (8000fbc <Tracking+0x534>)
 8000edc:	f000 fd5c 	bl	8001998 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d138      	bne.n	8000f58 <Tracking+0x4d0>
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	4834      	ldr	r0, [pc, #208]	@ (8000fbc <Tracking+0x534>)
 8000eea:	f000 fd55 	bl	8001998 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d131      	bne.n	8000f58 <Tracking+0x4d0>
 8000ef4:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <Tracking+0x53c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d12d      	bne.n	8000f58 <Tracking+0x4d0>
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <Tracking+0x540>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d129      	bne.n	8000f58 <Tracking+0x4d0>
				HAL_Delay(DELAY_NO);
 8000f04:	2014      	movs	r0, #20
 8000f06:	f000 f9df 	bl	80012c8 <HAL_Delay>
				if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(RIGHT_IN == 1)&&(PHASE == 2)){
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	482b      	ldr	r0, [pc, #172]	@ (8000fbc <Tracking+0x534>)
 8000f0e:	f000 fd43 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d11f      	bne.n	8000f58 <Tracking+0x4d0>
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4828      	ldr	r0, [pc, #160]	@ (8000fbc <Tracking+0x534>)
 8000f1c:	f000 fd3c 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d118      	bne.n	8000f58 <Tracking+0x4d0>
 8000f26:	2110      	movs	r1, #16
 8000f28:	4824      	ldr	r0, [pc, #144]	@ (8000fbc <Tracking+0x534>)
 8000f2a:	f000 fd35 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d111      	bne.n	8000f58 <Tracking+0x4d0>
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <Tracking+0x53c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10d      	bne.n	8000f58 <Tracking+0x4d0>
 8000f3c:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <Tracking+0x540>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d109      	bne.n	8000f58 <Tracking+0x4d0>
				LEFT_OUT = 1;
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <Tracking+0x548>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
				RIGHT_OUT = 0;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <Tracking+0x538>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
				RIGHT_IN = 0;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <Tracking+0x53c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
				return;
 8000f56:	e0a8      	b.n	80010aa <Tracking+0x622>
			}
	}
			// B-通常情况
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(LEFT_OUT == 0)&&(LEFT_IN == 0)){
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <Tracking+0x534>)
 8000f5c:	f000 fd1c 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d137      	bne.n	8000fd6 <Tracking+0x54e>
 8000f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6a:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <Tracking+0x534>)
 8000f6c:	f000 fd14 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d12f      	bne.n	8000fd6 <Tracking+0x54e>
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <Tracking+0x548>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d12b      	bne.n	8000fd6 <Tracking+0x54e>
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <Tracking+0x544>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d127      	bne.n	8000fd6 <Tracking+0x54e>
				left:
 8000f86:	e000      	b.n	8000f8a <Tracking+0x502>
				goto left;
 8000f88:	bf00      	nop
		while(1){
			LEFT();
 8000f8a:	f7ff faa3 	bl	80004d4 <LEFT>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000f8e:	2108      	movs	r1, #8
 8000f90:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <Tracking+0x534>)
 8000f92:	f000 fd01 	bl	8001998 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f6      	bne.n	8000f8a <Tracking+0x502>
 8000f9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa0:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <Tracking+0x534>)
 8000fa2:	f000 fcf9 	bl	8001998 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <Tracking+0x502>
 8000fac:	2120      	movs	r1, #32
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <Tracking+0x534>)
 8000fb0:	f000 fcf2 	bl	8001998 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d00c      	beq.n	8000fd4 <Tracking+0x54c>
			LEFT();
 8000fba:	e7e6      	b.n	8000f8a <Tracking+0x502>
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	2000010c 	.word	0x2000010c
 8000fc4:	20000104 	.word	0x20000104
 8000fc8:	20000114 	.word	0x20000114
 8000fcc:	20000108 	.word	0x20000108
 8000fd0:	20000110 	.word	0x20000110
			break ;
 8000fd4:	bf00      	nop
			}
		}
	}
			// B-左侧已入环——第一阶段
			if((LEFT_IN == 1)&&(PHASE == 1)){
 8000fd6:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <Tracking+0x624>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d134      	bne.n	8001048 <Tracking+0x5c0>
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <Tracking+0x628>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d130      	bne.n	8001048 <Tracking+0x5c0>
				while(1){
					LEFT();
 8000fe6:	f7ff fa75 	bl	80004d4 <LEFT>
					if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000fea:	2108      	movs	r1, #8
 8000fec:	4831      	ldr	r0, [pc, #196]	@ (80010b4 <Tracking+0x62c>)
 8000fee:	f000 fcd3 	bl	8001998 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10e      	bne.n	8001016 <Tracking+0x58e>
 8000ff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffc:	482d      	ldr	r0, [pc, #180]	@ (80010b4 <Tracking+0x62c>)
 8000ffe:	f000 fccb 	bl	8001998 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <Tracking+0x58e>
 8001008:	2120      	movs	r1, #32
 800100a:	482a      	ldr	r0, [pc, #168]	@ (80010b4 <Tracking+0x62c>)
 800100c:	f000 fcc4 	bl	8001998 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d018      	beq.n	8001048 <Tracking+0x5c0>
						break ;
					}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8001016:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101a:	4826      	ldr	r0, [pc, #152]	@ (80010b4 <Tracking+0x62c>)
 800101c:	f000 fcbc 	bl	8001998 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d1df      	bne.n	8000fe6 <Tracking+0x55e>
 8001026:	2120      	movs	r1, #32
 8001028:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <Tracking+0x62c>)
 800102a:	f000 fcb5 	bl	8001998 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d1d8      	bne.n	8000fe6 <Tracking+0x55e>
 8001034:	2108      	movs	r1, #8
 8001036:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <Tracking+0x62c>)
 8001038:	f000 fcae 	bl	8001998 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1d1      	bne.n	8000fe6 <Tracking+0x55e>
						PHASE = 2;
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <Tracking+0x628>)
 8001044:	2202      	movs	r2, #2
 8001046:	601a      	str	r2, [r3, #0]
						break ;
					}
				}
			}
			// A-右侧已入环——第二阶段
			if((RIGHT_IN == 1)&&(PHASE == 2)){
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <Tracking+0x630>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d12b      	bne.n	80010a8 <Tracking+0x620>
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <Tracking+0x628>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d127      	bne.n	80010a8 <Tracking+0x620>
				while(1){
					RIGHT();
 8001058:	f7ff fa32 	bl	80004c0 <RIGHT>
				 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 800105c:	2108      	movs	r1, #8
 800105e:	4815      	ldr	r0, [pc, #84]	@ (80010b4 <Tracking+0x62c>)
 8001060:	f000 fc9a 	bl	8001998 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f6      	bne.n	8001058 <Tracking+0x5d0>
 800106a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <Tracking+0x62c>)
 8001070:	f000 fc92 	bl	8001998 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ee      	bne.n	8001058 <Tracking+0x5d0>
 800107a:	2120      	movs	r1, #32
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <Tracking+0x62c>)
 800107e:	f000 fc8b 	bl	8001998 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d000      	beq.n	800108a <Tracking+0x602>
					RIGHT();
 8001088:	e7e6      	b.n	8001058 <Tracking+0x5d0>
					break ;
 800108a:	bf00      	nop
			if((RIGHT_IN == 1)&&(PHASE == 2)){
 800108c:	e00c      	b.n	80010a8 <Tracking+0x620>
}
		// 备忘：在上面的while循环break条件里考虑加入判断4、8号光电的可能性

		// 如果条件全部不匹配，就直行
		else{
			A_Forward(A_SPEED);
 800108e:	2042      	movs	r0, #66	@ 0x42
 8001090:	f7ff f9ca 	bl	8000428 <A_Forward>
			B_Forward(B_SPEED);
 8001094:	2032      	movs	r0, #50	@ 0x32
 8001096:	f7ff f9a1 	bl	80003dc <B_Forward>
 800109a:	e006      	b.n	80010aa <Tracking+0x622>
				return;
 800109c:	bf00      	nop
 800109e:	e004      	b.n	80010aa <Tracking+0x622>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 80010a0:	bf00      	nop
 80010a2:	e002      	b.n	80010aa <Tracking+0x622>
			if((LEFT_IN == 1)&&(PHASE == 2)){
 80010a4:	bf00      	nop
 80010a6:	e000      	b.n	80010aa <Tracking+0x622>
			if((RIGHT_IN == 1)&&(PHASE == 2)){
 80010a8:	bf00      	nop
		}
 }
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000108 	.word	0x20000108
 80010b0:	20000114 	.word	0x20000114
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	20000104 	.word	0x20000104

080010bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_USART3_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_USART3_UART_Init+0x4c>)
 80010f4:	f002 f825 	bl	8003142 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f7ff f900 	bl	8000302 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000118 	.word	0x20000118
 800110c:	40004800 	.word	0x40004800

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <HAL_UART_MspInit+0x9c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d139      	bne.n	80011a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 8001136:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113a:	61d3      	str	r3, [r2, #28]
 800113c:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_UART_MspInit+0xa0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	@ (80011b4 <HAL_UART_MspInit+0xa4>)
 8001176:	f000 fa8b 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800117a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <HAL_UART_MspInit+0xa4>)
 8001190:	f000 fa7e 	bl	8001690 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2027      	movs	r0, #39	@ 0x27
 800119a:	f000 f990 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119e:	2027      	movs	r0, #39	@ 0x27
 80011a0:	f000 f9a9 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40004800 	.word	0x40004800
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010c00 	.word	0x40010c00

080011b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b8:	f7ff f9fe 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480b      	ldr	r0, [pc, #44]	@ (80011ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011be:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011c0:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011d4:	4c09      	ldr	r4, [pc, #36]	@ (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f002 fce9 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e6:	f7fe fff5 	bl	80001d4 <main>
  bx lr
 80011ea:	4770      	bx	lr
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011f4:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 80011f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011fc:	20000164 	.word	0x20000164

08001200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_2_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_Init+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_Init+0x28>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f947 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff f962 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f95f 	bl	8001512 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f927 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	@ (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a03      	ldr	r2, [pc, #12]	@ (80012b0 <HAL_IncTick+0x20>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000160 	.word	0x20000160

080012b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000160 	.word	0x20000160

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffe0 	bl	80012b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4906      	ldr	r1, [pc, #24]	@ (80013a8 <__NVIC_EnableIRQ+0x34>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff90 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff2d 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff42 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff35 	bl	8001374 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d008      	beq.n	8001554 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e020      	b.n	8001596 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d005      	beq.n	80015c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2204      	movs	r2, #4
 80015bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e051      	b.n	8001668 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020e 	bic.w	r2, r2, #14
 80015d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_DMA_Abort_IT+0xd4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d029      	beq.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_DMA_Abort_IT+0xd8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <HAL_DMA_Abort_IT+0x9e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_DMA_Abort_IT+0xdc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01a      	beq.n	8001638 <HAL_DMA_Abort_IT+0x98>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_DMA_Abort_IT+0xe0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_Abort_IT+0x92>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_DMA_Abort_IT+0xe4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <HAL_DMA_Abort_IT+0x8c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_DMA_Abort_IT+0xe8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_DMA_Abort_IT+0x86>
 8001620:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001624:	e00e      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 8001626:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800162a:	e00b      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 800162c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001630:	e008      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 8001632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001636:	e005      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 8001638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163c:	e002      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 800163e:	2310      	movs	r3, #16
 8001640:	e000      	b.n	8001644 <HAL_DMA_Abort_IT+0xa4>
 8001642:	2301      	movs	r3, #1
 8001644:	4a11      	ldr	r2, [pc, #68]	@ (800168c <HAL_DMA_Abort_IT+0xec>)
 8001646:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
    } 
  }
  return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020008 	.word	0x40020008
 8001678:	4002001c 	.word	0x4002001c
 800167c:	40020030 	.word	0x40020030
 8001680:	40020044 	.word	0x40020044
 8001684:	40020058 	.word	0x40020058
 8001688:	4002006c 	.word	0x4002006c
 800168c:	40020000 	.word	0x40020000

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b08b      	sub	sp, #44	@ 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e169      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a4:	2201      	movs	r2, #1
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8158 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001930 <HAL_GPIO_Init+0x2a0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d05e      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016cc:	4a98      	ldr	r2, [pc, #608]	@ (8001930 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d875      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016d2:	4a98      	ldr	r2, [pc, #608]	@ (8001934 <HAL_GPIO_Init+0x2a4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d058      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016d8:	4a96      	ldr	r2, [pc, #600]	@ (8001934 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d86f      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016de:	4a96      	ldr	r2, [pc, #600]	@ (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016e4:	4a94      	ldr	r2, [pc, #592]	@ (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d869      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016ea:	4a94      	ldr	r2, [pc, #592]	@ (800193c <HAL_GPIO_Init+0x2ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04c      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016f0:	4a92      	ldr	r2, [pc, #584]	@ (800193c <HAL_GPIO_Init+0x2ac>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d863      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016f6:	4a92      	ldr	r2, [pc, #584]	@ (8001940 <HAL_GPIO_Init+0x2b0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d046      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016fc:	4a90      	ldr	r2, [pc, #576]	@ (8001940 <HAL_GPIO_Init+0x2b0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d85d      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d82a      	bhi.n	800175c <HAL_GPIO_Init+0xcc>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d859      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 800170a:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <HAL_GPIO_Init+0x80>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	0800178b 	.word	0x0800178b
 8001714:	08001765 	.word	0x08001765
 8001718:	08001777 	.word	0x08001777
 800171c:	080017b9 	.word	0x080017b9
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	080017bf 	.word	0x080017bf
 8001738:	080017bf 	.word	0x080017bf
 800173c:	080017bf 	.word	0x080017bf
 8001740:	080017bf 	.word	0x080017bf
 8001744:	080017bf 	.word	0x080017bf
 8001748:	080017bf 	.word	0x080017bf
 800174c:	080017bf 	.word	0x080017bf
 8001750:	080017bf 	.word	0x080017bf
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001781 	.word	0x08001781
 800175c:	4a79      	ldr	r2, [pc, #484]	@ (8001944 <HAL_GPIO_Init+0x2b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e029      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e024      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01f      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e01a      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e013      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e009      	b.n	80017c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          break;
 80017be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	@ 0xff
 80017c4:	d801      	bhi.n	80017ca <HAL_GPIO_Init+0x13a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_Init+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	@ 0xff
 80017d4:	d802      	bhi.n	80017dc <HAL_GPIO_Init+0x14c>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x152>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	3b08      	subs	r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	210f      	movs	r1, #15
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80b1 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001810:	4b4d      	ldr	r3, [pc, #308]	@ (8001948 <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a4c      	ldr	r2, [pc, #304]	@ (8001948 <HAL_GPIO_Init+0x2b8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b4a      	ldr	r3, [pc, #296]	@ (8001948 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001828:	4a48      	ldr	r2, [pc, #288]	@ (800194c <HAL_GPIO_Init+0x2bc>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a40      	ldr	r2, [pc, #256]	@ (8001950 <HAL_GPIO_Init+0x2c0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3f      	ldr	r2, [pc, #252]	@ (8001954 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3e      	ldr	r2, [pc, #248]	@ (8001958 <HAL_GPIO_Init+0x2c8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <HAL_GPIO_Init+0x2cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1e0>
 800186c:	2303      	movs	r3, #3
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001870:	2304      	movs	r3, #4
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001874:	2302      	movs	r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 800187c:	2300      	movs	r3, #0
 800187e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188e:	492f      	ldr	r1, [pc, #188]	@ (800194c <HAL_GPIO_Init+0x2bc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	492c      	ldr	r1, [pc, #176]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4928      	ldr	r1, [pc, #160]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4922      	ldr	r1, [pc, #136]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	491e      	ldr	r1, [pc, #120]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4918      	ldr	r1, [pc, #96]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4914      	ldr	r1, [pc, #80]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	490e      	ldr	r1, [pc, #56]	@ (8001960 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e021      	b.n	8001972 <HAL_GPIO_Init+0x2e2>
 800192e:	bf00      	nop
 8001930:	10320000 	.word	0x10320000
 8001934:	10310000 	.word	0x10310000
 8001938:	10220000 	.word	0x10220000
 800193c:	10210000 	.word	0x10210000
 8001940:	10120000 	.word	0x10120000
 8001944:	10110000 	.word	0x10110000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_GPIO_Init+0x304>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	43db      	mvns	r3, r3
 800196c:	4909      	ldr	r1, [pc, #36]	@ (8001994 <HAL_GPIO_Init+0x304>)
 800196e:	4013      	ands	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f ae8e 	bne.w	80016a4 <HAL_GPIO_Init+0x14>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	372c      	adds	r7, #44	@ 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e272      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8087 	beq.w	8001af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e8:	4b92      	ldr	r3, [pc, #584]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d112      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
 8001a00:	4b8c      	ldr	r3, [pc, #560]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0c:	d10b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	4b89      	ldr	r3, [pc, #548]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x12c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d168      	bne.n	8001af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e24c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x76>
 8001a30:	4b80      	ldr	r3, [pc, #512]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a7f      	ldr	r2, [pc, #508]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e02e      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b7b      	ldr	r3, [pc, #492]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b78      	ldr	r3, [pc, #480]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a77      	ldr	r2, [pc, #476]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0xbc>
 8001a6a:	4b72      	ldr	r3, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a71      	ldr	r2, [pc, #452]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a84:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a67      	ldr	r2, [pc, #412]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc06 	bl	80012b4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fc02 	bl	80012b4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e200      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xe4>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fbf2 	bl	80012b4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fbee 	bl	80012b4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1ec      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b53      	ldr	r3, [pc, #332]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b02:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0e:	4b49      	ldr	r3, [pc, #292]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
 8001b1a:	4b46      	ldr	r3, [pc, #280]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1c0      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4939      	ldr	r1, [pc, #228]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fba7 	bl	80012b4 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fba3 	bl	80012b4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1a1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4927      	ldr	r1, [pc, #156]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb86 	bl	80012b4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb82 	bl	80012b4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e180      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03a      	beq.n	8001c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fb66 	bl	80012b4 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fb62 	bl	80012b4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e160      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 face 	bl	80021ac <RCC_Delay>
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fb4c 	bl	80012b4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1e:	e00f      	b.n	8001c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fb48 	bl	80012b4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d908      	bls.n	8001c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e146      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	42420000 	.word	0x42420000
 8001c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b92      	ldr	r3, [pc, #584]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e9      	bne.n	8001c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a6 	beq.w	8001da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b88      	ldr	r3, [pc, #544]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a87      	ldr	r2, [pc, #540]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b82      	ldr	r3, [pc, #520]	@ (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b7f      	ldr	r3, [pc, #508]	@ (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	@ (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb09 	bl	80012b4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff fb05 	bl	80012b4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	@ 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e103      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b75      	ldr	r3, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x4c8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x312>
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x334>
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a69      	ldr	r2, [pc, #420]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b67      	ldr	r3, [pc, #412]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a66      	ldr	r2, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	e01c      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x356>
 8001d04:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a60      	ldr	r2, [pc, #384]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	4b5e      	ldr	r3, [pc, #376]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a5a      	ldr	r2, [pc, #360]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a57      	ldr	r2, [pc, #348]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fab9 	bl	80012b4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fab5 	bl	80012b4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0b1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCC_OscConfig+0x37e>
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff faa3 	bl	80012b4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff fa9f 	bl	80012b4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e09b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8087 	beq.w	8001ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d061      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d146      	bne.n	8001e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fa73 	bl	80012b4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fa6f 	bl	80012b4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e06d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d108      	bne.n	8001e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4921      	ldr	r1, [pc, #132]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a19      	ldr	r1, [r3, #32]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	491b      	ldr	r1, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fa43 	bl	80012b4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fa3f 	bl	80012b4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e03d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46a>
 8001e50:	e035      	b.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fa2c 	bl	80012b4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fa28 	bl	80012b4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e026      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x498>
 8001e7e:	e01e      	b.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e019      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
 8001e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_OscConfig+0x500>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d0      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b67      	ldr	r3, [pc, #412]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4965      	ldr	r1, [pc, #404]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d040      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e073      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4936      	ldr	r1, [pc, #216]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f97a 	bl	80012b4 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f976 	bl	80012b4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e053      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d210      	bcs.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b24      	ldr	r3, [pc, #144]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4922      	ldr	r1, [pc, #136]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f8d8 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	08003c18 	.word	0x08003c18
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x94>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d002      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ce:	e027      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	613b      	str	r3, [r7, #16]
      break;
 80020d4:	e027      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0c9b      	lsrs	r3, r3, #18
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0c5b      	lsrs	r3, r3, #17
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	fb03 f202 	mul.w	r2, r3, r2
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e004      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0c      	ldr	r2, [pc, #48]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	613b      	str	r3, [r7, #16]
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	613b      	str	r3, [r7, #16]
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	693b      	ldr	r3, [r7, #16]
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	08003c30 	.word	0x08003c30
 8002140:	08003c40 	.word	0x08003c40
 8002144:	003d0900 	.word	0x003d0900

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	@ (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4903      	ldr	r1, [pc, #12]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08003c28 	.word	0x08003c28

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffde 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0adb      	lsrs	r3, r3, #11
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08003c28 	.word	0x08003c28

080021ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <RCC_Delay+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <RCC_Delay+0x38>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c8:	bf00      	nop
  }
  while (Delay --);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <RCC_Delay+0x1c>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000000 	.word	0x20000000
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e041      	b.n	800227e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fb7a 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f000 fc2c 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d001      	beq.n	80022a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <HAL_TIM_Base_Start+0x88>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_TIM_Base_Start+0x48>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ba:	d009      	beq.n	80022d0 <HAL_TIM_Base_Start+0x48>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <HAL_TIM_Base_Start+0x8c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_TIM_Base_Start+0x48>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <HAL_TIM_Base_Start+0x90>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d111      	bne.n	80022f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d010      	beq.n	8002304 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	e007      	b.n	8002304 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800

0800231c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e041      	b.n	80023b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f839 	bl	80023ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f000 fb92 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_TIM_PWM_Start+0x24>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e022      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d109      	bne.n	800240a <HAL_TIM_PWM_Start+0x3e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e015      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start+0x58>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e008      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e05e      	b.n	80024fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_TIM_PWM_Start+0x82>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800244c:	e013      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0x92>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800245c:	e00b      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0xa2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800246c:	e003      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd8c 	bl	8002f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_TIM_PWM_Start+0x138>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d107      	bne.n	800249e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_TIM_PWM_Start+0x138>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <HAL_TIM_PWM_Start+0x13c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_TIM_PWM_Start+0x140>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e8:	e007      	b.n	80024fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e093      	b.n	800264c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe fa15 	bl	8000968 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002554:	f023 0307 	bic.w	r3, r3, #7
 8002558:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f000 fa8d 	bl	8002a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4313      	orrs	r3, r2
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80025b0:	f023 030c 	bic.w	r3, r3, #12
 80025b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	4313      	orrs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	031b      	lsls	r3, r3, #12
 80025e0:	4313      	orrs	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4313      	orrs	r3, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002664:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800266c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002674:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800267c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d110      	bne.n	80026a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800268a:	7b7b      	ldrb	r3, [r7, #13]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e069      	b.n	8002768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a4:	e031      	b.n	800270a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d110      	bne.n	80026ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026b2:	7b3b      	ldrb	r3, [r7, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e055      	b.n	8002768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026cc:	e01d      	b.n	800270a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026da:	7b7b      	ldrb	r3, [r7, #13]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026e0:	7b3b      	ldrb	r3, [r7, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e03e      	b.n	8002768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_TIM_Encoder_Start+0xc4>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d008      	beq.n	8002728 <HAL_TIM_Encoder_Start+0xd4>
 8002716:	e00f      	b.n	8002738 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fc3b 	bl	8002f9c <TIM_CCxChannelCmd>
      break;
 8002726:	e016      	b.n	8002756 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	2104      	movs	r1, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fc33 	bl	8002f9c <TIM_CCxChannelCmd>
      break;
 8002736:	e00e      	b.n	8002756 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fc2b 	bl	8002f9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	2104      	movs	r1, #4
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fc24 	bl	8002f9c <TIM_CCxChannelCmd>
      break;
 8002754:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ae      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	f200 809f 	bhi.w	80028dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800279e:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	080028dd 	.word	0x080028dd
 80027ac:	080028dd 	.word	0x080028dd
 80027b0:	080028dd 	.word	0x080028dd
 80027b4:	08002819 	.word	0x08002819
 80027b8:	080028dd 	.word	0x080028dd
 80027bc:	080028dd 	.word	0x080028dd
 80027c0:	080028dd 	.word	0x080028dd
 80027c4:	0800285b 	.word	0x0800285b
 80027c8:	080028dd 	.word	0x080028dd
 80027cc:	080028dd 	.word	0x080028dd
 80027d0:	080028dd 	.word	0x080028dd
 80027d4:	0800289b 	.word	0x0800289b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f9be 	bl	8002b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6999      	ldr	r1, [r3, #24]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	619a      	str	r2, [r3, #24]
      break;
 8002816:	e064      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa04 	bl	8002c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	021a      	lsls	r2, r3, #8
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	619a      	str	r2, [r3, #24]
      break;
 8002858:	e043      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fa4d 	bl	8002d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0208 	orr.w	r2, r2, #8
 8002874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0204 	bic.w	r2, r2, #4
 8002884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	61da      	str	r2, [r3, #28]
      break;
 8002898:	e023      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fa97 	bl	8002dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	61da      	str	r2, [r3, #28]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	75fb      	strb	r3, [r7, #23]
      break;
 80028e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_TIM_ConfigClockSource+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e0b4      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x186>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800292e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002948:	d03e      	beq.n	80029c8 <HAL_TIM_ConfigClockSource+0xd4>
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800294e:	f200 8087 	bhi.w	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002956:	f000 8086 	beq.w	8002a66 <HAL_TIM_ConfigClockSource+0x172>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295e:	d87f      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b70      	cmp	r3, #112	@ 0x70
 8002962:	d01a      	beq.n	800299a <HAL_TIM_ConfigClockSource+0xa6>
 8002964:	2b70      	cmp	r3, #112	@ 0x70
 8002966:	d87b      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b60      	cmp	r3, #96	@ 0x60
 800296a:	d050      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x11a>
 800296c:	2b60      	cmp	r3, #96	@ 0x60
 800296e:	d877      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b50      	cmp	r3, #80	@ 0x50
 8002972:	d03c      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xfa>
 8002974:	2b50      	cmp	r3, #80	@ 0x50
 8002976:	d873      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b40      	cmp	r3, #64	@ 0x40
 800297a:	d058      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x13a>
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d86f      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b30      	cmp	r3, #48	@ 0x30
 8002982:	d064      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	2b30      	cmp	r3, #48	@ 0x30
 8002986:	d86b      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d060      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b20      	cmp	r3, #32
 800298e:	d867      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d05c      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b10      	cmp	r3, #16
 8002996:	d05a      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	e062      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029aa:	f000 fad8 	bl	8002f5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
      break;
 80029c6:	e04f      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	f000 fac1 	bl	8002f5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ea:	609a      	str	r2, [r3, #8]
      break;
 80029ec:	e03c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 fa38 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2150      	movs	r1, #80	@ 0x50
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa8f 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e02c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 fa56 	bl	8002ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2160      	movs	r1, #96	@ 0x60
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fa7f 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e01c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 fa18 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2140      	movs	r1, #64	@ 0x40
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fa6f 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e00c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f000 fa66 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002a5e:	e003      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e000      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <TIM_Base_SetConfig+0xd4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <TIM_Base_SetConfig+0xd8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <TIM_Base_SetConfig+0xd4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <TIM_Base_SetConfig+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800

08002b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 0201 	bic.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 0302 	bic.w	r3, r3, #2
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <TIM_OC1_SetConfig+0xc8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10c      	bne.n	8002bd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0308 	bic.w	r3, r3, #8
 8002bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <TIM_OC1_SetConfig+0xc8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d111      	bne.n	8002c02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	621a      	str	r2, [r3, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 0210 	bic.w	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0320 	bic.w	r3, r3, #32
 8002c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <TIM_OC2_SetConfig+0xd0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10d      	bne.n	8002ca8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <TIM_OC2_SetConfig+0xd0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d113      	bne.n	8002cd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0303 	bic.w	r3, r3, #3
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <TIM_OC3_SetConfig+0xd0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10d      	bne.n	8002d7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <TIM_OC3_SetConfig+0xd0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00

08002dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	031b      	lsls	r3, r3, #12
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e6c <TIM_OC4_SetConfig+0x98>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d109      	bne.n	8002e48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00

08002e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 030a 	bic.w	r3, r3, #10
 8002eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0210 	bic.w	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	031b      	lsls	r3, r3, #12
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	621a      	str	r2, [r3, #32]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f043 0307 	orr.w	r3, r3, #7
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e046      	b.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00e      	beq.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003048:	d009      	beq.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a10      	ldr	r2, [pc, #64]	@ (800309c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10c      	bne.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800

080030a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e03d      	b.n	8003138 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e042      	b.n	80031da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fd ffd1 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2224      	movs	r2, #36	@ 0x24
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003184:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fc80 	bl	8003a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800319a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0ba      	sub	sp, #232	@ 0xe8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_UART_IRQHandler+0x66>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb63 	bl	800390e <UART_Receive_IT>
      return;
 8003248:	e25b      	b.n	8003702 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800324a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80de 	beq.w	8003410 <HAL_UART_IRQHandler+0x22c>
 8003254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80d1 	beq.w	8003410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xae>
 800327a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xd2>
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_UART_IRQHandler+0xf6>
 80032c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d011      	beq.n	800330a <HAL_UART_IRQHandler+0x126>
 80032e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f043 0208 	orr.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 81f2 	beq.w	80036f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_UART_IRQHandler+0x14e>
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 faee 	bl	800390e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_UART_IRQHandler+0x17a>
 8003356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d04f      	beq.n	80033fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9f8 	bl	8003754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d041      	beq.n	80033f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800338c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800339e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d9      	bne.n	8003372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d013      	beq.n	80033ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	4a7e      	ldr	r2, [pc, #504]	@ (80035c4 <HAL_UART_IRQHandler+0x3e0>)
 80033cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe f8e4 	bl	80015a0 <HAL_DMA_Abort_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033e8:	4610      	mov	r0, r2
 80033ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00e      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f99c 	bl	800372c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e00a      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f998 	bl	800372c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	e006      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f994 	bl	800372c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800340a:	e175      	b.n	80036f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	bf00      	nop
    return;
 800340e:	e173      	b.n	80036f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	2b01      	cmp	r3, #1
 8003416:	f040 814f 	bne.w	80036b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8148 	beq.w	80036b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8141 	beq.w	80036b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80b6 	beq.w	80035c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8145 	beq.w	80036fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347a:	429a      	cmp	r2, r3
 800347c:	f080 813e 	bcs.w	80036fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003486:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b20      	cmp	r3, #32
 8003490:	f000 8088 	beq.w	80035a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1d9      	bne.n	8003494 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003504:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003508:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800350c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e1      	bne.n	80034e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800352c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800352e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003540:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003542:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003546:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800354e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003574:	f023 0310 	bic.w	r3, r3, #16
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003586:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003588:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800358c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e3      	bne.n	8003562 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd ffc3 	bl	800152a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8bf 	bl	800373e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c0:	e09c      	b.n	80036fc <HAL_UART_IRQHandler+0x518>
 80035c2:	bf00      	nop
 80035c4:	08003819 	.word	0x08003819
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 808e 	beq.w	8003700 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8089 	beq.w	8003700 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003612:	647a      	str	r2, [r7, #68]	@ 0x44
 8003614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e3      	bne.n	80035ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3314      	adds	r3, #20
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	623b      	str	r3, [r7, #32]
   return(result);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800364a:	633a      	str	r2, [r7, #48]	@ 0x30
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e3      	bne.n	8003626 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60fb      	str	r3, [r7, #12]
   return(result);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0310 	bic.w	r3, r3, #16
 8003682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003690:	61fa      	str	r2, [r7, #28]
 8003692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	617b      	str	r3, [r7, #20]
   return(result);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e3      	bne.n	800366c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f844 	bl	800373e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036b6:	e023      	b.n	8003700 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_UART_IRQHandler+0x4f4>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8b5 	bl	8003840 <UART_Transmit_IT>
    return;
 80036d6:	e014      	b.n	8003702 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <HAL_UART_IRQHandler+0x51e>
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8f4 	bl	80038de <UART_EndTransmit_IT>
    return;
 80036f6:	e004      	b.n	8003702 <HAL_UART_IRQHandler+0x51e>
    return;
 80036f8:	bf00      	nop
 80036fa:	e002      	b.n	8003702 <HAL_UART_IRQHandler+0x51e>
      return;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_UART_IRQHandler+0x51e>
      return;
 8003700:	bf00      	nop
  }
}
 8003702:	37e8      	adds	r7, #232	@ 0xe8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b095      	sub	sp, #84	@ 0x54
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800377c:	643a      	str	r2, [r7, #64]	@ 0x40
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d119      	bne.n	8003800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	60bb      	str	r3, [r7, #8]
   return(result);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ec:	61ba      	str	r2, [r7, #24]
 80037ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	613b      	str	r3, [r7, #16]
   return(result);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800380e:	bf00      	nop
 8003810:	3754      	adds	r7, #84	@ 0x54
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff7a 	bl	800372c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b21      	cmp	r3, #33	@ 0x21
 8003852:	d13e      	bne.n	80038d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385c:	d114      	bne.n	8003888 <UART_Transmit_IT+0x48>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d110      	bne.n	8003888 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800387a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	621a      	str	r2, [r3, #32]
 8003886:	e008      	b.n	800389a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	1c59      	adds	r1, r3, #1
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6211      	str	r1, [r2, #32]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4619      	mov	r1, r3
 80038a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff02 	bl	8003708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b08c      	sub	sp, #48	@ 0x30
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b22      	cmp	r3, #34	@ 0x22
 8003920:	f040 80ae 	bne.w	8003a80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392c:	d117      	bne.n	800395e <UART_Receive_IT+0x50>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d113      	bne.n	800395e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	b29a      	uxth	r2, r3
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	@ 0x28
 800395c:	e026      	b.n	80039ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003970:	d007      	beq.n	8003982 <UART_Receive_IT+0x74>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <UART_Receive_IT+0x82>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e008      	b.n	80039a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800399c:	b2da      	uxtb	r2, r3
 800399e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4619      	mov	r1, r3
 80039ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d15d      	bne.n	8003a7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0220 	bic.w	r2, r2, #32
 80039ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d135      	bne.n	8003a72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	623a      	str	r2, [r7, #32]
 8003a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	6a3a      	ldr	r2, [r7, #32]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d10a      	bne.n	8003a64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe67 	bl	800373e <HAL_UARTEx_RxEventCallback>
 8003a70:	e002      	b.n	8003a78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe51 	bl	800371a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e002      	b.n	8003a82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3730      	adds	r7, #48	@ 0x30
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ac6:	f023 030c 	bic.w	r3, r3, #12
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <UART_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d103      	bne.n	8003afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7fe fb46 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	e002      	b.n	8003b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fb2e 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	4a22      	ldr	r2, [pc, #136]	@ (8003ba4 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	0119      	lsls	r1, r3, #4
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009a      	lsls	r2, r3, #2
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b38:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba4 <UART_SetConfig+0x118>)
 8003b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2064      	movs	r0, #100	@ 0x64
 8003b42:	fb00 f303 	mul.w	r3, r0, r3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	@ 0x32
 8003b4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <UART_SetConfig+0x118>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b58:	4419      	add	r1, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <UART_SetConfig+0x118>)
 8003b72:	fba3 0302 	umull	r0, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2064      	movs	r0, #100	@ 0x64
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	3332      	adds	r3, #50	@ 0x32
 8003b84:	4a07      	ldr	r2, [pc, #28]	@ (8003ba4 <UART_SetConfig+0x118>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	440a      	add	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	51eb851f 	.word	0x51eb851f

08003ba8 <memset>:
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4402      	add	r2, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	2600      	movs	r6, #0
 8003bbc:	4d0c      	ldr	r5, [pc, #48]	@ (8003bf0 <__libc_init_array+0x38>)
 8003bbe:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf4 <__libc_init_array+0x3c>)
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	f000 f81a 	bl	8003c00 <_init>
 8003bcc:	2600      	movs	r6, #0
 8003bce:	4d0a      	ldr	r5, [pc, #40]	@ (8003bf8 <__libc_init_array+0x40>)
 8003bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bfc <__libc_init_array+0x44>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08003c44 	.word	0x08003c44
 8003bf4:	08003c44 	.word	0x08003c44
 8003bf8:	08003c44 	.word	0x08003c44
 8003bfc:	08003c48 	.word	0x08003c48

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

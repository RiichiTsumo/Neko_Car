
Neko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b00  08003b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00004b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003b40  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003b40  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cae3  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  00011b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00013dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017653  00000000  00000000  00015548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd6d  00000000  00000000  0002cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cda  00000000  00000000  0003c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c35e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000c3628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c6bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ae8 	.word	0x08003ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003ae8 	.word	0x08003ae8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1a      	ldr	r3, [pc, #104]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b17      	ldr	r3, [pc, #92]	@ (80001cc <MX_GPIO_Init+0x80>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b11      	ldr	r3, [pc, #68]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <MX_GPIO_Init+0x80>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin sensor3_Pin sensor4_Pin
                           sensor5_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin|sensor3_Pin|sensor4_Pin
 80001a8:	f44f 734e 	mov.w	r3, #824	@ 0x338
 80001ac:	613b      	str	r3, [r7, #16]
                          |sensor5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4619      	mov	r1, r3
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <MX_GPIO_Init+0x84>)
 80001be:	f001 f9db 	bl	8001578 <HAL_GPIO_Init>

}
 80001c2:	bf00      	nop
 80001c4:	3720      	adds	r7, #32
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 ff88 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f898 	bl	8000310 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001e0:	213c      	movs	r1, #60	@ 0x3c
 80001e2:	4845      	ldr	r0, [pc, #276]	@ (80002f8 <main+0x124>)
 80001e4:	f002 f9aa 	bl	800253c <HAL_TIM_Encoder_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffb0 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ec:	f000 fafa 	bl	80007e4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001f0:	f000 fa34 	bl	800065c <MX_TIM1_Init>
  MX_TIM4_Init();
 80001f4:	f000 fb80 	bl	80008f8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80001f8:	f000 fed4 	bl	8000fa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	483f      	ldr	r0, [pc, #252]	@ (80002fc <main+0x128>)
 8000200:	f002 f858 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8000204:	2104      	movs	r1, #4
 8000206:	483d      	ldr	r0, [pc, #244]	@ (80002fc <main+0x128>)
 8000208:	f002 f854 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 800020c:	2108      	movs	r1, #8
 800020e:	483b      	ldr	r0, [pc, #236]	@ (80002fc <main+0x128>)
 8000210:	f002 f850 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1);
 8000214:	2100      	movs	r1, #0
 8000216:	483a      	ldr	r0, [pc, #232]	@ (8000300 <main+0x12c>)
 8000218:	f002 f84c 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_2);
 800021c:	2104      	movs	r1, #4
 800021e:	4838      	ldr	r0, [pc, #224]	@ (8000300 <main+0x12c>)
 8000220:	f002 f848 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_3);
 8000224:	2108      	movs	r1, #8
 8000226:	4836      	ldr	r0, [pc, #216]	@ (8000300 <main+0x12c>)
 8000228:	f002 f844 	bl	80022b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 800022c:	210c      	movs	r1, #12
 800022e:	4834      	ldr	r0, [pc, #208]	@ (8000300 <main+0x12c>)
 8000230:	f002 f840 	bl	80022b4 <HAL_TIM_PWM_Start>

  // PID_Init(&mypid, 0, 0, 0, 800, 1000);

  HAL_TIM_Base_Start(&htim2);
 8000234:	4831      	ldr	r0, [pc, #196]	@ (80002fc <main+0x128>)
 8000236:	f001 ff9b 	bl	8002170 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800023a:	482f      	ldr	r0, [pc, #188]	@ (80002f8 <main+0x124>)
 800023c:	f001 ff98 	bl	8002170 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 145);		// 舵机A驱动代码，舵机占空比代数取值为40~250
 8000240:	4b2e      	ldr	r3, [pc, #184]	@ (80002fc <main+0x128>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2291      	movs	r2, #145	@ 0x91
 8000246:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 40);		// 舵机B驱动代码
 8000248:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <main+0x128>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2228      	movs	r2, #40	@ 0x28
 800024e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 40);		// 舵机C驱动代码
 8000250:	4b2a      	ldr	r3, [pc, #168]	@ (80002fc <main+0x128>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2228      	movs	r2, #40	@ 0x28
 8000256:	63da      	str	r2, [r3, #60]	@ 0x3c

  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  // HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
  TIM3->CCR1=TIM3->CCR4=80;
 8000258:	4a2a      	ldr	r2, [pc, #168]	@ (8000304 <main+0x130>)
 800025a:	2350      	movs	r3, #80	@ 0x50
 800025c:	6413      	str	r3, [r2, #64]	@ 0x40
 800025e:	4a29      	ldr	r2, [pc, #164]	@ (8000304 <main+0x130>)
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34
 8000262:	e002      	b.n	800026a <main+0x96>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 retry:
 8000264:	bf00      	nop
 8000266:	e000      	b.n	800026a <main+0x96>
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
		  HAL_Delay(3);
		  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
			  goto retry;
 8000268:	bf00      	nop
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
 800026a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026e:	4826      	ldr	r0, [pc, #152]	@ (8000308 <main+0x134>)
 8000270:	f001 fb06 	bl	8001880 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d015      	beq.n	80002a6 <main+0xd2>
 800027a:	2108      	movs	r1, #8
 800027c:	4822      	ldr	r0, [pc, #136]	@ (8000308 <main+0x134>)
 800027e:	f001 faff 	bl	8001880 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d00e      	beq.n	80002a6 <main+0xd2>
 8000288:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800028c:	481e      	ldr	r0, [pc, #120]	@ (8000308 <main+0x134>)
 800028e:	f001 faf7 	bl	8001880 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <main+0xd2>
 8000298:	2110      	movs	r1, #16
 800029a:	481b      	ldr	r0, [pc, #108]	@ (8000308 <main+0x134>)
 800029c:	f001 faf0 	bl	8001880 <HAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1de      	bne.n	8000264 <main+0x90>
		  HAL_Delay(3);
 80002a6:	2003      	movs	r0, #3
 80002a8:	f000 ff82 	bl	80011b0 <HAL_Delay>
		  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 80002ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b0:	4815      	ldr	r0, [pc, #84]	@ (8000308 <main+0x134>)
 80002b2:	f001 fae5 	bl	8001880 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d115      	bne.n	80002e8 <main+0x114>
 80002bc:	2108      	movs	r1, #8
 80002be:	4812      	ldr	r0, [pc, #72]	@ (8000308 <main+0x134>)
 80002c0:	f001 fade 	bl	8001880 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d10e      	bne.n	80002e8 <main+0x114>
 80002ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002ce:	480e      	ldr	r0, [pc, #56]	@ (8000308 <main+0x134>)
 80002d0:	f001 fad6 	bl	8001880 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d106      	bne.n	80002e8 <main+0x114>
 80002da:	2110      	movs	r1, #16
 80002dc:	480a      	ldr	r0, [pc, #40]	@ (8000308 <main+0x134>)
 80002de:	f001 facf 	bl	8001880 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d0bf      	beq.n	8000268 <main+0x94>
		  }
		  meow ++;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <main+0x138>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4a07      	ldr	r2, [pc, #28]	@ (800030c <main+0x138>)
 80002f0:	6013      	str	r3, [r2, #0]
		  Tracking();
 80002f2:	f000 fc15 	bl	8000b20 <Tracking>
	 retry:
 80002f6:	e7b5      	b.n	8000264 <main+0x90>
 80002f8:	200000c0 	.word	0x200000c0
 80002fc:	20000078 	.word	0x20000078
 8000300:	20000030 	.word	0x20000030
 8000304:	40000400 	.word	0x40000400
 8000308:	40010c00 	.word	0x40010c00
 800030c:	20000028 	.word	0x20000028

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	@ 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	@ 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fbb6 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000332:	2301      	movs	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800033a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	2301      	movs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2302      	movs	r3, #2
 8000346:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800034c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f001 faa9 	bl	80018b0 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000364:	f000 f819 	bl	800039a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
 800036a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2302      	movs	r3, #2
 800036e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fd16 	bl	8001db4 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800038e:	f000 f804 	bl	800039a <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	@ 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a2:	bf00      	nop
 80003a4:	e7fd      	b.n	80003a2 <Error_Handler+0x8>
	...

080003a8 <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 80003b2:	4b04      	ldr	r3, [pc, #16]	@ (80003c4 <__SetIn1PWM+0x1c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000030 	.word	0x20000030

080003c8 <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 80003d2:	4b04      	ldr	r3, [pc, #16]	@ (80003e4 <__SetIn2PWM+0x1c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000030 	.word	0x20000030

080003e8 <__SetIn3PWM>:
/**
 * @brief 设置IN3引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn3PWM(uint8_t duty)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN3_TIM, IN3_CH, duty);
 80003f2:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <__SetIn3PWM+0x1c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000030 	.word	0x20000030

08000408 <__SetIn4PWM>:
/**
 * @brief 设置IN4引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn4PWM(uint8_t duty)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN4_TIM, IN4_CH, duty);
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <__SetIn4PWM+0x1c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	79fa      	ldrb	r2, [r7, #7]
 8000418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	20000030 	.word	0x20000030

08000428 <A_Backward>:
/**
 * @brief 控制电机A前进
 * @param speed 速度值（0-100）
 */
void A_Backward(uint8_t speed)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b64      	cmp	r3, #100	@ 0x64
 8000436:	d901      	bls.n	800043c <A_Backward+0x14>
        speed = MAX_SPEED;
 8000438:	2364      	movs	r3, #100	@ 0x64
 800043a:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <A_Backward+0x48>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d107      	bne.n	8000454 <A_Backward+0x2c>
        __SetIn1PWM(speed);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ffae 	bl	80003a8 <__SetIn1PWM>
        __SetIn2PWM(0);
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff ffbb 	bl	80003c8 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 8000452:	e009      	b.n	8000468 <A_Backward+0x40>
        __SetIn1PWM(MAX_SPEED);
 8000454:	2064      	movs	r0, #100	@ 0x64
 8000456:	f7ff ffa7 	bl	80003a8 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffb0 	bl	80003c8 <__SetIn2PWM>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000002c 	.word	0x2000002c

08000474 <B_Forward>:
/**
 * @brief 控制电机B前进
 * @param speed 速度值（0-100）
 */
void B_Forward(uint8_t speed)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b64      	cmp	r3, #100	@ 0x64
 8000482:	d901      	bls.n	8000488 <B_Forward+0x14>
        speed = MAX_SPEED;
 8000484:	2364      	movs	r3, #100	@ 0x64
 8000486:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <B_Forward+0x48>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d107      	bne.n	80004a0 <B_Forward+0x2c>
        __SetIn3PWM(speed);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffa8 	bl	80003e8 <__SetIn3PWM>
        __SetIn4PWM(0);
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffb5 	bl	8000408 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED);
        __SetIn4PWM(MAX_SPEED - speed);
    }
}
 800049e:	e009      	b.n	80004b4 <B_Forward+0x40>
        __SetIn3PWM(MAX_SPEED);
 80004a0:	2064      	movs	r0, #100	@ 0x64
 80004a2:	f7ff ffa1 	bl	80003e8 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED - speed);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffaa 	bl	8000408 <__SetIn4PWM>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2000002c 	.word	0x2000002c

080004c0 <A_Forward>:
/**
 * @brief 控制电机A后退
 * @param speed 速度值（0-100）
 */
void A_Forward(uint8_t speed)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b64      	cmp	r3, #100	@ 0x64
 80004ce:	d901      	bls.n	80004d4 <A_Forward+0x14>
        speed = MAX_SPEED;
 80004d0:	2364      	movs	r3, #100	@ 0x64
 80004d2:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <A_Forward+0x48>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d107      	bne.n	80004ec <A_Forward+0x2c>
        __SetIn1PWM(0);
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ff63 	bl	80003a8 <__SetIn1PWM>
        __SetIn2PWM(speed);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff6f 	bl	80003c8 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 80004ea:	e009      	b.n	8000500 <A_Forward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff57 	bl	80003a8 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 80004fa:	2064      	movs	r0, #100	@ 0x64
 80004fc:	f7ff ff64 	bl	80003c8 <__SetIn2PWM>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000002c 	.word	0x2000002c

0800050c <B_Backward>:
/**
 * @brief 控制电机B后退
 * @param speed 速度值（0-100）
 */
void B_Backward(uint8_t speed)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b64      	cmp	r3, #100	@ 0x64
 800051a:	d901      	bls.n	8000520 <B_Backward+0x14>
        speed = MAX_SPEED;
 800051c:	2364      	movs	r3, #100	@ 0x64
 800051e:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <B_Backward+0x48>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d107      	bne.n	8000538 <B_Backward+0x2c>
        __SetIn3PWM(0);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff ff5d 	bl	80003e8 <__SetIn3PWM>
        __SetIn4PWM(speed);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff69 	bl	8000408 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED - speed);
        __SetIn4PWM(MAX_SPEED);
    }
}
 8000536:	e009      	b.n	800054c <B_Backward+0x40>
        __SetIn3PWM(MAX_SPEED - speed);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff51 	bl	80003e8 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED);
 8000546:	2064      	movs	r0, #100	@ 0x64
 8000548:	f7ff ff5e 	bl	8000408 <__SetIn4PWM>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000002c 	.word	0x2000002c

08000558 <RIGHT>:

/**
 * @brief 右转
 */
void RIGHT(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	A_Forward(85);
 800055c:	2055      	movs	r0, #85	@ 0x55
 800055e:	f7ff ffaf 	bl	80004c0 <A_Forward>
	B_Backward(35);
 8000562:	2023      	movs	r0, #35	@ 0x23
 8000564:	f7ff ffd2 	bl	800050c <B_Backward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <LEFT>:

/**
 * @brief 左转
 */
void LEFT(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	A_Backward(30);
 8000570:	201e      	movs	r0, #30
 8000572:	f7ff ff59 	bl	8000428 <A_Backward>
	B_Forward(70);
 8000576:	2046      	movs	r0, #70	@ 0x46
 8000578:	f7ff ff7c 	bl	8000474 <B_Forward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 52);
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 fda0 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000640:	4802      	ldr	r0, [pc, #8]	@ (800064c <USART3_IRQHandler+0x10>)
 8000642:	f002 fd43 	bl	80030cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000108 	.word	0x20000108

08000650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b096      	sub	sp, #88	@ 0x58
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f003 f9fb 	bl	8003a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069a:	4b50      	ldr	r3, [pc, #320]	@ (80007dc <MX_TIM1_Init+0x180>)
 800069c:	4a50      	ldr	r2, [pc, #320]	@ (80007e0 <MX_TIM1_Init+0x184>)
 800069e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80006a0:	4b4e      	ldr	r3, [pc, #312]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006a2:	2247      	movs	r2, #71	@ 0x47
 80006a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b4d      	ldr	r3, [pc, #308]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006ac:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006ae:	2263      	movs	r2, #99	@ 0x63
 80006b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b4a      	ldr	r3, [pc, #296]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b8:	4b48      	ldr	r3, [pc, #288]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c4:	4845      	ldr	r0, [pc, #276]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006c6:	f001 fd03 	bl	80020d0 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006d0:	f7ff fe63 	bl	800039a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006de:	4619      	mov	r1, r3
 80006e0:	483e      	ldr	r0, [pc, #248]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006e2:	f002 f87b 	bl	80027dc <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006ec:	f7ff fe55 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f0:	483a      	ldr	r0, [pc, #232]	@ (80007dc <MX_TIM1_Init+0x180>)
 80006f2:	f001 fd87 	bl	8002204 <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006fc:	f7ff fe4d 	bl	800039a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000708:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800070c:	4619      	mov	r1, r3
 800070e:	4833      	ldr	r0, [pc, #204]	@ (80007dc <MX_TIM1_Init+0x180>)
 8000710:	f002 fbdc 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800071a:	f7ff fe3e 	bl	800039a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071e:	2360      	movs	r3, #96	@ 0x60
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	4826      	ldr	r0, [pc, #152]	@ (80007dc <MX_TIM1_Init+0x180>)
 8000744:	f001 ff88 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800074e:	f7ff fe24 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	2204      	movs	r2, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4820      	ldr	r0, [pc, #128]	@ (80007dc <MX_TIM1_Init+0x180>)
 800075c:	f001 ff7c 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000766:	f7ff fe18 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	2208      	movs	r2, #8
 8000770:	4619      	mov	r1, r3
 8000772:	481a      	ldr	r0, [pc, #104]	@ (80007dc <MX_TIM1_Init+0x180>)
 8000774:	f001 ff70 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800077e:	f7ff fe0c 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	220c      	movs	r2, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <MX_TIM1_Init+0x180>)
 800078c:	f001 ff64 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000796:	f7ff fe00 	bl	800039a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM1_Init+0x180>)
 80007be:	f002 fbe3 	bl	8002f88 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80007c8:	f7ff fde7 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007cc:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM1_Init+0x180>)
 80007ce:	f000 f955 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3758      	adds	r7, #88	@ 0x58
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000030 	.word	0x20000030
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	@ 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000814:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800081c:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <MX_TIM2_Init+0x110>)
 800081e:	2247      	movs	r2, #71	@ 0x47
 8000820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b34      	ldr	r3, [pc, #208]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000828:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <MX_TIM2_Init+0x110>)
 800082a:	2263      	movs	r2, #99	@ 0x63
 800082c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083a:	482e      	ldr	r0, [pc, #184]	@ (80008f4 <MX_TIM2_Init+0x110>)
 800083c:	f001 fc48 	bl	80020d0 <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000846:	f7ff fda8 	bl	800039a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000850:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000854:	4619      	mov	r1, r3
 8000856:	4827      	ldr	r0, [pc, #156]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000858:	f001 ffc0 	bl	80027dc <HAL_TIM_ConfigClockSource>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000862:	f7ff fd9a 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000866:	4823      	ldr	r0, [pc, #140]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000868:	f001 fccc 	bl	8002204 <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000872:	f7ff fd92 	bl	800039a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4619      	mov	r1, r3
 8000884:	481b      	ldr	r0, [pc, #108]	@ (80008f4 <MX_TIM2_Init+0x110>)
 8000886:	f002 fb21 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000890:	f7ff fd83 	bl	800039a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000894:	2360      	movs	r3, #96	@ 0x60
 8000896:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <MX_TIM2_Init+0x110>)
 80008ac:	f001 fed4 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80008b6:	f7ff fd70 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_TIM2_Init+0x110>)
 80008c2:	f001 fec9 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80008cc:	f7ff fd65 	bl	800039a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2208      	movs	r2, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <MX_TIM2_Init+0x110>)
 80008d8:	f001 febe 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80008e2:	f7ff fd5a 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e6:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <MX_TIM2_Init+0x110>)
 80008e8:	f000 f8c8 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	@ 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000078 	.word	0x20000078

080008f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	@ 0x30
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2224      	movs	r2, #36	@ 0x24
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f8c2 	bl	8003a90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000914:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <MX_TIM4_Init+0xa4>)
 8000918:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_TIM4_Init+0xa0>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000928:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800092c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800094a:	230f      	movs	r3, #15
 800094c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000952:	2301      	movs	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800095a:	230f      	movs	r3, #15
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000966:	f001 fd47 	bl	80023f8 <HAL_TIM_Encoder_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000970:	f7ff fd13 	bl	800039a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_TIM4_Init+0xa0>)
 8000982:	f002 faa3 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800098c:	f7ff fd05 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3730      	adds	r7, #48	@ 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000c0 	.word	0x200000c0
 800099c:	40000800 	.word	0x40000800

080009a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <HAL_TIM_Base_MspInit+0x58>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10c      	bne.n	80009cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009ca:	e010      	b.n	80009ee <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d4:	d10b      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_TIM_Base_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40012c00 	.word	0x40012c00
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <HAL_TIM_Encoder_MspInit+0x70>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d123      	bne.n	8000a68 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a50:	23c0      	movs	r3, #192	@ 0xc0
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a64:	f000 fd88 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40000800 	.word	0x40000800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <HAL_TIM_MspPostInit+0x98>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d119      	bne.n	8000ad0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000ab4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <HAL_TIM_MspPostInit+0xa0>)
 8000aca:	f000 fd55 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ace:	e01c      	b.n	8000b0a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad8:	d117      	bne.n	8000b0a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin;
 8000af2:	2307      	movs	r3, #7
 8000af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <HAL_TIM_MspPostInit+0xa0>)
 8000b06:	f000 fd37 	bl	8001578 <HAL_GPIO_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <Tracking>:
#define B_SPEED 50					// 50
#define DELAY_NO 10
#define DELAY_SP 5


void Tracking(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	   // 右转
		if (((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1))&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000b24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b28:	4887      	ldr	r0, [pc, #540]	@ (8000d48 <Tracking+0x228>)
 8000b2a:	f000 fea9 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d007      	beq.n	8000b44 <Tracking+0x24>
 8000b34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b38:	4883      	ldr	r0, [pc, #524]	@ (8000d48 <Tracking+0x228>)
 8000b3a:	f000 fea1 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d136      	bne.n	8000bb2 <Tracking+0x92>
 8000b44:	2108      	movs	r1, #8
 8000b46:	4880      	ldr	r0, [pc, #512]	@ (8000d48 <Tracking+0x228>)
 8000b48:	f000 fe9a 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d12f      	bne.n	8000bb2 <Tracking+0x92>
			GO();
 8000b52:	f000 f977 	bl	8000e44 <GO>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000b56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5a:	487b      	ldr	r0, [pc, #492]	@ (8000d48 <Tracking+0x228>)
 8000b5c:	f000 fe90 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	f040 80eb 	bne.w	8000d3e <Tracking+0x21e>
 8000b68:	2108      	movs	r1, #8
 8000b6a:	4877      	ldr	r0, [pc, #476]	@ (8000d48 <Tracking+0x228>)
 8000b6c:	f000 fe88 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 80e3 	bne.w	8000d3e <Tracking+0x21e>
		while(1)
		{
			RIGHT();
 8000b78:	f7ff fcee 	bl	8000558 <RIGHT>
			Left_Try();
 8000b7c:	f000 f91a 	bl	8000db4 <Left_Try>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000b80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b84:	4870      	ldr	r0, [pc, #448]	@ (8000d48 <Tracking+0x228>)
 8000b86:	f000 fe7b 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f3      	bne.n	8000b78 <Tracking+0x58>
 8000b90:	2108      	movs	r1, #8
 8000b92:	486d      	ldr	r0, [pc, #436]	@ (8000d48 <Tracking+0x228>)
 8000b94:	f000 fe74 	bl	8001880 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1ec      	bne.n	8000b78 <Tracking+0x58>
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4869      	ldr	r0, [pc, #420]	@ (8000d48 <Tracking+0x228>)
 8000ba2:	f000 fe6d 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d000      	beq.n	8000bae <Tracking+0x8e>
			RIGHT();
 8000bac:	e7e4      	b.n	8000b78 <Tracking+0x58>
			break ;
 8000bae:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000bb0:	e0c5      	b.n	8000d3e <Tracking+0x21e>
			}
		}
			}
		}
		// 左转
		else  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1))){
 8000bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb6:	4864      	ldr	r0, [pc, #400]	@ (8000d48 <Tracking+0x228>)
 8000bb8:	f000 fe62 	bl	8001880 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d13d      	bne.n	8000c3e <Tracking+0x11e>
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4860      	ldr	r0, [pc, #384]	@ (8000d48 <Tracking+0x228>)
 8000bc6:	f000 fe5b 	bl	8001880 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d006      	beq.n	8000bde <Tracking+0xbe>
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	485d      	ldr	r0, [pc, #372]	@ (8000d48 <Tracking+0x228>)
 8000bd4:	f000 fe54 	bl	8001880 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d12f      	bne.n	8000c3e <Tracking+0x11e>
			GO();
 8000bde:	f000 f931 	bl	8000e44 <GO>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000be2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be6:	4858      	ldr	r0, [pc, #352]	@ (8000d48 <Tracking+0x228>)
 8000be8:	f000 fe4a 	bl	8001880 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 80a7 	bne.w	8000d42 <Tracking+0x222>
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4854      	ldr	r0, [pc, #336]	@ (8000d48 <Tracking+0x228>)
 8000bf8:	f000 fe42 	bl	8001880 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	f040 809f 	bne.w	8000d42 <Tracking+0x222>
		while(1)
		{
			LEFT();
 8000c04:	f7ff fcb2 	bl	800056c <LEFT>
			Left_Try();
 8000c08:	f000 f8d4 	bl	8000db4 <Left_Try>
		 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c10:	484d      	ldr	r0, [pc, #308]	@ (8000d48 <Tracking+0x228>)
 8000c12:	f000 fe35 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f3      	bne.n	8000c04 <Tracking+0xe4>
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	484a      	ldr	r0, [pc, #296]	@ (8000d48 <Tracking+0x228>)
 8000c20:	f000 fe2e 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ec      	bne.n	8000c04 <Tracking+0xe4>
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4846      	ldr	r0, [pc, #280]	@ (8000d48 <Tracking+0x228>)
 8000c2e:	f000 fe27 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d000      	beq.n	8000c3a <Tracking+0x11a>
			LEFT();
 8000c38:	e7e4      	b.n	8000c04 <Tracking+0xe4>
			break ;
 8000c3a:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000c3c:	e081      	b.n	8000d42 <Tracking+0x222>
			}
		}
	}
*/
		// 直行
		else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c42:	4841      	ldr	r0, [pc, #260]	@ (8000d48 <Tracking+0x228>)
 8000c44:	f000 fe1c 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d11c      	bne.n	8000c88 <Tracking+0x168>
 8000c4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c52:	483d      	ldr	r0, [pc, #244]	@ (8000d48 <Tracking+0x228>)
 8000c54:	f000 fe14 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d114      	bne.n	8000c88 <Tracking+0x168>
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4839      	ldr	r0, [pc, #228]	@ (8000d48 <Tracking+0x228>)
 8000c62:	f000 fe0d 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10d      	bne.n	8000c88 <Tracking+0x168>
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4836      	ldr	r0, [pc, #216]	@ (8000d48 <Tracking+0x228>)
 8000c70:	f000 fe06 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d106      	bne.n	8000c88 <Tracking+0x168>
			A_Forward(A_SPEED);
 8000c7a:	2042      	movs	r0, #66	@ 0x42
 8000c7c:	f7ff fc20 	bl	80004c0 <A_Forward>
			B_Forward(B_SPEED);
 8000c80:	2032      	movs	r0, #50	@ 0x32
 8000c82:	f7ff fbf7 	bl	8000474 <B_Forward>
 8000c86:	e05d      	b.n	8000d44 <Tracking+0x224>
		}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000c88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c8c:	482e      	ldr	r0, [pc, #184]	@ (8000d48 <Tracking+0x228>)
 8000c8e:	f000 fdf7 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d015      	beq.n	8000cc4 <Tracking+0x1a4>
 8000c98:	2108      	movs	r1, #8
 8000c9a:	482b      	ldr	r0, [pc, #172]	@ (8000d48 <Tracking+0x228>)
 8000c9c:	f000 fdf0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00e      	beq.n	8000cc4 <Tracking+0x1a4>
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4827      	ldr	r0, [pc, #156]	@ (8000d48 <Tracking+0x228>)
 8000cac:	f000 fde8 	bl	8001880 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d006      	beq.n	8000cc4 <Tracking+0x1a4>
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4823      	ldr	r0, [pc, #140]	@ (8000d48 <Tracking+0x228>)
 8000cba:	f000 fde1 	bl	8001880 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d102      	bne.n	8000cca <Tracking+0x1aa>
			  	GO_Dir();
 8000cc4:	f000 f858 	bl	8000d78 <GO_Dir>
 8000cc8:	e03c      	b.n	8000d44 <Tracking+0x224>
		  }else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)){
 8000cca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cce:	481e      	ldr	r0, [pc, #120]	@ (8000d48 <Tracking+0x228>)
 8000cd0:	f000 fdd6 	bl	8001880 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d12a      	bne.n	8000d30 <Tracking+0x210>
 8000cda:	2108      	movs	r1, #8
 8000cdc:	481a      	ldr	r0, [pc, #104]	@ (8000d48 <Tracking+0x228>)
 8000cde:	f000 fdcf 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d123      	bne.n	8000d30 <Tracking+0x210>
 8000ce8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cec:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <Tracking+0x228>)
 8000cee:	f000 fdc7 	bl	8001880 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11b      	bne.n	8000d30 <Tracking+0x210>
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <Tracking+0x228>)
 8000cfc:	f000 fdc0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d114      	bne.n	8000d30 <Tracking+0x210>
 8000d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0a:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <Tracking+0x228>)
 8000d0c:	f000 fdb8 	bl	8001880 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10c      	bne.n	8000d30 <Tracking+0x210>
 8000d16:	2120      	movs	r1, #32
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <Tracking+0x228>)
 8000d1a:	f000 fdb1 	bl	8001880 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <Tracking+0x210>
			  HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	@ 0x32
 8000d26:	f000 fa43 	bl	80011b0 <HAL_Delay>
			  GO_Back();
 8000d2a:	f000 f80f 	bl	8000d4c <GO_Back>
 8000d2e:	e009      	b.n	8000d44 <Tracking+0x224>
		  }else{
			A_Forward(A_SPEED);
 8000d30:	2042      	movs	r0, #66	@ 0x42
 8000d32:	f7ff fbc5 	bl	80004c0 <A_Forward>
			B_Forward(B_SPEED);
 8000d36:	2032      	movs	r0, #50	@ 0x32
 8000d38:	f7ff fb9c 	bl	8000474 <B_Forward>
		}

 }
 8000d3c:	e002      	b.n	8000d44 <Tracking+0x224>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <Tracking+0x224>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000d42:	bf00      	nop
 }
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <GO_Back>:

void GO_Back(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	while(1){
	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)){
 8000d50:	2120      	movs	r1, #32
 8000d52:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <GO_Back+0x28>)
 8000d54:	f000 fd94 	bl	8001880 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <GO_Back+0x20>
		A_Backward(A_SPEED - 30);
 8000d5e:	2024      	movs	r0, #36	@ 0x24
 8000d60:	f7ff fb62 	bl	8000428 <A_Backward>
		B_Backward(B_SPEED - 25);
 8000d64:	2019      	movs	r0, #25
 8000d66:	f7ff fbd1 	bl	800050c <B_Backward>
	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)){
 8000d6a:	e7f1      	b.n	8000d50 <GO_Back+0x4>
		}else{
			break;
 8000d6c:	bf00      	nop
		}
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <GO_Dir>:

void GO_Dir(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	while(1){
		A_Forward(A_SPEED);
 8000d7c:	2042      	movs	r0, #66	@ 0x42
 8000d7e:	f7ff fb9f 	bl	80004c0 <A_Forward>
		B_Forward(B_SPEED);
 8000d82:	2032      	movs	r0, #50	@ 0x32
 8000d84:	f7ff fb76 	bl	8000474 <B_Forward>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0 && HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0){
 8000d88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8c:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <GO_Dir+0x38>)
 8000d8e:	f000 fd77 	bl	8001880 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f1      	bne.n	8000d7c <GO_Dir+0x4>
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <GO_Dir+0x38>)
 8000d9c:	f000 fd70 	bl	8001880 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d000      	beq.n	8000da8 <GO_Dir+0x30>
		A_Forward(A_SPEED);
 8000da6:	e7e9      	b.n	8000d7c <GO_Dir+0x4>
			break;
 8000da8:	bf00      	nop
		}
	}
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <Left_Try>:
break ;
}
}
}
}
void Left_Try(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)){
 8000db8:	2110      	movs	r1, #16
 8000dba:	4821      	ldr	r0, [pc, #132]	@ (8000e40 <Left_Try+0x8c>)
 8000dbc:	f000 fd60 	bl	8001880 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d111      	bne.n	8000dea <Left_Try+0x36>
 8000dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dca:	481d      	ldr	r0, [pc, #116]	@ (8000e40 <Left_Try+0x8c>)
 8000dcc:	f000 fd58 	bl	8001880 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <Left_Try+0x36>
		A_Forward(A_SPEED);
 8000dd6:	2042      	movs	r0, #66	@ 0x42
 8000dd8:	f7ff fb72 	bl	80004c0 <A_Forward>
		B_Forward(B_SPEED);
 8000ddc:	2032      	movs	r0, #50	@ 0x32
 8000dde:	f7ff fb49 	bl	8000474 <B_Forward>
		HAL_Delay(500);
 8000de2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de6:	f000 f9e3 	bl	80011b0 <HAL_Delay>
	}
if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)){
 8000dea:	2108      	movs	r1, #8
 8000dec:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <Left_Try+0x8c>)
 8000dee:	f000 fd47 	bl	8001880 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d121      	bne.n	8000e3c <Left_Try+0x88>
 8000df8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dfc:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <Left_Try+0x8c>)
 8000dfe:	f000 fd3f 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d119      	bne.n	8000e3c <Left_Try+0x88>
while(1)
{
LEFT();
 8000e08:	f7ff fbb0 	bl	800056c <LEFT>
if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <Left_Try+0x8c>)
 8000e10:	f000 fd36 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f6      	bne.n	8000e08 <Left_Try+0x54>
 8000e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1e:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <Left_Try+0x8c>)
 8000e20:	f000 fd2e 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1ee      	bne.n	8000e08 <Left_Try+0x54>
 8000e2a:	2120      	movs	r1, #32
 8000e2c:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <Left_Try+0x8c>)
 8000e2e:	f000 fd27 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d000      	beq.n	8000e3a <Left_Try+0x86>
LEFT();
 8000e38:	e7e6      	b.n	8000e08 <Left_Try+0x54>
break ;
 8000e3a:	bf00      	nop
}
}
}

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <GO>:

void GO(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000e48:	200a      	movs	r0, #10
 8000e4a:	f000 f9b1 	bl	80011b0 <HAL_Delay>
	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000e4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e52:	4853      	ldr	r0, [pc, #332]	@ (8000fa0 <GO+0x15c>)
 8000e54:	f000 fd14 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12d      	bne.n	8000eba <GO+0x76>
 8000e5e:	2108      	movs	r1, #8
 8000e60:	484f      	ldr	r0, [pc, #316]	@ (8000fa0 <GO+0x15c>)
 8000e62:	f000 fd0d 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d126      	bne.n	8000eba <GO+0x76>
 8000e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e70:	484b      	ldr	r0, [pc, #300]	@ (8000fa0 <GO+0x15c>)
 8000e72:	f000 fd05 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d11e      	bne.n	8000eba <GO+0x76>
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4848      	ldr	r0, [pc, #288]	@ (8000fa0 <GO+0x15c>)
 8000e80:	f000 fcfe 	bl	8001880 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d117      	bne.n	8000eba <GO+0x76>
	while(1){
		A_Backward(A_SPEED);
 8000e8a:	2042      	movs	r0, #66	@ 0x42
 8000e8c:	f7ff facc 	bl	8000428 <A_Backward>
		B_Backward(B_SPEED);
 8000e90:	2032      	movs	r0, #50	@ 0x32
 8000e92:	f7ff fb3b 	bl	800050c <B_Backward>
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9a:	4841      	ldr	r0, [pc, #260]	@ (8000fa0 <GO+0x15c>)
 8000e9c:	f000 fcf0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f1      	bne.n	8000e8a <GO+0x46>
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	483d      	ldr	r0, [pc, #244]	@ (8000fa0 <GO+0x15c>)
 8000eaa:	f000 fce9 	bl	8001880 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <GO+0x72>
		A_Backward(A_SPEED);
 8000eb4:	e7e9      	b.n	8000e8a <GO+0x46>
			break;
 8000eb6:	bf00      	nop
	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000eb8:	e070      	b.n	8000f9c <GO+0x158>
			}
    	}
	}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
 8000eba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebe:	4838      	ldr	r0, [pc, #224]	@ (8000fa0 <GO+0x15c>)
 8000ec0:	f000 fcde 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d130      	bne.n	8000f2c <GO+0xe8>
 8000eca:	2108      	movs	r1, #8
 8000ecc:	4834      	ldr	r0, [pc, #208]	@ (8000fa0 <GO+0x15c>)
 8000ece:	f000 fcd7 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d129      	bne.n	8000f2c <GO+0xe8>
 8000ed8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000edc:	4830      	ldr	r0, [pc, #192]	@ (8000fa0 <GO+0x15c>)
 8000ede:	f000 fccf 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d121      	bne.n	8000f2c <GO+0xe8>
 8000ee8:	2110      	movs	r1, #16
 8000eea:	482d      	ldr	r0, [pc, #180]	@ (8000fa0 <GO+0x15c>)
 8000eec:	f000 fcc8 	bl	8001880 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d11a      	bne.n	8000f2c <GO+0xe8>
		while(1){
		RIGHT();
 8000ef6:	f7ff fb2f 	bl	8000558 <RIGHT>
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efe:	4828      	ldr	r0, [pc, #160]	@ (8000fa0 <GO+0x15c>)
 8000f00:	f000 fcbe 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f5      	bne.n	8000ef6 <GO+0xb2>
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <GO+0x15c>)
 8000f0e:	f000 fcb7 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1ee      	bne.n	8000ef6 <GO+0xb2>
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4821      	ldr	r0, [pc, #132]	@ (8000fa0 <GO+0x15c>)
 8000f1c:	f000 fcb0 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d000      	beq.n	8000f28 <GO+0xe4>
		RIGHT();
 8000f26:	e7e6      	b.n	8000ef6 <GO+0xb2>
		break ;
 8000f28:	bf00      	nop
	}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
 8000f2a:	e037      	b.n	8000f9c <GO+0x158>
		}
		}
	}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f30:	481b      	ldr	r0, [pc, #108]	@ (8000fa0 <GO+0x15c>)
 8000f32:	f000 fca5 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d12f      	bne.n	8000f9c <GO+0x158>
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <GO+0x15c>)
 8000f40:	f000 fc9e 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d128      	bne.n	8000f9c <GO+0x158>
 8000f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <GO+0x15c>)
 8000f50:	f000 fc96 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d120      	bne.n	8000f9c <GO+0x158>
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <GO+0x15c>)
 8000f5e:	f000 fc8f 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d119      	bne.n	8000f9c <GO+0x158>
		while(1){
		LEFT();
 8000f68:	f7ff fb00 	bl	800056c <LEFT>
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <GO+0x15c>)
 8000f72:	f000 fc85 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f5      	bne.n	8000f68 <GO+0x124>
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <GO+0x15c>)
 8000f80:	f000 fc7e 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ee      	bne.n	8000f68 <GO+0x124>
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <GO+0x15c>)
 8000f8e:	f000 fc77 	bl	8001880 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d000      	beq.n	8000f9a <GO+0x156>
		LEFT();
 8000f98:	e7e6      	b.n	8000f68 <GO+0x124>
		break ;
 8000f9a:	bf00      	nop
		}
		}
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <MX_USART3_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_USART3_UART_Init+0x4c>)
 8000fdc:	f002 f825 	bl	800302a <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f7ff f9d8 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000108 	.word	0x20000108
 8000ff4:	40004800 	.word	0x40004800

08000ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a20      	ldr	r2, [pc, #128]	@ (8001094 <HAL_UART_MspInit+0x9c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d139      	bne.n	800108c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 800101e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001022:	61d3      	str	r3, [r2, #28]
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	480f      	ldr	r0, [pc, #60]	@ (800109c <HAL_UART_MspInit+0xa4>)
 800105e:	f000 fa8b 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	@ (800109c <HAL_UART_MspInit+0xa4>)
 8001078:	f000 fa7e 	bl	8001578 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2027      	movs	r0, #39	@ 0x27
 8001082:	f000 f990 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001086:	2027      	movs	r0, #39	@ 0x27
 8001088:	f000 f9a9 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40004800 	.word	0x40004800
 8001098:	40021000 	.word	0x40021000
 800109c:	40010c00 	.word	0x40010c00

080010a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff fad6 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010a6:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010a8:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010bc:	4c09      	ldr	r4, [pc, #36]	@ (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f002 fce9 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff f881 	bl	80001d4 <main>
  bx lr
 80010d2:	4770      	bx	lr
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010dc:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 80010e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e4:	20000154 	.word	0x20000154

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f947 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fa3a 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f95f 	bl	80013fa <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f927 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000008 	.word	0x20000008
 8001198:	20000150 	.word	0x20000150

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000150 	.word	0x20000150

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	@ (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff2d 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff42 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff35 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d008      	beq.n	800143c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2204      	movs	r2, #4
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e020      	b.n	800147e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020e 	bic.w	r2, r2, #14
 800144a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f202 	lsl.w	r2, r1, r2
 800146a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d005      	beq.n	80014ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2204      	movs	r2, #4
 80014a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e051      	b.n	8001550 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 020e 	bic.w	r2, r2, #14
 80014ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a22      	ldr	r2, [pc, #136]	@ (800155c <HAL_DMA_Abort_IT+0xd4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d029      	beq.n	800152a <HAL_DMA_Abort_IT+0xa2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a21      	ldr	r2, [pc, #132]	@ (8001560 <HAL_DMA_Abort_IT+0xd8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <HAL_DMA_Abort_IT+0x9e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <HAL_DMA_Abort_IT+0xdc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_Abort_IT+0x98>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <HAL_DMA_Abort_IT+0xe0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d012      	beq.n	800151a <HAL_DMA_Abort_IT+0x92>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_DMA_Abort_IT+0xe4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00a      	beq.n	8001514 <HAL_DMA_Abort_IT+0x8c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_DMA_Abort_IT+0xe8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d102      	bne.n	800150e <HAL_DMA_Abort_IT+0x86>
 8001508:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800150c:	e00e      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 800150e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001512:	e00b      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 8001514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001518:	e008      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 800151a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151e:	e005      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 8001520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001524:	e002      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 8001526:	2310      	movs	r3, #16
 8001528:	e000      	b.n	800152c <HAL_DMA_Abort_IT+0xa4>
 800152a:	2301      	movs	r3, #1
 800152c:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_DMA_Abort_IT+0xec>)
 800152e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	4798      	blx	r3
    } 
  }
  return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020008 	.word	0x40020008
 8001560:	4002001c 	.word	0x4002001c
 8001564:	40020030 	.word	0x40020030
 8001568:	40020044 	.word	0x40020044
 800156c:	40020058 	.word	0x40020058
 8001570:	4002006c 	.word	0x4002006c
 8001574:	40020000 	.word	0x40020000

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	@ 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e169      	b.n	8001860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800158c:	2201      	movs	r2, #1
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8158 	bne.w	800185a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001818 <HAL_GPIO_Init+0x2a0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d05e      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015b4:	4a98      	ldr	r2, [pc, #608]	@ (8001818 <HAL_GPIO_Init+0x2a0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d875      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ba:	4a98      	ldr	r2, [pc, #608]	@ (800181c <HAL_GPIO_Init+0x2a4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d058      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015c0:	4a96      	ldr	r2, [pc, #600]	@ (800181c <HAL_GPIO_Init+0x2a4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d86f      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015c6:	4a96      	ldr	r2, [pc, #600]	@ (8001820 <HAL_GPIO_Init+0x2a8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d052      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015cc:	4a94      	ldr	r2, [pc, #592]	@ (8001820 <HAL_GPIO_Init+0x2a8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d869      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015d2:	4a94      	ldr	r2, [pc, #592]	@ (8001824 <HAL_GPIO_Init+0x2ac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04c      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015d8:	4a92      	ldr	r2, [pc, #584]	@ (8001824 <HAL_GPIO_Init+0x2ac>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d863      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015de:	4a92      	ldr	r2, [pc, #584]	@ (8001828 <HAL_GPIO_Init+0x2b0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d046      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015e4:	4a90      	ldr	r2, [pc, #576]	@ (8001828 <HAL_GPIO_Init+0x2b0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d85d      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d82a      	bhi.n	8001644 <HAL_GPIO_Init+0xcc>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d859      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015f2:	a201      	add	r2, pc, #4	@ (adr r2, 80015f8 <HAL_GPIO_Init+0x80>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001673 	.word	0x08001673
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800165f 	.word	0x0800165f
 8001604:	080016a1 	.word	0x080016a1
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016a7 	.word	0x080016a7
 8001610:	080016a7 	.word	0x080016a7
 8001614:	080016a7 	.word	0x080016a7
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a7 	.word	0x080016a7
 8001620:	080016a7 	.word	0x080016a7
 8001624:	080016a7 	.word	0x080016a7
 8001628:	080016a7 	.word	0x080016a7
 800162c:	080016a7 	.word	0x080016a7
 8001630:	080016a7 	.word	0x080016a7
 8001634:	080016a7 	.word	0x080016a7
 8001638:	080016a7 	.word	0x080016a7
 800163c:	08001655 	.word	0x08001655
 8001640:	08001669 	.word	0x08001669
 8001644:	4a79      	ldr	r2, [pc, #484]	@ (800182c <HAL_GPIO_Init+0x2b4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164a:	e02c      	b.n	80016a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e029      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e024      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3308      	adds	r3, #8
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e01f      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	330c      	adds	r3, #12
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e01a      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167a:	2304      	movs	r3, #4
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e013      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	611a      	str	r2, [r3, #16]
          break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	615a      	str	r2, [r3, #20]
          break;
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          break;
 80016a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	@ 0xff
 80016ac:	d801      	bhi.n	80016b2 <HAL_GPIO_Init+0x13a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_Init+0x13e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	@ 0xff
 80016bc:	d802      	bhi.n	80016c4 <HAL_GPIO_Init+0x14c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x152>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	3b08      	subs	r3, #8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	210f      	movs	r1, #15
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80b1 	beq.w	800185a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001830 <HAL_GPIO_Init+0x2b8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_GPIO_Init+0x2b8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <HAL_GPIO_Init+0x2b8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001710:	4a48      	ldr	r2, [pc, #288]	@ (8001834 <HAL_GPIO_Init+0x2bc>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a40      	ldr	r2, [pc, #256]	@ (8001838 <HAL_GPIO_Init+0x2c0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_Init+0x1ec>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a3f      	ldr	r2, [pc, #252]	@ (800183c <HAL_GPIO_Init+0x2c4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_Init+0x1e8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3e      	ldr	r2, [pc, #248]	@ (8001840 <HAL_GPIO_Init+0x2c8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x1e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3d      	ldr	r2, [pc, #244]	@ (8001844 <HAL_GPIO_Init+0x2cc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_Init+0x1e0>
 8001754:	2303      	movs	r3, #3
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001758:	2304      	movs	r3, #4
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001764:	2300      	movs	r3, #0
 8001766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001776:	492f      	ldr	r1, [pc, #188]	@ (8001834 <HAL_GPIO_Init+0x2bc>)
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001790:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	492c      	ldr	r1, [pc, #176]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4928      	ldr	r1, [pc, #160]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4922      	ldr	r1, [pc, #136]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	491e      	ldr	r1, [pc, #120]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4918      	ldr	r1, [pc, #96]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4914      	ldr	r1, [pc, #80]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d021      	beq.n	800184c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	490e      	ldr	r1, [pc, #56]	@ (8001848 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e021      	b.n	800185a <HAL_GPIO_Init+0x2e2>
 8001816:	bf00      	nop
 8001818:	10320000 	.word	0x10320000
 800181c:	10310000 	.word	0x10310000
 8001820:	10220000 	.word	0x10220000
 8001824:	10210000 	.word	0x10210000
 8001828:	10120000 	.word	0x10120000
 800182c:	10110000 	.word	0x10110000
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	40010800 	.word	0x40010800
 800183c:	40010c00 	.word	0x40010c00
 8001840:	40011000 	.word	0x40011000
 8001844:	40011400 	.word	0x40011400
 8001848:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_GPIO_Init+0x304>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	43db      	mvns	r3, r3
 8001854:	4909      	ldr	r1, [pc, #36]	@ (800187c <HAL_GPIO_Init+0x304>)
 8001856:	4013      	ands	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	f47f ae8e 	bne.w	800158c <HAL_GPIO_Init+0x14>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	372c      	adds	r7, #44	@ 0x2c
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e272      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8087 	beq.w	80019de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d0:	4b92      	ldr	r3, [pc, #584]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d00c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d112      	bne.n	800190e <HAL_RCC_OscConfig+0x5e>
 80018e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f4:	d10b      	bne.n	800190e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	4b89      	ldr	r3, [pc, #548]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06c      	beq.n	80019dc <HAL_RCC_OscConfig+0x12c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d168      	bne.n	80019dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e24c      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x76>
 8001918:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e02e      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x98>
 800192e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7a      	ldr	r2, [pc, #488]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b78      	ldr	r3, [pc, #480]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a77      	ldr	r2, [pc, #476]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0xbc>
 8001952:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a71      	ldr	r2, [pc, #452]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6e      	ldr	r2, [pc, #440]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xd4>
 800196c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6a      	ldr	r2, [pc, #424]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a67      	ldr	r2, [pc, #412]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fc06 	bl	800119c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fc02 	bl	800119c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e200      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xe4>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fbf2 	bl	800119c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fbee 	bl	800119c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	@ 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1ec      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x10c>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d063      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b4c      	ldr	r3, [pc, #304]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019f6:	4b49      	ldr	r3, [pc, #292]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d11c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x18c>
 8001a02:	4b46      	ldr	r3, [pc, #280]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d116      	bne.n	8001a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x176>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1c0      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4939      	ldr	r1, [pc, #228]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	e03a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a44:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fba7 	bl	800119c <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff fba3 	bl	800119c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1a1      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b2a      	ldr	r3, [pc, #168]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fb86 	bl	800119c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a94:	f7ff fb82 	bl	800119c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e180      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03a      	beq.n	8001b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fb66 	bl	800119c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fb62 	bl	800119c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e160      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 face 	bl	8002094 <RCC_Delay>
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff fb4c 	bl	800119c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b06:	e00f      	b.n	8001b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fb48 	bl	800119c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d908      	bls.n	8001b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e146      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	42420000 	.word	0x42420000
 8001b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b92      	ldr	r3, [pc, #584]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e9      	bne.n	8001b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a6 	beq.w	8001c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b8b      	ldr	r3, [pc, #556]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b88      	ldr	r3, [pc, #544]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a87      	ldr	r2, [pc, #540]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b85      	ldr	r3, [pc, #532]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b82      	ldr	r3, [pc, #520]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb09 	bl	800119c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff fb05 	bl	800119c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	@ 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e103      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b75      	ldr	r3, [pc, #468]	@ (8001d78 <HAL_RCC_OscConfig+0x4c8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x312>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	e02d      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x334>
 8001bca:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a69      	ldr	r2, [pc, #420]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a66      	ldr	r2, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	e01c      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x356>
 8001bec:	4b61      	ldr	r3, [pc, #388]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a60      	ldr	r2, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0x36e>
 8001c06:	4b5b      	ldr	r3, [pc, #364]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b58      	ldr	r3, [pc, #352]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a57      	ldr	r2, [pc, #348]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d015      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fab9 	bl	800119c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fab5 	bl	800119c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0b1      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ee      	beq.n	8001c2e <HAL_RCC_OscConfig+0x37e>
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff faa3 	bl	800119c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fa9f 	bl	800119c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e09b      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b3c      	ldr	r3, [pc, #240]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a3b      	ldr	r2, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8087 	beq.w	8001da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d061      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d146      	bne.n	8001d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fa73 	bl	800119c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff fa6f 	bl	800119c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e06d      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4921      	ldr	r1, [pc, #132]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a19      	ldr	r1, [r3, #32]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	430b      	orrs	r3, r1
 8001d06:	491b      	ldr	r1, [pc, #108]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff fa43 	bl	800119c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff fa3f 	bl	800119c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e03d      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x46a>
 8001d38:	e035      	b.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fa2c 	bl	800119c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff fa28 	bl	800119c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e026      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x498>
 8001d66:	e01e      	b.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e019      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_OscConfig+0x500>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d0      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b67      	ldr	r3, [pc, #412]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4965      	ldr	r1, [pc, #404]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e073      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4936      	ldr	r1, [pc, #216]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f97a 	bl	800119c <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff f976 	bl	800119c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e053      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4922      	ldr	r1, [pc, #136]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_RCC_ClockConfig+0x1cc>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f8d8 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08003b00 	.word	0x08003b00
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d002      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x36>
 8001fb6:	e027      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	613b      	str	r3, [r7, #16]
      break;
 8001fbc:	e027      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0c9b      	lsrs	r3, r3, #18
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0c5b      	lsrs	r3, r3, #17
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e004      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	613b      	str	r3, [r7, #16]
      break;
 8002006:	e002      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200e:	693b      	ldr	r3, [r7, #16]
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	007a1200 	.word	0x007a1200
 8002024:	08003b18 	.word	0x08003b18
 8002028:	08003b28 	.word	0x08003b28
 800202c:	003d0900 	.word	0x003d0900

08002030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b02      	ldr	r3, [pc, #8]	@ (8002040 <HAL_RCC_GetHCLKFreq+0x10>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002048:	f7ff fff2 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	@ (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08003b10 	.word	0x08003b10

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002070:	f7ff ffde 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0adb      	lsrs	r3, r3, #11
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	@ (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08003b10 	.word	0x08003b10

08002094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <RCC_Delay+0x34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <RCC_Delay+0x38>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b0:	bf00      	nop
  }
  while (Delay --);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	60fa      	str	r2, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <RCC_Delay+0x1c>
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000000 	.word	0x20000000
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e041      	b.n	8002166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fc52 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 fc2c 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d001      	beq.n	8002188 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_TIM_Base_Start+0x88>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_TIM_Base_Start+0x48>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a2:	d009      	beq.n	80021b8 <HAL_TIM_Base_Start+0x48>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <HAL_TIM_Base_Start+0x8c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_TIM_Base_Start+0x48>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <HAL_TIM_Base_Start+0x90>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d010      	beq.n	80021ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	e007      	b.n	80021ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800

08002204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e041      	b.n	800229a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f839 	bl	80022a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f000 fb92 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_TIM_PWM_Start+0x24>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e022      	b.n	800231e <HAL_TIM_PWM_Start+0x6a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d109      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x3e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e015      	b.n	800231e <HAL_TIM_PWM_Start+0x6a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d109      	bne.n	800230c <HAL_TIM_PWM_Start+0x58>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e008      	b.n	800231e <HAL_TIM_PWM_Start+0x6a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e05e      	b.n	80023e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Start+0x82>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002334:	e013      	b.n	800235e <HAL_TIM_PWM_Start+0xaa>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d104      	bne.n	8002346 <HAL_TIM_PWM_Start+0x92>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002344:	e00b      	b.n	800235e <HAL_TIM_PWM_Start+0xaa>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d104      	bne.n	8002356 <HAL_TIM_PWM_Start+0xa2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002354:	e003      	b.n	800235e <HAL_TIM_PWM_Start+0xaa>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd8c 	bl	8002e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1e      	ldr	r2, [pc, #120]	@ (80023ec <HAL_TIM_PWM_Start+0x138>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d107      	bne.n	8002386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_TIM_PWM_Start+0x138>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00e      	beq.n	80023ae <HAL_TIM_PWM_Start+0xfa>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002398:	d009      	beq.n	80023ae <HAL_TIM_PWM_Start+0xfa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <HAL_TIM_PWM_Start+0x13c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIM_PWM_Start+0xfa>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <HAL_TIM_PWM_Start+0x140>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b06      	cmp	r3, #6
 80023be:	d010      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	e007      	b.n	80023e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800

080023f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e093      	b.n	8002534 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe faed 	bl	8000a00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800243c:	f023 0307 	bic.w	r3, r3, #7
 8002440:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f000 fa8d 	bl	800296c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4313      	orrs	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002498:	f023 030c 	bic.w	r3, r3, #12
 800249c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4313      	orrs	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	011a      	lsls	r2, r3, #4
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	4313      	orrs	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4313      	orrs	r3, r2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800254c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002554:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800255c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002564:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d110      	bne.n	800258e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002572:	7b7b      	ldrb	r3, [r7, #13]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e069      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800258c:	e031      	b.n	80025f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d110      	bne.n	80025b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800259a:	7b3b      	ldrb	r3, [r7, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e055      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025b4:	e01d      	b.n	80025f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d108      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025c8:	7b3b      	ldrb	r3, [r7, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03e      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_TIM_Encoder_Start+0xc4>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d008      	beq.n	8002610 <HAL_TIM_Encoder_Start+0xd4>
 80025fe:	e00f      	b.n	8002620 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fc3b 	bl	8002e84 <TIM_CCxChannelCmd>
      break;
 800260e:	e016      	b.n	800263e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	2104      	movs	r1, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fc33 	bl	8002e84 <TIM_CCxChannelCmd>
      break;
 800261e:	e00e      	b.n	800263e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fc2b 	bl	8002e84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	2104      	movs	r1, #4
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fc24 	bl	8002e84 <TIM_CCxChannelCmd>
      break;
 800263c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e0ae      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b0c      	cmp	r3, #12
 8002682:	f200 809f 	bhi.w	80027c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080027c5 	.word	0x080027c5
 8002694:	080027c5 	.word	0x080027c5
 8002698:	080027c5 	.word	0x080027c5
 800269c:	08002701 	.word	0x08002701
 80026a0:	080027c5 	.word	0x080027c5
 80026a4:	080027c5 	.word	0x080027c5
 80026a8:	080027c5 	.word	0x080027c5
 80026ac:	08002743 	.word	0x08002743
 80026b0:	080027c5 	.word	0x080027c5
 80026b4:	080027c5 	.word	0x080027c5
 80026b8:	080027c5 	.word	0x080027c5
 80026bc:	08002783 	.word	0x08002783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f9be 	bl	8002a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0208 	orr.w	r2, r2, #8
 80026da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	619a      	str	r2, [r3, #24]
      break;
 80026fe:	e064      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa04 	bl	8002b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800271a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	021a      	lsls	r2, r3, #8
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	619a      	str	r2, [r3, #24]
      break;
 8002740:	e043      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa4d 	bl	8002be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0208 	orr.w	r2, r2, #8
 800275c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0204 	bic.w	r2, r2, #4
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
      break;
 8002780:	e023      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fa97 	bl	8002cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800279c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	021a      	lsls	r2, r3, #8
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	61da      	str	r2, [r3, #28]
      break;
 80027c2:	e002      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75fb      	strb	r3, [r7, #23]
      break;
 80027c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIM_ConfigClockSource+0x1c>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0b4      	b.n	8002962 <HAL_TIM_ConfigClockSource+0x186>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800281e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002830:	d03e      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002836:	f200 8087 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800283e:	f000 8086 	beq.w	800294e <HAL_TIM_ConfigClockSource+0x172>
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002846:	d87f      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b70      	cmp	r3, #112	@ 0x70
 800284a:	d01a      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0xa6>
 800284c:	2b70      	cmp	r3, #112	@ 0x70
 800284e:	d87b      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b60      	cmp	r3, #96	@ 0x60
 8002852:	d050      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002854:	2b60      	cmp	r3, #96	@ 0x60
 8002856:	d877      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b50      	cmp	r3, #80	@ 0x50
 800285a:	d03c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0xfa>
 800285c:	2b50      	cmp	r3, #80	@ 0x50
 800285e:	d873      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d058      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x13a>
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	d86f      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b30      	cmp	r3, #48	@ 0x30
 800286a:	d064      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b30      	cmp	r3, #48	@ 0x30
 800286e:	d86b      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b20      	cmp	r3, #32
 8002872:	d060      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d867      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05c      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	2b10      	cmp	r3, #16
 800287e:	d05a      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x15a>
 8002880:	e062      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	f000 fad8 	bl	8002e46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
      break;
 80028ae:	e04f      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	f000 fac1 	bl	8002e46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028d2:	609a      	str	r2, [r3, #8]
      break;
 80028d4:	e03c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa38 	bl	8002d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2150      	movs	r1, #80	@ 0x50
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa8f 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e02c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002902:	461a      	mov	r2, r3
 8002904:	f000 fa56 	bl	8002db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2160      	movs	r1, #96	@ 0x60
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa7f 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 8002914:	e01c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	461a      	mov	r2, r3
 8002924:	f000 fa18 	bl	8002d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2140      	movs	r1, #64	@ 0x40
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa6f 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 8002934:	e00c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 fa66 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 8002946:	e003      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e000      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800294e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <TIM_Base_SetConfig+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <TIM_Base_SetConfig+0xd8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <TIM_Base_SetConfig+0xd4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <TIM_Base_SetConfig+0xd8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d103      	bne.n	8002a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
  }
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 0201 	bic.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0302 	bic.w	r3, r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <TIM_OC1_SetConfig+0xc8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10c      	bne.n	8002abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0308 	bic.w	r3, r3, #8
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <TIM_OC1_SetConfig+0xc8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d111      	bne.n	8002aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00

08002b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 0210 	bic.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0320 	bic.w	r3, r3, #32
 8002b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <TIM_OC2_SetConfig+0xd0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10d      	bne.n	8002b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <TIM_OC2_SetConfig+0xd0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d113      	bne.n	8002bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00

08002be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <TIM_OC3_SetConfig+0xd0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <TIM_OC3_SetConfig+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d113      	bne.n	8002c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012c00 	.word	0x40012c00

08002cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	031b      	lsls	r3, r3, #12
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0f      	ldr	r2, [pc, #60]	@ (8002d54 <TIM_OC4_SetConfig+0x98>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d109      	bne.n	8002d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00

08002d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0201 	bic.w	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 030a 	bic.w	r3, r3, #10
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0210 	bic.w	r2, r3, #16
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	031b      	lsls	r3, r3, #12
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f043 0307 	orr.w	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	021a      	lsls	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2201      	movs	r2, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e046      	b.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f30:	d009      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800

08002f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e03d      	b.n	8003020 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e042      	b.n	80030c2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fd ffd1 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2224      	movs	r2, #36	@ 0x24
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800306c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc80 	bl	8003974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003082:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003092:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0ba      	sub	sp, #232	@ 0xe8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800310a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_UART_IRQHandler+0x66>
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fb63 	bl	80037f6 <UART_Receive_IT>
      return;
 8003130:	e25b      	b.n	80035ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80de 	beq.w	80032f8 <HAL_UART_IRQHandler+0x22c>
 800313c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80d1 	beq.w	80032f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_UART_IRQHandler+0xae>
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800317a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_UART_IRQHandler+0xd2>
 8003186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0xf6>
 80031aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0204 	orr.w	r2, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <HAL_UART_IRQHandler+0x126>
 80031ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 81f2 	beq.w	80035e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_UART_IRQHandler+0x14e>
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 faee 	bl	80037f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_UART_IRQHandler+0x17a>
 800323e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d04f      	beq.n	80032e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9f8 	bl	800363c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d041      	beq.n	80032de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3314      	adds	r3, #20
 8003260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003286:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800328a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800329e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1d9      	bne.n	800325a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d013      	beq.n	80032d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	4a7e      	ldr	r2, [pc, #504]	@ (80034ac <HAL_UART_IRQHandler+0x3e0>)
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe f8e4 	bl	8001488 <HAL_DMA_Abort_IT>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032d0:	4610      	mov	r0, r2
 80032d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e00e      	b.n	80032f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f99c 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e00a      	b.n	80032f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f998 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	e006      	b.n	80032f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f994 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032f2:	e175      	b.n	80035e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	bf00      	nop
    return;
 80032f6:	e173      	b.n	80035e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 814f 	bne.w	80035a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8148 	beq.w	80035a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8141 	beq.w	80035a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80b6 	beq.w	80034b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8145 	beq.w	80035e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800335e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003362:	429a      	cmp	r2, r3
 8003364:	f080 813e 	bcs.w	80035e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800336e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b20      	cmp	r3, #32
 8003378:	f000 8088 	beq.w	800348c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003396:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1d9      	bne.n	800337c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e1      	bne.n	80033c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800341a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003428:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800342a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800342e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e3      	bne.n	8003404 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	f023 0310 	bic.w	r3, r3, #16
 8003460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800346e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003470:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800347c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e3      	bne.n	800344a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd ffc3 	bl	8001412 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800349a:	b29b      	uxth	r3, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8bf 	bl	8003626 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a8:	e09c      	b.n	80035e4 <HAL_UART_IRQHandler+0x518>
 80034aa:	bf00      	nop
 80034ac:	08003701 	.word	0x08003701
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 808e 	beq.w	80035e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8089 	beq.w	80035e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80034fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	623b      	str	r3, [r7, #32]
   return(result);
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003532:	633a      	str	r2, [r7, #48]	@ 0x30
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e3      	bne.n	800350e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	60fb      	str	r3, [r7, #12]
   return(result);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0310 	bic.w	r3, r3, #16
 800356a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003578:	61fa      	str	r2, [r7, #28]
 800357a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	617b      	str	r3, [r7, #20]
   return(result);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e3      	bne.n	8003554 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f844 	bl	8003626 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359e:	e023      	b.n	80035e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_UART_IRQHandler+0x4f4>
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8b5 	bl	8003728 <UART_Transmit_IT>
    return;
 80035be:	e014      	b.n	80035ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_IRQHandler+0x51e>
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8f4 	bl	80037c6 <UART_EndTransmit_IT>
    return;
 80035de:	e004      	b.n	80035ea <HAL_UART_IRQHandler+0x51e>
    return;
 80035e0:	bf00      	nop
 80035e2:	e002      	b.n	80035ea <HAL_UART_IRQHandler+0x51e>
      return;
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <HAL_UART_IRQHandler+0x51e>
      return;
 80035e8:	bf00      	nop
  }
}
 80035ea:	37e8      	adds	r7, #232	@ 0xe8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b095      	sub	sp, #84	@ 0x54
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003664:	643a      	str	r2, [r7, #64]	@ 0x40
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800366a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	61fb      	str	r3, [r7, #28]
   return(result);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d119      	bne.n	80036e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d4:	61ba      	str	r2, [r7, #24]
 80036d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	613b      	str	r3, [r7, #16]
   return(result);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036f6:	bf00      	nop
 80036f8:	3754      	adds	r7, #84	@ 0x54
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ff7a 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b21      	cmp	r3, #33	@ 0x21
 800373a:	d13e      	bne.n	80037ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d114      	bne.n	8003770 <UART_Transmit_IT+0x48>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e008      	b.n	8003782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6211      	str	r1, [r2, #32]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4619      	mov	r1, r3
 8003790:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff02 	bl	80035f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08c      	sub	sp, #48	@ 0x30
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b22      	cmp	r3, #34	@ 0x22
 8003808:	f040 80ae 	bne.w	8003968 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d117      	bne.n	8003846 <UART_Receive_IT+0x50>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	b29a      	uxth	r2, r3
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28
 8003844:	e026      	b.n	8003894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003858:	d007      	beq.n	800386a <UART_Receive_IT+0x74>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <UART_Receive_IT+0x82>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e008      	b.n	800388a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003884:	b2da      	uxtb	r2, r3
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4619      	mov	r1, r3
 80038a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d15d      	bne.n	8003964 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0220 	bic.w	r2, r2, #32
 80038b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d135      	bne.n	800395a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	623a      	str	r2, [r7, #32]
 8003916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	61bb      	str	r3, [r7, #24]
   return(result);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d10a      	bne.n	800394c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fe67 	bl	8003626 <HAL_UARTEx_RxEventCallback>
 8003958:	e002      	b.n	8003960 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe51 	bl	8003602 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e002      	b.n	800396a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3730      	adds	r7, #48	@ 0x30
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039ae:	f023 030c 	bic.w	r3, r3, #12
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <UART_SetConfig+0x114>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe fb46 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	e002      	b.n	80039ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7fe fb2e 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 80039e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <UART_SetConfig+0x118>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	0119      	lsls	r1, r3, #4
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <UART_SetConfig+0x118>)
 8003a22:	fba3 0302 	umull	r0, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2064      	movs	r0, #100	@ 0x64
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	3332      	adds	r3, #50	@ 0x32
 8003a34:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a40:	4419      	add	r1, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <UART_SetConfig+0x118>)
 8003a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2064      	movs	r0, #100	@ 0x64
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	@ 0x32
 8003a6c:	4a07      	ldr	r2, [pc, #28]	@ (8003a8c <UART_SetConfig+0x118>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40013800 	.word	0x40013800
 8003a8c:	51eb851f 	.word	0x51eb851f

08003a90 <memset>:
 8003a90:	4603      	mov	r3, r0
 8003a92:	4402      	add	r2, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	4d0c      	ldr	r5, [pc, #48]	@ (8003ad8 <__libc_init_array+0x38>)
 8003aa6:	4c0d      	ldr	r4, [pc, #52]	@ (8003adc <__libc_init_array+0x3c>)
 8003aa8:	1b64      	subs	r4, r4, r5
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	f000 f81a 	bl	8003ae8 <_init>
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	4d0a      	ldr	r5, [pc, #40]	@ (8003ae0 <__libc_init_array+0x40>)
 8003ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae4 <__libc_init_array+0x44>)
 8003aba:	1b64      	subs	r4, r4, r5
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003b2c 	.word	0x08003b2c
 8003adc:	08003b2c 	.word	0x08003b2c
 8003ae0:	08003b2c 	.word	0x08003b2c
 8003ae4:	08003b30 	.word	0x08003b30

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

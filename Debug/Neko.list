
Neko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bfc  08003bfc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bfc  08003bfc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c00  08003c00  00004c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c04  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003c10  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003c10  00005198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d00c  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002281  00000000  00000000  00012041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000142c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a35  00000000  00000000  00014fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017653  00000000  00000000  00015a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb68  00000000  00000000  0002d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ccc  00000000  00000000  0003cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c38a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  000c38e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c6e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bb8 	.word	0x08003bb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003bb8 	.word	0x08003bb8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1a      	ldr	r3, [pc, #104]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b17      	ldr	r3, [pc, #92]	@ (80001cc <MX_GPIO_Init+0x80>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b11      	ldr	r3, [pc, #68]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <MX_GPIO_Init+0x80>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin sensor3_Pin sensor4_Pin
                           sensor5_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin|sensor3_Pin|sensor4_Pin
 80001a8:	f44f 734e 	mov.w	r3, #824	@ 0x338
 80001ac:	613b      	str	r3, [r7, #16]
                          |sensor5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4619      	mov	r1, r3
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <MX_GPIO_Init+0x84>)
 80001be:	f001 f91d 	bl	80013fc <HAL_GPIO_Init>

}
 80001c2:	bf00      	nop
 80001c4:	3720      	adds	r7, #32
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <HAL_TIM_PeriodElapsedCallback>:
    else if(pid->output < -pid->maxOutput) pid->output = -pid->maxOutput;
}

PID mypid = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d105      	bne.n	80001f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		//meow = 1;
		A_Backward(65);
 80001e4:	2041      	movs	r0, #65	@ 0x41
 80001e6:	f000 f909 	bl	80003fc <A_Backward>
		B_Backward(55);
 80001ea:	2037      	movs	r0, #55	@ 0x37
 80001ec:	f000 f978 	bl	80004e0 <B_Backward>
	}
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	200000bc 	.word	0x200000bc

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 feb6 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f86e 	bl	80002e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000208:	213c      	movs	r1, #60	@ 0x3c
 800020a:	4831      	ldr	r0, [pc, #196]	@ (80002d0 <main+0xd4>)
 800020c:	f002 f8d8 	bl	80023c0 <HAL_TIM_Encoder_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f7ff ff9c 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000214:	f000 fae4 	bl	80007e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000218:	f000 fa1e 	bl	8000658 <MX_TIM1_Init>
  MX_TIM4_Init();
 800021c:	f000 fbb8 	bl	8000990 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000220:	f000 fe02 	bl	8000e28 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000224:	f000 fb66 	bl	80008f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 8000228:	2100      	movs	r1, #0
 800022a:	482a      	ldr	r0, [pc, #168]	@ (80002d4 <main+0xd8>)
 800022c:	f001 ff84 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8000230:	2104      	movs	r1, #4
 8000232:	4828      	ldr	r0, [pc, #160]	@ (80002d4 <main+0xd8>)
 8000234:	f001 ff80 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 8000238:	2108      	movs	r1, #8
 800023a:	4826      	ldr	r0, [pc, #152]	@ (80002d4 <main+0xd8>)
 800023c:	f001 ff7c 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1);
 8000240:	2100      	movs	r1, #0
 8000242:	4825      	ldr	r0, [pc, #148]	@ (80002d8 <main+0xdc>)
 8000244:	f001 ff78 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_2);
 8000248:	2104      	movs	r1, #4
 800024a:	4823      	ldr	r0, [pc, #140]	@ (80002d8 <main+0xdc>)
 800024c:	f001 ff74 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_3);
 8000250:	2108      	movs	r1, #8
 8000252:	4821      	ldr	r0, [pc, #132]	@ (80002d8 <main+0xdc>)
 8000254:	f001 ff70 	bl	8002138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 8000258:	210c      	movs	r1, #12
 800025a:	481f      	ldr	r0, [pc, #124]	@ (80002d8 <main+0xdc>)
 800025c:	f001 ff6c 	bl	8002138 <HAL_TIM_PWM_Start>

  // PID_Init(&mypid, 0, 0, 0, 800, 1000);

  HAL_TIM_Base_Start(&htim2);
 8000260:	481c      	ldr	r0, [pc, #112]	@ (80002d4 <main+0xd8>)
 8000262:	f001 fec7 	bl	8001ff4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000266:	481a      	ldr	r0, [pc, #104]	@ (80002d0 <main+0xd4>)
 8000268:	f001 fec4 	bl	8001ff4 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 145);		// 舵机A驱动代码，舵机占空比代数取值为40~250
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <main+0xd8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2291      	movs	r2, #145	@ 0x91
 8000272:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 40);		// 舵机B驱动代码
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <main+0xd8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2228      	movs	r2, #40	@ 0x28
 800027a:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 40);		// 舵机C驱动代码
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <main+0xd8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2228      	movs	r2, #40	@ 0x28
 8000282:	63da      	str	r2, [r3, #60]	@ 0x3c

  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  // HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
  TIM3->CCR1=TIM3->CCR4=80;
 8000284:	4a15      	ldr	r2, [pc, #84]	@ (80002dc <main+0xe0>)
 8000286:	2350      	movs	r3, #80	@ 0x50
 8000288:	6413      	str	r3, [r2, #64]	@ 0x40
 800028a:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <main+0xe0>)
 800028c:	6353      	str	r3, [r2, #52]	@ 0x34
					A_Forward(68);
					B_Forward(50);
			  }
			meow = 0;
		}*/
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==4)){
 800028e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000292:	4813      	ldr	r0, [pc, #76]	@ (80002e0 <main+0xe4>)
 8000294:	f001 fa36 	bl	8001704 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b01      	cmp	r3, #1
 800029c:	d015      	beq.n	80002ca <main+0xce>
 800029e:	2108      	movs	r1, #8
 80002a0:	480f      	ldr	r0, [pc, #60]	@ (80002e0 <main+0xe4>)
 80002a2:	f001 fa2f 	bl	8001704 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00e      	beq.n	80002ca <main+0xce>
 80002ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b0:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <main+0xe4>)
 80002b2:	f001 fa27 	bl	8001704 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d006      	beq.n	80002ca <main+0xce>
 80002bc:	2108      	movs	r1, #8
 80002be:	4808      	ldr	r0, [pc, #32]	@ (80002e0 <main+0xe4>)
 80002c0:	f001 fa20 	bl	8001704 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d1e1      	bne.n	800028e <main+0x92>
		  Tracking();
 80002ca:	f000 fc91 	bl	8000bf0 <Tracking>
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==4)){
 80002ce:	e7de      	b.n	800028e <main+0x92>
 80002d0:	20000104 	.word	0x20000104
 80002d4:	20000074 	.word	0x20000074
 80002d8:	2000002c 	.word	0x2000002c
 80002dc:	40000400 	.word	0x40000400
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	@ 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	@ 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fc34 	bl	8003b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000306:	2301      	movs	r3, #1
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000320:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000322:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fa01 	bl	8001734 <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000338:	f000 f819 	bl	800036e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f001 fc6e 	bl	8001c38 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000362:	f000 f804 	bl	800036e <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	@ 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000376:	bf00      	nop
 8000378:	e7fd      	b.n	8000376 <Error_Handler+0x8>
	...

0800037c <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 8000386:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <__SetIn1PWM+0x1c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	2000002c 	.word	0x2000002c

0800039c <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 80003a6:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <__SetIn2PWM+0x1c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	2000002c 	.word	0x2000002c

080003bc <__SetIn3PWM>:
/**
 * @brief 设置IN3引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn3PWM(uint8_t duty)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN3_TIM, IN3_CH, duty);
 80003c6:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <__SetIn3PWM+0x1c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	2000002c 	.word	0x2000002c

080003dc <__SetIn4PWM>:
/**
 * @brief 设置IN4引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn4PWM(uint8_t duty)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN4_TIM, IN4_CH, duty);
 80003e6:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <__SetIn4PWM+0x1c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	2000002c 	.word	0x2000002c

080003fc <A_Backward>:
/**
 * @brief 控制电机A前进
 * @param speed 速度值（0-100）
 */
void A_Backward(uint8_t speed)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b64      	cmp	r3, #100	@ 0x64
 800040a:	d901      	bls.n	8000410 <A_Backward+0x14>
        speed = MAX_SPEED;
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <A_Backward+0x48>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d107      	bne.n	8000428 <A_Backward+0x2c>
        __SetIn1PWM(speed);
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffae 	bl	800037c <__SetIn1PWM>
        __SetIn2PWM(0);
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ffbb 	bl	800039c <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 8000426:	e009      	b.n	800043c <A_Backward+0x40>
        __SetIn1PWM(MAX_SPEED);
 8000428:	2064      	movs	r0, #100	@ 0x64
 800042a:	f7ff ffa7 	bl	800037c <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffb0 	bl	800039c <__SetIn2PWM>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028

08000448 <B_Forward>:
/**
 * @brief 控制电机B前进
 * @param speed 速度值（0-100）
 */
void B_Forward(uint8_t speed)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b64      	cmp	r3, #100	@ 0x64
 8000456:	d901      	bls.n	800045c <B_Forward+0x14>
        speed = MAX_SPEED;
 8000458:	2364      	movs	r3, #100	@ 0x64
 800045a:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <B_Forward+0x48>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d107      	bne.n	8000474 <B_Forward+0x2c>
        __SetIn3PWM(speed);
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffa8 	bl	80003bc <__SetIn3PWM>
        __SetIn4PWM(0);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff ffb5 	bl	80003dc <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED);
        __SetIn4PWM(MAX_SPEED - speed);
    }
}
 8000472:	e009      	b.n	8000488 <B_Forward+0x40>
        __SetIn3PWM(MAX_SPEED);
 8000474:	2064      	movs	r0, #100	@ 0x64
 8000476:	f7ff ffa1 	bl	80003bc <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED - speed);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffaa 	bl	80003dc <__SetIn4PWM>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028

08000494 <A_Forward>:
/**
 * @brief 控制电机A后退
 * @param speed 速度值（0-100）
 */
void A_Forward(uint8_t speed)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b64      	cmp	r3, #100	@ 0x64
 80004a2:	d901      	bls.n	80004a8 <A_Forward+0x14>
        speed = MAX_SPEED;
 80004a4:	2364      	movs	r3, #100	@ 0x64
 80004a6:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <A_Forward+0x48>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d107      	bne.n	80004c0 <A_Forward+0x2c>
        __SetIn1PWM(0);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff63 	bl	800037c <__SetIn1PWM>
        __SetIn2PWM(speed);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff6f 	bl	800039c <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 80004be:	e009      	b.n	80004d4 <A_Forward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff57 	bl	800037c <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 80004ce:	2064      	movs	r0, #100	@ 0x64
 80004d0:	f7ff ff64 	bl	800039c <__SetIn2PWM>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000028 	.word	0x20000028

080004e0 <B_Backward>:
/**
 * @brief 控制电机B后退
 * @param speed 速度值（0-100）
 */
void B_Backward(uint8_t speed)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b64      	cmp	r3, #100	@ 0x64
 80004ee:	d901      	bls.n	80004f4 <B_Backward+0x14>
        speed = MAX_SPEED;
 80004f0:	2364      	movs	r3, #100	@ 0x64
 80004f2:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <B_Backward+0x48>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d107      	bne.n	800050c <B_Backward+0x2c>
        __SetIn3PWM(0);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ff5d 	bl	80003bc <__SetIn3PWM>
        __SetIn4PWM(speed);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff69 	bl	80003dc <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED - speed);
        __SetIn4PWM(MAX_SPEED);
    }
}
 800050a:	e009      	b.n	8000520 <B_Backward+0x40>
        __SetIn3PWM(MAX_SPEED - speed);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000512:	b2db      	uxtb	r3, r3
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff51 	bl	80003bc <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED);
 800051a:	2064      	movs	r0, #100	@ 0x64
 800051c:	f7ff ff5e 	bl	80003dc <__SetIn4PWM>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000028 	.word	0x20000028

0800052c <RIGHT>:

/**
 * @brief 右转
 */
void RIGHT(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	A_Forward(55);
 8000530:	2037      	movs	r0, #55	@ 0x37
 8000532:	f7ff ffaf 	bl	8000494 <A_Forward>
	B_Backward(30);
 8000536:	201e      	movs	r0, #30
 8000538:	f7ff ffd2 	bl	80004e0 <B_Backward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <RIGHT_IMM>:

/**
 * @brief 右急转
 */
void RIGHT_IMM(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	B_Forward(65);
 8000544:	2041      	movs	r0, #65	@ 0x41
 8000546:	f7ff ff7f 	bl	8000448 <B_Forward>
	A_Backward(30);
 800054a:	201e      	movs	r0, #30
 800054c:	f7ff ff56 	bl	80003fc <A_Backward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <LEFT>:

/**
 * @brief 左转
 */
void LEFT(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	A_Backward(30);
 8000558:	201e      	movs	r0, #30
 800055a:	f7ff ff4f 	bl	80003fc <A_Backward>
	B_Forward(55);
 800055e:	2037      	movs	r0, #55	@ 0x37
 8000560:	f7ff ff72 	bl	8000448 <B_Forward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 52);
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a14      	ldr	r2, [pc, #80]	@ (80005c4 <HAL_MspInit+0x5c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_MspInit+0x5c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_MspInit+0x5c>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <HAL_MspInit+0x5c>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <HAL_MspInit+0x60>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <HAL_MspInit+0x60>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010000 	.word	0x40010000

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 fcee 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <TIM3_IRQHandler+0x10>)
 800062a:	f001 ff57 	bl	80024dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000bc 	.word	0x200000bc

08000638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <USART3_IRQHandler+0x10>)
 800063e:	f002 fdad 	bl	800319c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000014c 	.word	0x2000014c

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	@ 0x58
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2220      	movs	r2, #32
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fa65 	bl	8003b60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000696:	4b50      	ldr	r3, [pc, #320]	@ (80007d8 <MX_TIM1_Init+0x180>)
 8000698:	4a50      	ldr	r2, [pc, #320]	@ (80007dc <MX_TIM1_Init+0x184>)
 800069a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800069c:	4b4e      	ldr	r3, [pc, #312]	@ (80007d8 <MX_TIM1_Init+0x180>)
 800069e:	2247      	movs	r2, #71	@ 0x47
 80006a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006a8:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006aa:	2263      	movs	r2, #99	@ 0x63
 80006ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b4a      	ldr	r3, [pc, #296]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b4:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b47      	ldr	r3, [pc, #284]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c0:	4845      	ldr	r0, [pc, #276]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006c2:	f001 fc47 	bl	8001f54 <HAL_TIM_Base_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006cc:	f7ff fe4f 	bl	800036e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006da:	4619      	mov	r1, r3
 80006dc:	483e      	ldr	r0, [pc, #248]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006de:	f002 f8af 	bl	8002840 <HAL_TIM_ConfigClockSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006e8:	f7ff fe41 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ec:	483a      	ldr	r0, [pc, #232]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80006ee:	f001 fccb 	bl	8002088 <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006f8:	f7ff fe39 	bl	800036e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000704:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000708:	4619      	mov	r1, r3
 800070a:	4833      	ldr	r0, [pc, #204]	@ (80007d8 <MX_TIM1_Init+0x180>)
 800070c:	f002 fc34 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000716:	f7ff fe2a 	bl	800036e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	@ 0x60
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4826      	ldr	r0, [pc, #152]	@ (80007d8 <MX_TIM1_Init+0x180>)
 8000740:	f001 ffbc 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800074a:	f7ff fe10 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	2204      	movs	r2, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <MX_TIM1_Init+0x180>)
 8000758:	f001 ffb0 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000762:	f7ff fe04 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	2208      	movs	r2, #8
 800076c:	4619      	mov	r1, r3
 800076e:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <MX_TIM1_Init+0x180>)
 8000770:	f001 ffa4 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800077a:	f7ff fdf8 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	220c      	movs	r2, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4814      	ldr	r0, [pc, #80]	@ (80007d8 <MX_TIM1_Init+0x180>)
 8000788:	f001 ff98 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000792:	f7ff fdec 	bl	800036e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80007ba:	f002 fc3b 	bl	8003034 <HAL_TIMEx_ConfigBreakDeadTime>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80007c4:	f7ff fdd3 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_TIM1_Init+0x180>)
 80007ca:	f000 f9bf 	bl	8000b4c <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	@ 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000002c 	.word	0x2000002c
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	@ 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000810:	4b37      	ldr	r3, [pc, #220]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000818:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <MX_TIM2_Init+0x110>)
 800081a:	2247      	movs	r2, #71	@ 0x47
 800081c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b34      	ldr	r3, [pc, #208]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000824:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000826:	2263      	movs	r2, #99	@ 0x63
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <MX_TIM2_Init+0x110>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000836:	482e      	ldr	r0, [pc, #184]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000838:	f001 fb8c 	bl	8001f54 <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000842:	f7ff fd94 	bl	800036e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000850:	4619      	mov	r1, r3
 8000852:	4827      	ldr	r0, [pc, #156]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000854:	f001 fff4 	bl	8002840 <HAL_TIM_ConfigClockSource>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800085e:	f7ff fd86 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000862:	4823      	ldr	r0, [pc, #140]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000864:	f001 fc10 	bl	8002088 <HAL_TIM_PWM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800086e:	f7ff fd7e 	bl	800036e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	4619      	mov	r1, r3
 8000880:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <MX_TIM2_Init+0x110>)
 8000882:	f002 fb79 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800088c:	f7ff fd6f 	bl	800036e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_TIM2_Init+0x110>)
 80008a8:	f001 ff08 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80008b2:	f7ff fd5c 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2204      	movs	r2, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MX_TIM2_Init+0x110>)
 80008be:	f001 fefd 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80008c8:	f7ff fd51 	bl	800036e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2208      	movs	r2, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <MX_TIM2_Init+0x110>)
 80008d4:	f001 fef2 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80008de:	f7ff fd46 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e2:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <MX_TIM2_Init+0x110>)
 80008e4:	f000 f932 	bl	8000b4c <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3738      	adds	r7, #56	@ 0x38
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000074 	.word	0x20000074

080008f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000910:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000912:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <MX_TIM3_Init+0x98>)
 8000914:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000918:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800091c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000926:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800092a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_TIM3_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000938:	4813      	ldr	r0, [pc, #76]	@ (8000988 <MX_TIM3_Init+0x94>)
 800093a:	f001 fb0b 	bl	8001f54 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000944:	f7ff fd13 	bl	800036e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000956:	f001 ff73 	bl	8002840 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000960:	f7ff fd05 	bl	800036e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_TIM3_Init+0x94>)
 8000972:	f002 fb01 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800097c:	f7ff fcf7 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000bc 	.word	0x200000bc
 800098c:	40000400 	.word	0x40000400

08000990 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2224      	movs	r2, #36	@ 0x24
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f8de 	bl	8003b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ac:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009ae:	4a21      	ldr	r2, [pc, #132]	@ (8000a34 <MX_TIM4_Init+0xa4>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009da:	2301      	movs	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80009e2:	230f      	movs	r3, #15
 80009e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ea:	2301      	movs	r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80009f2:	230f      	movs	r3, #15
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 80009fe:	f001 fc3d 	bl	800227c <HAL_TIM_Encoder_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f7ff fcb1 	bl	800036e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_TIM4_Init+0xa0>)
 8000a1a:	f002 faad 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000a24:	f7ff fca3 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3730      	adds	r7, #48	@ 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000104 	.word	0x20000104
 8000a34:	40000800 	.word	0x40000800

08000a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10c      	bne.n	8000a64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a62:	e02a      	b.n	8000aba <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6c:	d10c      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
}
 8000a86:	e018      	b.n	8000aba <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <HAL_TIM_Base_MspInit+0x94>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d113      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x90>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	201d      	movs	r0, #29
 8000ab0:	f000 fbbb 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ab4:	201d      	movs	r0, #29
 8000ab6:	f000 fbd4 	bl	8001262 <HAL_NVIC_EnableIRQ>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40000400 	.word	0x40000400

08000ad0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <HAL_TIM_Encoder_MspInit+0x70>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d123      	bne.n	8000b38 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_TIM_Encoder_MspInit+0x74>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b20:	23c0      	movs	r3, #192	@ 0xc0
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_TIM_Encoder_MspInit+0x78>)
 8000b34:	f000 fc62 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40000800 	.word	0x40000800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1f      	ldr	r2, [pc, #124]	@ (8000be4 <HAL_TIM_MspPostInit+0x98>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d119      	bne.n	8000ba0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000b84:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	4814      	ldr	r0, [pc, #80]	@ (8000bec <HAL_TIM_MspPostInit+0xa0>)
 8000b9a:	f000 fc2f 	bl	80013fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b9e:	e01c      	b.n	8000bda <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ba8:	d117      	bne.n	8000bda <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_TIM_MspPostInit+0x9c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_TIM_MspPostInit+0xa0>)
 8000bd6:	f000 fc11 	bl	80013fc <HAL_GPIO_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <Tracking>:
#define DELAY_NO 10
#define DELAY_SP 5


void Tracking(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	   // 右转
		if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf8:	488a      	ldr	r0, [pc, #552]	@ (8000e24 <Tracking+0x234>)
 8000bfa:	f000 fd83 	bl	8001704 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d13a      	bne.n	8000c7a <Tracking+0x8a>
 8000c04:	2108      	movs	r1, #8
 8000c06:	4887      	ldr	r0, [pc, #540]	@ (8000e24 <Tracking+0x234>)
 8000c08:	f000 fd7c 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d133      	bne.n	8000c7a <Tracking+0x8a>
			HAL_Delay(DELAY_NO);
 8000c12:	200a      	movs	r0, #10
 8000c14:	f000 fa0e 	bl	8001034 <HAL_Delay>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000c18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c1c:	4881      	ldr	r0, [pc, #516]	@ (8000e24 <Tracking+0x234>)
 8000c1e:	f000 fd71 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d121      	bne.n	8000c6c <Tracking+0x7c>
 8000c28:	2108      	movs	r1, #8
 8000c2a:	487e      	ldr	r0, [pc, #504]	@ (8000e24 <Tracking+0x234>)
 8000c2c:	f000 fd6a 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11a      	bne.n	8000c6c <Tracking+0x7c>
		while(1)
		{
			RIGHT();
 8000c36:	f7ff fc79 	bl	800052c <RIGHT>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3e:	4879      	ldr	r0, [pc, #484]	@ (8000e24 <Tracking+0x234>)
 8000c40:	f000 fd60 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f5      	bne.n	8000c36 <Tracking+0x46>
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4875      	ldr	r0, [pc, #468]	@ (8000e24 <Tracking+0x234>)
 8000c4e:	f000 fd59 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1ee      	bne.n	8000c36 <Tracking+0x46>
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4872      	ldr	r0, [pc, #456]	@ (8000e24 <Tracking+0x234>)
 8000c5c:	f000 fd52 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d000      	beq.n	8000c68 <Tracking+0x78>
			RIGHT();
 8000c66:	e7e6      	b.n	8000c36 <Tracking+0x46>
			break ;
 8000c68:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000c6a:	e048      	b.n	8000cfe <Tracking+0x10e>
			}
		}
			}else{
				A_Forward(A_SPEED);
 8000c6c:	2043      	movs	r0, #67	@ 0x43
 8000c6e:	f7ff fc11 	bl	8000494 <A_Forward>
				B_Forward(B_SPEED);
 8000c72:	2032      	movs	r0, #50	@ 0x32
 8000c74:	f7ff fbe8 	bl	8000448 <B_Forward>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000c78:	e041      	b.n	8000cfe <Tracking+0x10e>
			}
		}
		// 左转
		else  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000c7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7e:	4869      	ldr	r0, [pc, #420]	@ (8000e24 <Tracking+0x234>)
 8000c80:	f000 fd40 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d139      	bne.n	8000cfe <Tracking+0x10e>
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4865      	ldr	r0, [pc, #404]	@ (8000e24 <Tracking+0x234>)
 8000c8e:	f000 fd39 	bl	8001704 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d132      	bne.n	8000cfe <Tracking+0x10e>
			HAL_Delay(DELAY_NO);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f000 f9cb 	bl	8001034 <HAL_Delay>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000c9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca2:	4860      	ldr	r0, [pc, #384]	@ (8000e24 <Tracking+0x234>)
 8000ca4:	f000 fd2e 	bl	8001704 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d121      	bne.n	8000cf2 <Tracking+0x102>
 8000cae:	2108      	movs	r1, #8
 8000cb0:	485c      	ldr	r0, [pc, #368]	@ (8000e24 <Tracking+0x234>)
 8000cb2:	f000 fd27 	bl	8001704 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11a      	bne.n	8000cf2 <Tracking+0x102>
		while(1)
		{
			LEFT();
 8000cbc:	f7ff fc4a 	bl	8000554 <LEFT>
		 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000cc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cc4:	4857      	ldr	r0, [pc, #348]	@ (8000e24 <Tracking+0x234>)
 8000cc6:	f000 fd1d 	bl	8001704 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f5      	bne.n	8000cbc <Tracking+0xcc>
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4854      	ldr	r0, [pc, #336]	@ (8000e24 <Tracking+0x234>)
 8000cd4:	f000 fd16 	bl	8001704 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1ee      	bne.n	8000cbc <Tracking+0xcc>
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4850      	ldr	r0, [pc, #320]	@ (8000e24 <Tracking+0x234>)
 8000ce2:	f000 fd0f 	bl	8001704 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d000      	beq.n	8000cee <Tracking+0xfe>
			LEFT();
 8000cec:	e7e6      	b.n	8000cbc <Tracking+0xcc>
			break ;
 8000cee:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000cf0:	e005      	b.n	8000cfe <Tracking+0x10e>
		 	}
		}
			}else{
				A_Forward(A_SPEED);
 8000cf2:	2043      	movs	r0, #67	@ 0x43
 8000cf4:	f7ff fbce 	bl	8000494 <A_Forward>
				B_Forward(B_SPEED);
 8000cf8:	2032      	movs	r0, #50	@ 0x32
 8000cfa:	f7ff fba5 	bl	8000448 <B_Forward>
			}
		}
		// T字与十字路口
		if (((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1))){
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4848      	ldr	r0, [pc, #288]	@ (8000e24 <Tracking+0x234>)
 8000d02:	f000 fcff 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d006      	beq.n	8000d1a <Tracking+0x12a>
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4845      	ldr	r0, [pc, #276]	@ (8000e24 <Tracking+0x234>)
 8000d10:	f000 fcf8 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d156      	bne.n	8000dc8 <Tracking+0x1d8>
			HAL_Delay(DELAY_SP);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 f98a 	bl	8001034 <HAL_Delay>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000d20:	2108      	movs	r1, #8
 8000d22:	4840      	ldr	r0, [pc, #256]	@ (8000e24 <Tracking+0x234>)
 8000d24:	f000 fcee 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d12f      	bne.n	8000d8e <Tracking+0x19e>
 8000d2e:	2108      	movs	r1, #8
 8000d30:	483c      	ldr	r0, [pc, #240]	@ (8000e24 <Tracking+0x234>)
 8000d32:	f000 fce7 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d128      	bne.n	8000d8e <Tracking+0x19e>
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4839      	ldr	r0, [pc, #228]	@ (8000e24 <Tracking+0x234>)
 8000d40:	f000 fce0 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d121      	bne.n	8000d8e <Tracking+0x19e>
		while(1)
		{
			RIGHT_IMM();
 8000d4a:	f7ff fbf9 	bl	8000540 <RIGHT_IMM>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4834      	ldr	r0, [pc, #208]	@ (8000e24 <Tracking+0x234>)
 8000d52:	f000 fcd7 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f6      	bne.n	8000d4a <Tracking+0x15a>
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	4831      	ldr	r0, [pc, #196]	@ (8000e24 <Tracking+0x234>)
 8000d60:	f000 fcd0 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1ef      	bne.n	8000d4a <Tracking+0x15a>
 8000d6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d6e:	482d      	ldr	r0, [pc, #180]	@ (8000e24 <Tracking+0x234>)
 8000d70:	f000 fcc8 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1e7      	bne.n	8000d4a <Tracking+0x15a>
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4829      	ldr	r0, [pc, #164]	@ (8000e24 <Tracking+0x234>)
 8000d7e:	f000 fcc1 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d000      	beq.n	8000d8a <Tracking+0x19a>
			RIGHT_IMM();
 8000d88:	e7df      	b.n	8000d4a <Tracking+0x15a>
			break ;
 8000d8a:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000d8c:	e048      	b.n	8000e20 <Tracking+0x230>
			}
		}
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d92:	4824      	ldr	r0, [pc, #144]	@ (8000e24 <Tracking+0x234>)
 8000d94:	f000 fcb6 	bl	8001704 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10d      	bne.n	8000dba <Tracking+0x1ca>
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4820      	ldr	r0, [pc, #128]	@ (8000e24 <Tracking+0x234>)
 8000da2:	f000 fcaf 	bl	8001704 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <Tracking+0x1ca>
				A_Forward(A_SPEED);
 8000dac:	2043      	movs	r0, #67	@ 0x43
 8000dae:	f7ff fb71 	bl	8000494 <A_Forward>
				B_Forward(B_SPEED);
 8000db2:	2032      	movs	r0, #50	@ 0x32
 8000db4:	f7ff fb48 	bl	8000448 <B_Forward>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000db8:	e032      	b.n	8000e20 <Tracking+0x230>
			}else{
				A_Forward(A_SPEED);
 8000dba:	2043      	movs	r0, #67	@ 0x43
 8000dbc:	f7ff fb6a 	bl	8000494 <A_Forward>
				B_Forward(B_SPEED);
 8000dc0:	2032      	movs	r0, #50	@ 0x32
 8000dc2:	f7ff fb41 	bl	8000448 <B_Forward>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000dc6:	e02b      	b.n	8000e20 <Tracking+0x230>
			}
		}

		// 直行
		else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dcc:	4815      	ldr	r0, [pc, #84]	@ (8000e24 <Tracking+0x234>)
 8000dce:	f000 fc99 	bl	8001704 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d11c      	bne.n	8000e12 <Tracking+0x222>
 8000dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <Tracking+0x234>)
 8000dde:	f000 fc91 	bl	8001704 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d114      	bne.n	8000e12 <Tracking+0x222>
 8000de8:	2110      	movs	r1, #16
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <Tracking+0x234>)
 8000dec:	f000 fc8a 	bl	8001704 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d10d      	bne.n	8000e12 <Tracking+0x222>
 8000df6:	2108      	movs	r1, #8
 8000df8:	480a      	ldr	r0, [pc, #40]	@ (8000e24 <Tracking+0x234>)
 8000dfa:	f000 fc83 	bl	8001704 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <Tracking+0x222>
			A_Forward(A_SPEED);
 8000e04:	2043      	movs	r0, #67	@ 0x43
 8000e06:	f7ff fb45 	bl	8000494 <A_Forward>
			B_Forward(B_SPEED);
 8000e0a:	2032      	movs	r0, #50	@ 0x32
 8000e0c:	f7ff fb1c 	bl	8000448 <B_Forward>
 8000e10:	e006      	b.n	8000e20 <Tracking+0x230>
		}else{
			A_Forward(A_SPEED);
 8000e12:	2043      	movs	r0, #67	@ 0x43
 8000e14:	f7ff fb3e 	bl	8000494 <A_Forward>
			B_Forward(B_SPEED);
 8000e18:	2032      	movs	r0, #50	@ 0x32
 8000e1a:	f7ff fb15 	bl	8000448 <B_Forward>
		}
 }
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <MX_USART3_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART3_UART_Init+0x4c>)
 8000e60:	f002 f94b 	bl	80030fa <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f7ff fa80 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000014c 	.word	0x2000014c
 8000e78:	40004800 	.word	0x40004800

08000e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_UART_MspInit+0x9c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d139      	bne.n	8000f10 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_UART_MspInit+0xa0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480f      	ldr	r0, [pc, #60]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000ee2:	f000 fa8b 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <HAL_UART_MspInit+0xa4>)
 8000efc:	f000 fa7e 	bl	80013fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2027      	movs	r0, #39	@ 0x27
 8000f06:	f000 f990 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f0a:	2027      	movs	r0, #39	@ 0x27
 8000f0c:	f000 f9a9 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40004800 	.word	0x40004800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff fb92 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2a:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f40:	4c09      	ldr	r4, [pc, #36]	@ (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 fe0f 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f52:	f7ff f953 	bl	80001fc <main>
  bx lr
 8000f56:	4770      	bx	lr
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f60:	08003c04 	.word	0x08003c04
  ldr r2, =_sbss
 8000f64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f68:	20000198 	.word	0x20000198

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f947 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff faec 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f95f 	bl	800127e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f927 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	@ (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000008 	.word	0x20000008
 800101c:	20000194 	.word	0x20000194

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	@ (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000194 	.word	0x20000194

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4906      	ldr	r1, [pc, #24]	@ (8001114 <__NVIC_EnableIRQ+0x34>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	@ (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	@ (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff90 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff2d 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff42 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff35 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e020      	b.n	8001302 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 020e 	bic.w	r2, r2, #14
 80012ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d005      	beq.n	8001330 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2204      	movs	r2, #4
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e051      	b.n	80013d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020e 	bic.w	r2, r2, #14
 800133e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <HAL_DMA_Abort_IT+0xd4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d029      	beq.n	80013ae <HAL_DMA_Abort_IT+0xa2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <HAL_DMA_Abort_IT+0xd8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d022      	beq.n	80013aa <HAL_DMA_Abort_IT+0x9e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_DMA_Abort_IT+0xdc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01a      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x98>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_DMA_Abort_IT+0xe0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d012      	beq.n	800139e <HAL_DMA_Abort_IT+0x92>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <HAL_DMA_Abort_IT+0xe4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00a      	beq.n	8001398 <HAL_DMA_Abort_IT+0x8c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_DMA_Abort_IT+0xe8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d102      	bne.n	8001392 <HAL_DMA_Abort_IT+0x86>
 800138c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001390:	e00e      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 8001392:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001396:	e00b      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	e008      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	e005      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 80013a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a8:	e002      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 80013aa:	2310      	movs	r3, #16
 80013ac:	e000      	b.n	80013b0 <HAL_DMA_Abort_IT+0xa4>
 80013ae:	2301      	movs	r3, #1
 80013b0:	4a11      	ldr	r2, [pc, #68]	@ (80013f8 <HAL_DMA_Abort_IT+0xec>)
 80013b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
    } 
  }
  return status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020008 	.word	0x40020008
 80013e4:	4002001c 	.word	0x4002001c
 80013e8:	40020030 	.word	0x40020030
 80013ec:	40020044 	.word	0x40020044
 80013f0:	40020058 	.word	0x40020058
 80013f4:	4002006c 	.word	0x4002006c
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b08b      	sub	sp, #44	@ 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e169      	b.n	80016e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001410:	2201      	movs	r2, #1
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8158 	bne.w	80016de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a9a      	ldr	r2, [pc, #616]	@ (800169c <HAL_GPIO_Init+0x2a0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d05e      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001438:	4a98      	ldr	r2, [pc, #608]	@ (800169c <HAL_GPIO_Init+0x2a0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d875      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800143e:	4a98      	ldr	r2, [pc, #608]	@ (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d058      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001444:	4a96      	ldr	r2, [pc, #600]	@ (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d86f      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800144a:	4a96      	ldr	r2, [pc, #600]	@ (80016a4 <HAL_GPIO_Init+0x2a8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d052      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001450:	4a94      	ldr	r2, [pc, #592]	@ (80016a4 <HAL_GPIO_Init+0x2a8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d869      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001456:	4a94      	ldr	r2, [pc, #592]	@ (80016a8 <HAL_GPIO_Init+0x2ac>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04c      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 800145c:	4a92      	ldr	r2, [pc, #584]	@ (80016a8 <HAL_GPIO_Init+0x2ac>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d863      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001462:	4a92      	ldr	r2, [pc, #584]	@ (80016ac <HAL_GPIO_Init+0x2b0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d046      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001468:	4a90      	ldr	r2, [pc, #576]	@ (80016ac <HAL_GPIO_Init+0x2b0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d85d      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d82a      	bhi.n	80014c8 <HAL_GPIO_Init+0xcc>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d859      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001476:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <HAL_GPIO_Init+0x80>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014f7 	.word	0x080014f7
 8001480:	080014d1 	.word	0x080014d1
 8001484:	080014e3 	.word	0x080014e3
 8001488:	08001525 	.word	0x08001525
 800148c:	0800152b 	.word	0x0800152b
 8001490:	0800152b 	.word	0x0800152b
 8001494:	0800152b 	.word	0x0800152b
 8001498:	0800152b 	.word	0x0800152b
 800149c:	0800152b 	.word	0x0800152b
 80014a0:	0800152b 	.word	0x0800152b
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800152b 	.word	0x0800152b
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	0800152b 	.word	0x0800152b
 80014bc:	0800152b 	.word	0x0800152b
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	4a79      	ldr	r2, [pc, #484]	@ (80016b0 <HAL_GPIO_Init+0x2b4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ce:	e02c      	b.n	800152a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e029      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3304      	adds	r3, #4
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e024      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e01f      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	330c      	adds	r3, #12
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e01a      	b.n	800152c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fe:	2304      	movs	r3, #4
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e013      	b.n	800152c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	611a      	str	r2, [r3, #16]
          break;
 8001516:	e009      	b.n	800152c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	615a      	str	r2, [r3, #20]
          break;
 8001522:	e003      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x130>
          break;
 800152a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	@ 0xff
 8001530:	d801      	bhi.n	8001536 <HAL_GPIO_Init+0x13a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e001      	b.n	800153a <HAL_GPIO_Init+0x13e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d802      	bhi.n	8001548 <HAL_GPIO_Init+0x14c>
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x152>
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	3b08      	subs	r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	210f      	movs	r1, #15
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80b1 	beq.w	80016de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_GPIO_Init+0x2b8>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a4c      	ldr	r2, [pc, #304]	@ (80016b4 <HAL_GPIO_Init+0x2b8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_GPIO_Init+0x2b8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001594:	4a48      	ldr	r2, [pc, #288]	@ (80016b8 <HAL_GPIO_Init+0x2bc>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a40      	ldr	r2, [pc, #256]	@ (80016bc <HAL_GPIO_Init+0x2c0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d013      	beq.n	80015e8 <HAL_GPIO_Init+0x1ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3f      	ldr	r2, [pc, #252]	@ (80016c0 <HAL_GPIO_Init+0x2c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1e8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3e      	ldr	r2, [pc, #248]	@ (80016c4 <HAL_GPIO_Init+0x2c8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1e4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3d      	ldr	r2, [pc, #244]	@ (80016c8 <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1e0>
 80015d8:	2303      	movs	r3, #3
 80015da:	e006      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015dc:	2304      	movs	r3, #4
 80015de:	e004      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_GPIO_Init+0x1ee>
 80015e8:	2300      	movs	r3, #0
 80015ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fa:	492f      	ldr	r1, [pc, #188]	@ (80016b8 <HAL_GPIO_Init+0x2bc>)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	492c      	ldr	r1, [pc, #176]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001622:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4928      	ldr	r1, [pc, #160]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4922      	ldr	r1, [pc, #136]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	60cb      	str	r3, [r1, #12]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	491e      	ldr	r1, [pc, #120]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001654:	4013      	ands	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001664:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4918      	ldr	r1, [pc, #96]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4914      	ldr	r1, [pc, #80]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d021      	beq.n	80016d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	490e      	ldr	r1, [pc, #56]	@ (80016cc <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e021      	b.n	80016de <HAL_GPIO_Init+0x2e2>
 800169a:	bf00      	nop
 800169c:	10320000 	.word	0x10320000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10220000 	.word	0x10220000
 80016a8:	10210000 	.word	0x10210000
 80016ac:	10120000 	.word	0x10120000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_GPIO_Init+0x304>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4909      	ldr	r1, [pc, #36]	@ (8001700 <HAL_GPIO_Init+0x304>)
 80016da:	4013      	ands	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f ae8e 	bne.w	8001410 <HAL_GPIO_Init+0x14>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	372c      	adds	r7, #44	@ 0x2c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e272      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8087 	beq.w	8001862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001754:	4b92      	ldr	r3, [pc, #584]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4b8f      	ldr	r3, [pc, #572]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d112      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
 800176c:	4b8c      	ldr	r3, [pc, #560]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d06c      	beq.n	8001860 <HAL_RCC_OscConfig+0x12c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d168      	bne.n	8001860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e24c      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x76>
 800179c:	4b80      	ldr	r3, [pc, #512]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7f      	ldr	r2, [pc, #508]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e02e      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b7b      	ldr	r3, [pc, #492]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7a      	ldr	r2, [pc, #488]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b78      	ldr	r3, [pc, #480]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0xbc>
 80017d6:	4b72      	ldr	r3, [pc, #456]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a71      	ldr	r2, [pc, #452]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6f      	ldr	r3, [pc, #444]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xd4>
 80017f0:	4b6b      	ldr	r3, [pc, #428]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a67      	ldr	r2, [pc, #412]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fc02 	bl	8001020 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e200      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5d      	ldr	r3, [pc, #372]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xe4>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fbf2 	bl	8001020 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fbee 	bl	8001020 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1ec      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x10c>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186e:	4b4c      	ldr	r3, [pc, #304]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800187a:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
 8001886:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b43      	ldr	r3, [pc, #268]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c0      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4939      	ldr	r1, [pc, #228]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fba7 	bl	8001020 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fba3 	bl	8001020 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4927      	ldr	r1, [pc, #156]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_RCC_OscConfig+0x270>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fb86 	bl	8001020 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fb82 	bl	8001020 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e180      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03a      	beq.n	80019b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d019      	beq.n	800197e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_RCC_OscConfig+0x274>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fb66 	bl	8001020 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fb62 	bl	8001020 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e160      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 face 	bl	8001f18 <RCC_Delay>
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fb4c 	bl	8001020 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198a:	e00f      	b.n	80019ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fb48 	bl	8001020 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e146      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	42420000 	.word	0x42420000
 80019a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b92      	ldr	r3, [pc, #584]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e9      	bne.n	800198c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a6 	beq.w	8001b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b88      	ldr	r3, [pc, #544]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a87      	ldr	r2, [pc, #540]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b85      	ldr	r3, [pc, #532]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b82      	ldr	r3, [pc, #520]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b7f      	ldr	r3, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7e      	ldr	r2, [pc, #504]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb09 	bl	8001020 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb05 	bl	8001020 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	@ 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e103      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0x4c8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a38:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a69      	ldr	r2, [pc, #420]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b67      	ldr	r3, [pc, #412]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a66      	ldr	r2, [pc, #408]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x356>
 8001a70:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a60      	ldr	r2, [pc, #384]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e00b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	4b58      	ldr	r3, [pc, #352]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a57      	ldr	r2, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fab9 	bl	8001020 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fab5 	bl	8001020 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0b1      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ee      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x37e>
 8001ad4:	e014      	b.n	8001b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff faa3 	bl	8001020 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fa9f 	bl	8001020 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e09b      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8087 	beq.w	8001c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d061      	beq.n	8001bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d146      	bne.n	8001bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fa73 	bl	8001020 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fa6f 	bl	8001020 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e06d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4921      	ldr	r1, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a19      	ldr	r1, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	491b      	ldr	r1, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa43 	bl	8001020 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa3f 	bl	8001020 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
 8001bbc:	e035      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa2c 	bl	8001020 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fa28 	bl	8001020 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e026      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x498>
 8001bea:	e01e      	b.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e019      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x500>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d0      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4965      	ldr	r1, [pc, #404]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0b8      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c94:	4b59      	ldr	r3, [pc, #356]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a58      	ldr	r2, [pc, #352]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cac:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	494d      	ldr	r1, [pc, #308]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d040      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e07f      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e073      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4936      	ldr	r1, [pc, #216]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7ff f97a 	bl	8001020 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff f976 	bl	8001020 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e053      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d210      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4922      	ldr	r1, [pc, #136]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e032      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4916      	ldr	r1, [pc, #88]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	490e      	ldr	r1, [pc, #56]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc6:	f000 f821 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	490a      	ldr	r1, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	5ccb      	ldrb	r3, [r1, r3]
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1cc>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f8d8 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08003bd0 	.word	0x08003bd0
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x30>
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3a:	e027      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	e027      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0c9b      	lsrs	r3, r3, #18
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0c5b      	lsrs	r3, r3, #17
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	613b      	str	r3, [r7, #16]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	693b      	ldr	r3, [r7, #16]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	08003be8 	.word	0x08003be8
 8001eac:	08003bf8 	.word	0x08003bf8
 8001eb0:	003d0900 	.word	0x003d0900

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff2 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003be0 	.word	0x08003be0

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003be0 	.word	0x08003be0

08001f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <RCC_Delay+0x34>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <RCC_Delay+0x38>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f34:	bf00      	nop
  }
  while (Delay --);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f9      	bne.n	8001f34 <RCC_Delay+0x1c>
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	10624dd3 	.word	0x10624dd3

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e041      	b.n	8001fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fd5c 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 fd40 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d001      	beq.n	800200c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a18      	ldr	r2, [pc, #96]	@ (800207c <HAL_TIM_Base_Start+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00e      	beq.n	800203c <HAL_TIM_Base_Start+0x48>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002026:	d009      	beq.n	800203c <HAL_TIM_Base_Start+0x48>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <HAL_TIM_Base_Start+0x8c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_TIM_Base_Start+0x48>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <HAL_TIM_Base_Start+0x90>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d010      	beq.n	8002070 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205e:	e007      	b.n	8002070 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800

08002088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e041      	b.n	800211e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f839 	bl	8002126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fca6 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_TIM_PWM_Start+0x24>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e022      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d109      	bne.n	8002176 <HAL_TIM_PWM_Start+0x3e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e015      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d109      	bne.n	8002190 <HAL_TIM_PWM_Start+0x58>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e008      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e05e      	b.n	8002268 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Start+0x82>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021b8:	e013      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d104      	bne.n	80021ca <HAL_TIM_PWM_Start+0x92>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021c8:	e00b      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d104      	bne.n	80021da <HAL_TIM_PWM_Start+0xa2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021d8:	e003      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fea0 	bl	8002f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_TIM_PWM_Start+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d107      	bne.n	800220a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <HAL_TIM_PWM_Start+0x138>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_TIM_PWM_Start+0xfa>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d009      	beq.n	8002232 <HAL_TIM_PWM_Start+0xfa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <HAL_TIM_PWM_Start+0x13c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_TIM_PWM_Start+0xfa>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <HAL_TIM_PWM_Start+0x140>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d010      	beq.n	8002266 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e007      	b.n	8002266 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40000400 	.word	0x40000400
 8002278:	40000800 	.word	0x40000800

0800227c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e093      	b.n	80023b8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe fc13 	bl	8000ad0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c0:	f023 0307 	bic.w	r3, r3, #7
 80022c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f000 fba1 	bl	8002a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4313      	orrs	r3, r2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800231c:	f023 030c 	bic.w	r3, r3, #12
 8002320:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800232c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	4313      	orrs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	011a      	lsls	r2, r3, #4
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	031b      	lsls	r3, r3, #12
 800234c:	4313      	orrs	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800235a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4313      	orrs	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d110      	bne.n	8002412 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e069      	b.n	80024d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002410:	e031      	b.n	8002476 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d110      	bne.n	800243a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800241e:	7b3b      	ldrb	r3, [r7, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d001      	beq.n	8002428 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e055      	b.n	80024d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002438:	e01d      	b.n	8002476 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800244c:	7b3b      	ldrb	r3, [r7, #12]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e03e      	b.n	80024d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_TIM_Encoder_Start+0xc4>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d008      	beq.n	8002494 <HAL_TIM_Encoder_Start+0xd4>
 8002482:	e00f      	b.n	80024a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fd4f 	bl	8002f30 <TIM_CCxChannelCmd>
      break;
 8002492:	e016      	b.n	80024c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	2104      	movs	r1, #4
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fd47 	bl	8002f30 <TIM_CCxChannelCmd>
      break;
 80024a2:	e00e      	b.n	80024c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd3f 	bl	8002f30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	2104      	movs	r1, #4
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fd38 	bl	8002f30 <TIM_CCxChannelCmd>
      break;
 80024c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d020      	beq.n	8002540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0202 	mvn.w	r2, #2
 8002510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa5a 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa4d 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa5c 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d020      	beq.n	800258c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0204 	mvn.w	r2, #4
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa34 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa27 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa36 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d020      	beq.n	80025d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01b      	beq.n	80025d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0208 	mvn.w	r2, #8
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa0e 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa01 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa10 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d020      	beq.n	8002624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01b      	beq.n	8002624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0210 	mvn.w	r2, #16
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2208      	movs	r2, #8
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f9e8 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f9db 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9ea 	bl	80029f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0201 	mvn.w	r2, #1
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fd fdc6 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fd3e 	bl	80030e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9ba 	bl	8002a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0220 	mvn.w	r2, #32
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fd11 	bl	80030d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0ae      	b.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f200 809f 	bhi.w	8002828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026ea:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002725 	.word	0x08002725
 80026f4:	08002829 	.word	0x08002829
 80026f8:	08002829 	.word	0x08002829
 80026fc:	08002829 	.word	0x08002829
 8002700:	08002765 	.word	0x08002765
 8002704:	08002829 	.word	0x08002829
 8002708:	08002829 	.word	0x08002829
 800270c:	08002829 	.word	0x08002829
 8002710:	080027a7 	.word	0x080027a7
 8002714:	08002829 	.word	0x08002829
 8002718:	08002829 	.word	0x08002829
 800271c:	08002829 	.word	0x08002829
 8002720:	080027e7 	.word	0x080027e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f9e2 	bl	8002af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      break;
 8002762:	e064      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa28 	bl	8002bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      break;
 80027a4:	e043      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa71 	bl	8002c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0208 	orr.w	r2, r2, #8
 80027c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
      break;
 80027e4:	e023      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fabb 	bl	8002d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
      break;
 8002826:	e002      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
      break;
 800282c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIM_ConfigClockSource+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e0b4      	b.n	80029c6 <HAL_TIM_ConfigClockSource+0x186>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002894:	d03e      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0xd4>
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289a:	f200 8087 	bhi.w	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a2:	f000 8086 	beq.w	80029b2 <HAL_TIM_ConfigClockSource+0x172>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028aa:	d87f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b70      	cmp	r3, #112	@ 0x70
 80028ae:	d01a      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xa6>
 80028b0:	2b70      	cmp	r3, #112	@ 0x70
 80028b2:	d87b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b60      	cmp	r3, #96	@ 0x60
 80028b6:	d050      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x11a>
 80028b8:	2b60      	cmp	r3, #96	@ 0x60
 80028ba:	d877      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b50      	cmp	r3, #80	@ 0x50
 80028be:	d03c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xfa>
 80028c0:	2b50      	cmp	r3, #80	@ 0x50
 80028c2:	d873      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b40      	cmp	r3, #64	@ 0x40
 80028c6:	d058      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x13a>
 80028c8:	2b40      	cmp	r3, #64	@ 0x40
 80028ca:	d86f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b30      	cmp	r3, #48	@ 0x30
 80028ce:	d064      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b30      	cmp	r3, #48	@ 0x30
 80028d2:	d86b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d060      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d867      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05c      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d05a      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e4:	e062      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f6:	f000 fafc 	bl	8002ef2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]
      break;
 8002912:	e04f      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002924:	f000 fae5 	bl	8002ef2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002936:	609a      	str	r2, [r3, #8]
      break;
 8002938:	e03c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	461a      	mov	r2, r3
 8002948:	f000 fa5c 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2150      	movs	r1, #80	@ 0x50
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fab3 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002958:	e02c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002966:	461a      	mov	r2, r3
 8002968:	f000 fa7a 	bl	8002e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2160      	movs	r1, #96	@ 0x60
 8002972:	4618      	mov	r0, r3
 8002974:	f000 faa3 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002978:	e01c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	461a      	mov	r2, r3
 8002988:	f000 fa3c 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2140      	movs	r1, #64	@ 0x40
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fa93 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002998:	e00c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fa8a 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 80029aa:	e003      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e000      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae8 <TIM_Base_SetConfig+0xd0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00b      	beq.n	8002a48 <TIM_Base_SetConfig+0x30>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a36:	d007      	beq.n	8002a48 <TIM_Base_SetConfig+0x30>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002aec <TIM_Base_SetConfig+0xd4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <TIM_Base_SetConfig+0x30>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a2b      	ldr	r2, [pc, #172]	@ (8002af0 <TIM_Base_SetConfig+0xd8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d108      	bne.n	8002a5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	@ (8002ae8 <TIM_Base_SetConfig+0xd0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0x62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <TIM_Base_SetConfig+0xd4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0x62>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <TIM_Base_SetConfig+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d108      	bne.n	8002a8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae8 <TIM_Base_SetConfig+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800

08002af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0201 	bic.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 0302 	bic.w	r3, r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <TIM_OC1_SetConfig+0xc8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10c      	bne.n	8002b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0308 	bic.w	r3, r3, #8
 8002b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <TIM_OC1_SetConfig+0xc8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00

08002bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f023 0210 	bic.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0320 	bic.w	r3, r3, #32
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <TIM_OC2_SetConfig+0xd0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10d      	bne.n	8002c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <TIM_OC2_SetConfig+0xd0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d113      	bne.n	8002c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00

08002c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <TIM_OC3_SetConfig+0xd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10d      	bne.n	8002d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <TIM_OC3_SetConfig+0xd0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40012c00 	.word	0x40012c00

08002d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002e00 <TIM_OC4_SetConfig+0x98>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	40012c00 	.word	0x40012c00

08002e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 030a 	bic.w	r3, r3, #10
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0210 	bic.w	r2, r3, #16
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	031b      	lsls	r3, r3, #12
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e046      	b.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	@ (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a12      	ldr	r2, [pc, #72]	@ (800302c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800

08003034 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800304c:	2302      	movs	r3, #2
 800304e:	e03d      	b.n	80030cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e042      	b.n	8003192 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd feab 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	@ 0x24
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fc80 	bl	8003a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003152:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003162:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0ba      	sub	sp, #232	@ 0xe8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb63 	bl	80038c6 <UART_Receive_IT>
      return;
 8003200:	e25b      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80de 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
 800320c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80d1 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
 8003232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 81f2 	beq.w	80036b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 faee 	bl	80038c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_UART_IRQHandler+0x17a>
 800330e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9f8 	bl	800370c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d041      	beq.n	80033ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003382:	4a7e      	ldr	r2, [pc, #504]	@ (800357c <HAL_UART_IRQHandler+0x3e0>)
 8003384:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ffbe 	bl	800130c <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00e      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f99c 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00a      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f998 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e006      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f994 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033c2:	e175      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	bf00      	nop
    return;
 80033c6:	e173      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 814f 	bne.w	8003670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8148 	beq.w	8003670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8141 	beq.w	8003670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80b6 	beq.w	8003580 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8145 	beq.w	80036b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 813e 	bcs.w	80036b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800343e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b20      	cmp	r3, #32
 8003448:	f000 8088 	beq.w	800355c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800346a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003478:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800347c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003484:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1d9      	bne.n	800344c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e1      	bne.n	8003498 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3314      	adds	r3, #20
 80034da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e3      	bne.n	80034d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800352a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352c:	f023 0310 	bic.w	r3, r3, #16
 8003530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800353e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003540:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800354c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e3      	bne.n	800351a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fe9d 	bl	8001296 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800356a:	b29b      	uxth	r3, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8bf 	bl	80036f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003578:	e09c      	b.n	80036b4 <HAL_UART_IRQHandler+0x518>
 800357a:	bf00      	nop
 800357c:	080037d1 	.word	0x080037d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 808e 	beq.w	80036b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800359c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8089 	beq.w	80036b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e3      	bne.n	80035a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	623b      	str	r3, [r7, #32]
   return(result);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003602:	633a      	str	r2, [r7, #48]	@ 0x30
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e3      	bne.n	80035de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003648:	61fa      	str	r2, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	617b      	str	r3, [r7, #20]
   return(result);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e3      	bne.n	8003624 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f844 	bl	80036f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800366e:	e023      	b.n	80036b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x4f4>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8b5 	bl	80037f8 <UART_Transmit_IT>
    return;
 800368e:	e014      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_UART_IRQHandler+0x51e>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8f4 	bl	8003896 <UART_EndTransmit_IT>
    return;
 80036ae:	e004      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
    return;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
      return;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
      return;
 80036b8:	bf00      	nop
  }
}
 80036ba:	37e8      	adds	r7, #232	@ 0xe8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b095      	sub	sp, #84	@ 0x54
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003734:	643a      	str	r2, [r7, #64]	@ 0x40
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800373a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	61fb      	str	r3, [r7, #28]
   return(result);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800376e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	2b01      	cmp	r3, #1
 8003782:	d119      	bne.n	80037b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60bb      	str	r3, [r7, #8]
   return(result);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	647b      	str	r3, [r7, #68]	@ 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a4:	61ba      	str	r2, [r7, #24]
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6979      	ldr	r1, [r7, #20]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	613b      	str	r3, [r7, #16]
   return(result);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037c6:	bf00      	nop
 80037c8:	3754      	adds	r7, #84	@ 0x54
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff7a 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d13e      	bne.n	800388a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d114      	bne.n	8003840 <UART_Transmit_IT+0x48>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d110      	bne.n	8003840 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003832:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]
 800383e:	e008      	b.n	8003852 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	1c59      	adds	r1, r3, #1
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6211      	str	r1, [r2, #32]
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4619      	mov	r1, r3
 8003860:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003874:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003884:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff02 	bl	80036c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08c      	sub	sp, #48	@ 0x30
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b22      	cmp	r3, #34	@ 0x22
 80038d8:	f040 80ae 	bne.w	8003a38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e4:	d117      	bne.n	8003916 <UART_Receive_IT+0x50>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003904:	b29a      	uxth	r2, r3
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28
 8003914:	e026      	b.n	8003964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003928:	d007      	beq.n	800393a <UART_Receive_IT+0x74>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <UART_Receive_IT+0x82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e008      	b.n	800395a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003954:	b2da      	uxtb	r2, r3
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4619      	mov	r1, r3
 8003972:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003974:	2b00      	cmp	r3, #0
 8003976:	d15d      	bne.n	8003a34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0220 	bic.w	r2, r2, #32
 8003986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d135      	bne.n	8003a2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	613b      	str	r3, [r7, #16]
   return(result);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 0310 	bic.w	r3, r3, #16
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	623a      	str	r2, [r7, #32]
 80039e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fe67 	bl	80036f6 <HAL_UARTEx_RxEventCallback>
 8003a28:	e002      	b.n	8003a30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe51 	bl	80036d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e002      	b.n	8003a3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3730      	adds	r7, #48	@ 0x30
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a7e:	f023 030c 	bic.w	r3, r3, #12
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <UART_SetConfig+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7fe fa20 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	e002      	b.n	8003aba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe fa08 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009a      	lsls	r2, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <UART_SetConfig+0x118>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	0119      	lsls	r1, r3, #4
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009a      	lsls	r2, r3, #2
 8003ae4:	441a      	add	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <UART_SetConfig+0x118>)
 8003af2:	fba3 0302 	umull	r0, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2064      	movs	r0, #100	@ 0x64
 8003afa:	fb00 f303 	mul.w	r3, r0, r3
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	3332      	adds	r3, #50	@ 0x32
 8003b04:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <UART_SetConfig+0x118>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b10:	4419      	add	r1, r3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <UART_SetConfig+0x118>)
 8003b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2064      	movs	r0, #100	@ 0x64
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	@ 0x32
 8003b3c:	4a07      	ldr	r2, [pc, #28]	@ (8003b5c <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	51eb851f 	.word	0x51eb851f

08003b60 <memset>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	4402      	add	r2, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d100      	bne.n	8003b6a <memset+0xa>
 8003b68:	4770      	bx	lr
 8003b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6e:	e7f9      	b.n	8003b64 <memset+0x4>

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	2600      	movs	r6, #0
 8003b74:	4d0c      	ldr	r5, [pc, #48]	@ (8003ba8 <__libc_init_array+0x38>)
 8003b76:	4c0d      	ldr	r4, [pc, #52]	@ (8003bac <__libc_init_array+0x3c>)
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	f000 f81a 	bl	8003bb8 <_init>
 8003b84:	2600      	movs	r6, #0
 8003b86:	4d0a      	ldr	r5, [pc, #40]	@ (8003bb0 <__libc_init_array+0x40>)
 8003b88:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb4 <__libc_init_array+0x44>)
 8003b8a:	1b64      	subs	r4, r4, r5
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003bfc 	.word	0x08003bfc
 8003bac:	08003bfc 	.word	0x08003bfc
 8003bb0:	08003bfc 	.word	0x08003bfc
 8003bb4:	08003c00 	.word	0x08003c00

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

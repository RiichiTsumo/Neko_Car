
Neko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d20  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e2c  08003e2c  00004e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e58  08003e58  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e58  08003e58  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00004e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003e6c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003e6c  0000519c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc84  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002194  00000000  00000000  00011cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00013e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0f  00000000  00000000  00014b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017477  00000000  00000000  00015547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f664  00000000  00000000  0002c9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086be3  00000000  00000000  0003c022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c4  00000000  00000000  000c2c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e14 	.word	0x08003e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003e14 	.word	0x08003e14

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1a      	ldr	r3, [pc, #104]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b17      	ldr	r3, [pc, #92]	@ (80001cc <MX_GPIO_Init+0x80>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b11      	ldr	r3, [pc, #68]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <MX_GPIO_Init+0x80>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin sensor3_Pin sensor4_Pin
                           sensor5_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin|sensor3_Pin|sensor4_Pin
 80001a8:	f44f 734e 	mov.w	r3, #824	@ 0x338
 80001ac:	613b      	str	r3, [r7, #16]
                          |sensor5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4619      	mov	r1, r3
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <MX_GPIO_Init+0x84>)
 80001be:	f001 fb2f 	bl	8001820 <HAL_GPIO_Init>

}
 80001c2:	bf00      	nop
 80001c4:	3720      	adds	r7, #32
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f001 f8db 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 fbc5 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001e2:	213c      	movs	r1, #60	@ 0x3c
 80001e4:	48ae      	ldr	r0, [pc, #696]	@ (80004a0 <main+0x2cc>)
 80001e6:	f002 fa11 	bl	800260c <HAL_TIM_Encoder_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f7ff ffaf 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ee:	f000 fe4b 	bl	8000e88 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001f2:	f000 fd85 	bl	8000d00 <MX_TIM1_Init>
  MX_TIM4_Init();
 80001f6:	f000 ff21 	bl	800103c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80001fa:	f001 f827 	bl	800124c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80001fe:	f000 fecf 	bl	8000fa0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 8000202:	2100      	movs	r1, #0
 8000204:	48a7      	ldr	r0, [pc, #668]	@ (80004a4 <main+0x2d0>)
 8000206:	f002 f95f 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 800020a:	2104      	movs	r1, #4
 800020c:	48a5      	ldr	r0, [pc, #660]	@ (80004a4 <main+0x2d0>)
 800020e:	f002 f95b 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 8000212:	2108      	movs	r1, #8
 8000214:	48a3      	ldr	r0, [pc, #652]	@ (80004a4 <main+0x2d0>)
 8000216:	f002 f957 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1);
 800021a:	2100      	movs	r1, #0
 800021c:	48a2      	ldr	r0, [pc, #648]	@ (80004a8 <main+0x2d4>)
 800021e:	f002 f953 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_2);
 8000222:	2104      	movs	r1, #4
 8000224:	48a0      	ldr	r0, [pc, #640]	@ (80004a8 <main+0x2d4>)
 8000226:	f002 f94f 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_3);
 800022a:	2108      	movs	r1, #8
 800022c:	489e      	ldr	r0, [pc, #632]	@ (80004a8 <main+0x2d4>)
 800022e:	f002 f94b 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 8000232:	210c      	movs	r1, #12
 8000234:	489c      	ldr	r0, [pc, #624]	@ (80004a8 <main+0x2d4>)
 8000236:	f002 f947 	bl	80024c8 <HAL_TIM_PWM_Start>

  // HAL_TIM_Base_Start_IT(&htim4);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 240);		// 舵机A驱动代码，舵机占空比代数取值为40~250
 800023a:	4b9a      	ldr	r3, [pc, #616]	@ (80004a4 <main+0x2d0>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	22f0      	movs	r2, #240	@ 0xf0
 8000240:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 40);		// 舵机B驱动代码
 8000242:	4b98      	ldr	r3, [pc, #608]	@ (80004a4 <main+0x2d0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);		// 舵机C驱动代码!!!
 800024a:	4b96      	ldr	r3, [pc, #600]	@ (80004a4 <main+0x2d0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2296      	movs	r2, #150	@ 0x96
 8000250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 8000252:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000256:	4895      	ldr	r0, [pc, #596]	@ (80004ac <main+0x2d8>)
 8000258:	f001 fc66 	bl	8001b28 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b01      	cmp	r3, #1
 8000260:	d007      	beq.n	8000272 <main+0x9e>
 8000262:	2110      	movs	r1, #16
 8000264:	4891      	ldr	r0, [pc, #580]	@ (80004ac <main+0x2d8>)
 8000266:	f001 fc5f 	bl	8001b28 <HAL_GPIO_ReadPin>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	f040 80a5 	bne.w	80003bc <main+0x1e8>
	  			HAL_Delay(DELAY_SP);
 8000272:	2003      	movs	r0, #3
 8000274:	f001 f8f0 	bl	8001458 <HAL_Delay>
	  			// 左、右侧入环
	  			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(loop == 0)){
 8000278:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800027c:	488b      	ldr	r0, [pc, #556]	@ (80004ac <main+0x2d8>)
 800027e:	f001 fc53 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d110      	bne.n	80002aa <main+0xd6>
 8000288:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800028c:	4887      	ldr	r0, [pc, #540]	@ (80004ac <main+0x2d8>)
 800028e:	f001 fc4b 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	d108      	bne.n	80002aa <main+0xd6>
 8000298:	4b85      	ldr	r3, [pc, #532]	@ (80004b0 <main+0x2dc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d104      	bne.n	80002aa <main+0xd6>
	  				// loop = 1;
	  				// A_Forward(A_SPEED);
	  				// B_Forward(B_SPEED);
	  				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 75);
 80002a0:	4b80      	ldr	r3, [pc, #512]	@ (80004a4 <main+0x2d0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	224b      	movs	r2, #75	@ 0x4b
 80002a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80002a8:	e087      	b.n	80003ba <main+0x1e6>
	  			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(loop == 0)){
 80002aa:	2110      	movs	r1, #16
 80002ac:	487f      	ldr	r0, [pc, #508]	@ (80004ac <main+0x2d8>)
 80002ae:	f001 fc3b 	bl	8001b28 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d10f      	bne.n	80002d8 <main+0x104>
 80002b8:	2110      	movs	r1, #16
 80002ba:	487c      	ldr	r0, [pc, #496]	@ (80004ac <main+0x2d8>)
 80002bc:	f001 fc34 	bl	8001b28 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d108      	bne.n	80002d8 <main+0x104>
 80002c6:	4b7a      	ldr	r3, [pc, #488]	@ (80004b0 <main+0x2dc>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d104      	bne.n	80002d8 <main+0x104>
	  				// loop = 1;
	  				// A_Forward(A_SPEED);
	  				// B_Forward(B_SPEED);
	  				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 225);
 80002ce:	4b75      	ldr	r3, [pc, #468]	@ (80004a4 <main+0x2d0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	22e1      	movs	r2, #225	@ 0xe1
 80002d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80002d6:	e070      	b.n	80003ba <main+0x1e6>
	  			}
	  		// 二阶段
	  			else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(loop == 1)){
 80002d8:	2120      	movs	r1, #32
 80002da:	4874      	ldr	r0, [pc, #464]	@ (80004ac <main+0x2d8>)
 80002dc:	f001 fc24 	bl	8001b28 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d10e      	bne.n	8000304 <main+0x130>
 80002e6:	2110      	movs	r1, #16
 80002e8:	4870      	ldr	r0, [pc, #448]	@ (80004ac <main+0x2d8>)
 80002ea:	f001 fc1d 	bl	8001b28 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d107      	bne.n	8000304 <main+0x130>
 80002f4:	4b6e      	ldr	r3, [pc, #440]	@ (80004b0 <main+0x2dc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d103      	bne.n	8000304 <main+0x130>
	  				loop = 2;
 80002fc:	4b6c      	ldr	r3, [pc, #432]	@ (80004b0 <main+0x2dc>)
 80002fe:	2202      	movs	r2, #2
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	e05a      	b.n	80003ba <main+0x1e6>
	  			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(loop == 1)){
 8000304:	2120      	movs	r1, #32
 8000306:	4869      	ldr	r0, [pc, #420]	@ (80004ac <main+0x2d8>)
 8000308:	f001 fc0e 	bl	8001b28 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d10f      	bne.n	8000332 <main+0x15e>
 8000312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000316:	4865      	ldr	r0, [pc, #404]	@ (80004ac <main+0x2d8>)
 8000318:	f001 fc06 	bl	8001b28 <HAL_GPIO_ReadPin>
 800031c:	4603      	mov	r3, r0
 800031e:	2b01      	cmp	r3, #1
 8000320:	d107      	bne.n	8000332 <main+0x15e>
 8000322:	4b63      	ldr	r3, [pc, #396]	@ (80004b0 <main+0x2dc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d103      	bne.n	8000332 <main+0x15e>
	  				loop = 2;
 800032a:	4b61      	ldr	r3, [pc, #388]	@ (80004b0 <main+0x2dc>)
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	e043      	b.n	80003ba <main+0x1e6>
	  			// 差不多可以结束了
	  			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(loop == 2)){
 8000332:	2120      	movs	r1, #32
 8000334:	485d      	ldr	r0, [pc, #372]	@ (80004ac <main+0x2d8>)
 8000336:	f001 fbf7 	bl	8001b28 <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d114      	bne.n	800036a <main+0x196>
 8000340:	2110      	movs	r1, #16
 8000342:	485a      	ldr	r0, [pc, #360]	@ (80004ac <main+0x2d8>)
 8000344:	f001 fbf0 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b01      	cmp	r3, #1
 800034c:	d10d      	bne.n	800036a <main+0x196>
 800034e:	4b58      	ldr	r3, [pc, #352]	@ (80004b0 <main+0x2dc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d109      	bne.n	800036a <main+0x196>
	  				loop = 3;
 8000356:	4b56      	ldr	r3, [pc, #344]	@ (80004b0 <main+0x2dc>)
 8000358:	2203      	movs	r2, #3
 800035a:	601a      	str	r2, [r3, #0]
	  				A_Forward(A_SPEED);
 800035c:	2047      	movs	r0, #71	@ 0x47
 800035e:	f000 fbdd 	bl	8000b1c <A_Forward>
	  				B_Forward(B_SPEED);
 8000362:	2032      	movs	r0, #50	@ 0x32
 8000364:	f000 fbb4 	bl	8000ad0 <B_Forward>
 8000368:	e027      	b.n	80003ba <main+0x1e6>
	  			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(loop == 2)){
 800036a:	2120      	movs	r1, #32
 800036c:	484f      	ldr	r0, [pc, #316]	@ (80004ac <main+0x2d8>)
 800036e:	f001 fbdb 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b01      	cmp	r3, #1
 8000376:	d115      	bne.n	80003a4 <main+0x1d0>
 8000378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800037c:	484b      	ldr	r0, [pc, #300]	@ (80004ac <main+0x2d8>)
 800037e:	f001 fbd3 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10d      	bne.n	80003a4 <main+0x1d0>
 8000388:	4b49      	ldr	r3, [pc, #292]	@ (80004b0 <main+0x2dc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b02      	cmp	r3, #2
 800038e:	d109      	bne.n	80003a4 <main+0x1d0>
	  				loop = 3;
 8000390:	4b47      	ldr	r3, [pc, #284]	@ (80004b0 <main+0x2dc>)
 8000392:	2203      	movs	r2, #3
 8000394:	601a      	str	r2, [r3, #0]
	  				A_Forward(A_SPEED);
 8000396:	2047      	movs	r0, #71	@ 0x47
 8000398:	f000 fbc0 	bl	8000b1c <A_Forward>
	  				B_Forward(B_SPEED);
 800039c:	2032      	movs	r0, #50	@ 0x32
 800039e:	f000 fb97 	bl	8000ad0 <B_Forward>
 80003a2:	e00a      	b.n	80003ba <main+0x1e6>
	  			}
	  			else{
	  				A_Forward(A_SPEED);
 80003a4:	2047      	movs	r0, #71	@ 0x47
 80003a6:	f000 fbb9 	bl	8000b1c <A_Forward>
	  				B_Forward(B_SPEED);
 80003aa:	2032      	movs	r0, #50	@ 0x32
 80003ac:	f000 fb90 	bl	8000ad0 <B_Forward>
	  				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);
 80003b0:	4b3c      	ldr	r3, [pc, #240]	@ (80004a4 <main+0x2d0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2296      	movs	r2, #150	@ 0x96
 80003b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	  			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(loop == 0)){
 80003b8:	e24f      	b.n	800085a <main+0x686>
 80003ba:	e24e      	b.n	800085a <main+0x686>
	  			}
	  		}
	  // 右转
  else if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 80003bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c0:	483a      	ldr	r0, [pc, #232]	@ (80004ac <main+0x2d8>)
 80003c2:	f001 fbb1 	bl	8001b28 <HAL_GPIO_ReadPin>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	f040 8121 	bne.w	8000610 <main+0x43c>
 80003ce:	2108      	movs	r1, #8
 80003d0:	4836      	ldr	r0, [pc, #216]	@ (80004ac <main+0x2d8>)
 80003d2:	f001 fba9 	bl	8001b28 <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	f040 8119 	bne.w	8000610 <main+0x43c>
	  HAL_Delay(DELAY_SP);
 80003de:	2003      	movs	r0, #3
 80003e0:	f001 f83a 	bl	8001458 <HAL_Delay>
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)){
 80003e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003e8:	4830      	ldr	r0, [pc, #192]	@ (80004ac <main+0x2d8>)
 80003ea:	f001 fb9d 	bl	8001b28 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d12f      	bne.n	8000454 <main+0x280>
 80003f4:	2120      	movs	r1, #32
 80003f6:	482d      	ldr	r0, [pc, #180]	@ (80004ac <main+0x2d8>)
 80003f8:	f001 fb96 	bl	8001b28 <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d128      	bne.n	8000454 <main+0x280>
 8000402:	2108      	movs	r1, #8
 8000404:	4829      	ldr	r0, [pc, #164]	@ (80004ac <main+0x2d8>)
 8000406:	f001 fb8f 	bl	8001b28 <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d121      	bne.n	8000454 <main+0x280>
 8000410:	2110      	movs	r1, #16
 8000412:	4826      	ldr	r0, [pc, #152]	@ (80004ac <main+0x2d8>)
 8000414:	f001 fb88 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11a      	bne.n	8000454 <main+0x280>
	  					for(int i = 100 ; i > 0 ; i --){
 800041e:	2364      	movs	r3, #100	@ 0x64
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e00c      	b.n	800043e <main+0x26a>
	  						A_Backward(i);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fb2b 	bl	8000a84 <A_Backward>
	  						B_Backward(i);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fb98 	bl	8000b68 <B_Backward>
	  					for(int i = 100 ; i > 0 ; i --){
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3b01      	subs	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2b00      	cmp	r3, #0
 8000442:	dcef      	bgt.n	8000424 <main+0x250>
	  					}
	  					RIGHT(RIGHT_SPD);
 8000444:	2028      	movs	r0, #40	@ 0x28
 8000446:	f000 fbb5 	bl	8000bb4 <RIGHT>
	  					HAL_Delay(DELAY_DF);
 800044a:	f240 2026 	movw	r0, #550	@ 0x226
 800044e:	f001 f803 	bl	8001458 <HAL_Delay>
 8000452:	e050      	b.n	80004f6 <main+0x322>
	  				}
	  else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(loop == 0)){
 8000454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000458:	4814      	ldr	r0, [pc, #80]	@ (80004ac <main+0x2d8>)
 800045a:	f001 fb65 	bl	8001b28 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d127      	bne.n	80004b4 <main+0x2e0>
 8000464:	2110      	movs	r1, #16
 8000466:	4811      	ldr	r0, [pc, #68]	@ (80004ac <main+0x2d8>)
 8000468:	f001 fb5e 	bl	8001b28 <HAL_GPIO_ReadPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d120      	bne.n	80004b4 <main+0x2e0>
 8000472:	2108      	movs	r1, #8
 8000474:	480d      	ldr	r0, [pc, #52]	@ (80004ac <main+0x2d8>)
 8000476:	f001 fb57 	bl	8001b28 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d119      	bne.n	80004b4 <main+0x2e0>
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <main+0x2dc>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d115      	bne.n	80004b4 <main+0x2e0>
			// loop = 1;
			A_Forward(A_SPEED);
 8000488:	2047      	movs	r0, #71	@ 0x47
 800048a:	f000 fb47 	bl	8000b1c <A_Forward>
			B_Forward(B_SPEED);
 800048e:	2032      	movs	r0, #50	@ 0x32
 8000490:	f000 fb1e 	bl	8000ad0 <B_Forward>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 225);
 8000494:	4b03      	ldr	r3, [pc, #12]	@ (80004a4 <main+0x2d0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	22e1      	movs	r2, #225	@ 0xe1
 800049a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800049c:	e02b      	b.n	80004f6 <main+0x322>
 800049e:	bf00      	nop
 80004a0:	20000108 	.word	0x20000108
 80004a4:	20000078 	.word	0x20000078
 80004a8:	20000030 	.word	0x20000030
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	20000028 	.word	0x20000028
		}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&& loop != 9){
 80004b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b8:	48a9      	ldr	r0, [pc, #676]	@ (8000760 <main+0x58c>)
 80004ba:	f001 fb35 	bl	8001b28 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d118      	bne.n	80004f6 <main+0x322>
 80004c4:	2120      	movs	r1, #32
 80004c6:	48a6      	ldr	r0, [pc, #664]	@ (8000760 <main+0x58c>)
 80004c8:	f001 fb2e 	bl	8001b28 <HAL_GPIO_ReadPin>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d111      	bne.n	80004f6 <main+0x322>
 80004d2:	2110      	movs	r1, #16
 80004d4:	48a2      	ldr	r0, [pc, #648]	@ (8000760 <main+0x58c>)
 80004d6:	f001 fb27 	bl	8001b28 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10a      	bne.n	80004f6 <main+0x322>
 80004e0:	4ba0      	ldr	r3, [pc, #640]	@ (8000764 <main+0x590>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b09      	cmp	r3, #9
 80004e6:	d006      	beq.n	80004f6 <main+0x322>
			LEFT_SPD - 15;
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 80004e8:	4b9f      	ldr	r3, [pc, #636]	@ (8000768 <main+0x594>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2264      	movs	r2, #100	@ 0x64
 80004ee:	63da      	str	r2, [r3, #60]	@ 0x3c
			loop =9;
 80004f0:	4b9c      	ldr	r3, [pc, #624]	@ (8000764 <main+0x590>)
 80004f2:	2209      	movs	r2, #9
 80004f4:	601a      	str	r2, [r3, #0]
						}
			HAL_Delay(DELAY_NO);
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 ffae 	bl	8001458 <HAL_Delay>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 80004fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000500:	4897      	ldr	r0, [pc, #604]	@ (8000760 <main+0x58c>)
 8000502:	f001 fb11 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d150      	bne.n	80005ae <main+0x3da>
 800050c:	2108      	movs	r1, #8
 800050e:	4894      	ldr	r0, [pc, #592]	@ (8000760 <main+0x58c>)
 8000510:	f001 fb0a 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d149      	bne.n	80005ae <main+0x3da>
				right:
 800051a:	bf00      	nop
 800051c:	e000      	b.n	8000520 <main+0x34c>
		}
		 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);
			 break ;
		 	}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)){
				goto right;
 800051e:	bf00      	nop
			RIGHT(RIGHT_SPD);
 8000520:	2028      	movs	r0, #40	@ 0x28
 8000522:	f000 fb47 	bl	8000bb4 <RIGHT>
			switch(loop){
 8000526:	4b8f      	ldr	r3, [pc, #572]	@ (8000764 <main+0x590>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d010      	beq.n	8000550 <main+0x37c>
 800052e:	2b02      	cmp	r3, #2
 8000530:	dc13      	bgt.n	800055a <main+0x386>
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <main+0x368>
 8000536:	2b01      	cmp	r3, #1
 8000538:	d005      	beq.n	8000546 <main+0x372>
 800053a:	e00e      	b.n	800055a <main+0x386>
			case 0:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 165);break;
 800053c:	4b8a      	ldr	r3, [pc, #552]	@ (8000768 <main+0x594>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	22a5      	movs	r2, #165	@ 0xa5
 8000542:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000544:	e00e      	b.n	8000564 <main+0x390>
			case 1:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 140);break;
 8000546:	4b88      	ldr	r3, [pc, #544]	@ (8000768 <main+0x594>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	228c      	movs	r2, #140	@ 0x8c
 800054c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800054e:	e009      	b.n	8000564 <main+0x390>
			case 2:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 160);break;
 8000550:	4b85      	ldr	r3, [pc, #532]	@ (8000768 <main+0x594>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	22a0      	movs	r2, #160	@ 0xa0
 8000556:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000558:	e004      	b.n	8000564 <main+0x390>
			default:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 165);break;
 800055a:	4b83      	ldr	r3, [pc, #524]	@ (8000768 <main+0x594>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	22a5      	movs	r2, #165	@ 0xa5
 8000560:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000562:	bf00      	nop
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 8000564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000568:	487d      	ldr	r0, [pc, #500]	@ (8000760 <main+0x58c>)
 800056a:	f001 fadd 	bl	8001b28 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d113      	bne.n	800059c <main+0x3c8>
 8000574:	2108      	movs	r1, #8
 8000576:	487a      	ldr	r0, [pc, #488]	@ (8000760 <main+0x58c>)
 8000578:	f001 fad6 	bl	8001b28 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10c      	bne.n	800059c <main+0x3c8>
 8000582:	2120      	movs	r1, #32
 8000584:	4876      	ldr	r0, [pc, #472]	@ (8000760 <main+0x58c>)
 8000586:	f001 facf 	bl	8001b28 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d105      	bne.n	800059c <main+0x3c8>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);
 8000590:	4b75      	ldr	r3, [pc, #468]	@ (8000768 <main+0x594>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2296      	movs	r2, #150	@ 0x96
 8000596:	63da      	str	r2, [r3, #60]	@ 0x3c
				break ;
 8000598:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 800059a:	e15e      	b.n	800085a <main+0x686>
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 800059c:	2108      	movs	r1, #8
 800059e:	4870      	ldr	r0, [pc, #448]	@ (8000760 <main+0x58c>)
 80005a0:	f001 fac2 	bl	8001b28 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	f000 80e0 	beq.w	800076c <main+0x598>
			RIGHT(RIGHT_SPD);
 80005ac:	e7b8      	b.n	8000520 <main+0x34c>
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1))){
 80005ae:	2120      	movs	r1, #32
 80005b0:	486b      	ldr	r0, [pc, #428]	@ (8000760 <main+0x58c>)
 80005b2:	f001 fab9 	bl	8001b28 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d122      	bne.n	8000602 <main+0x42e>
 80005bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c0:	4867      	ldr	r0, [pc, #412]	@ (8000760 <main+0x58c>)
 80005c2:	f001 fab1 	bl	8001b28 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d100      	bne.n	80005ce <main+0x3fa>
 80005cc:	e007      	b.n	80005de <main+0x40a>
 80005ce:	2108      	movs	r1, #8
 80005d0:	4863      	ldr	r0, [pc, #396]	@ (8000760 <main+0x58c>)
 80005d2:	f001 faa9 	bl	8001b28 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d000      	beq.n	80005de <main+0x40a>
 80005dc:	e011      	b.n	8000602 <main+0x42e>
				A_Forward(A_SPEED);
 80005de:	2047      	movs	r0, #71	@ 0x47
 80005e0:	f000 fa9c 	bl	8000b1c <A_Forward>
				B_Forward(B_SPEED);
 80005e4:	2032      	movs	r0, #50	@ 0x32
 80005e6:	f000 fa73 	bl	8000ad0 <B_Forward>
				if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)){
 80005ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ee:	485c      	ldr	r0, [pc, #368]	@ (8000760 <main+0x58c>)
 80005f0:	f001 fa9a 	bl	8001b28 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d000      	beq.n	80005fc <main+0x428>
				A_Forward(A_SPEED);
 80005fa:	e7f0      	b.n	80005de <main+0x40a>
					break;
 80005fc:	bf00      	nop
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1))){
 80005fe:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 8000600:	e12b      	b.n	800085a <main+0x686>
				A_Forward(A_SPEED);
 8000602:	2047      	movs	r0, #71	@ 0x47
 8000604:	f000 fa8a 	bl	8000b1c <A_Forward>
				B_Forward(B_SPEED);
 8000608:	2032      	movs	r0, #50	@ 0x32
 800060a:	f000 fa61 	bl	8000ad0 <B_Forward>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 800060e:	e124      	b.n	800085a <main+0x686>
		else  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	4852      	ldr	r0, [pc, #328]	@ (8000760 <main+0x58c>)
 8000616:	f001 fa87 	bl	8001b28 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f040 811c 	bne.w	800085a <main+0x686>
 8000622:	2108      	movs	r1, #8
 8000624:	484e      	ldr	r0, [pc, #312]	@ (8000760 <main+0x58c>)
 8000626:	f001 fa7f 	bl	8001b28 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	f040 8114 	bne.w	800085a <main+0x686>
			HAL_Delay(DELAY_SP);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 ff10 	bl	8001458 <HAL_Delay>
			if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 8000638:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800063c:	4848      	ldr	r0, [pc, #288]	@ (8000760 <main+0x58c>)
 800063e:	f001 fa73 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d130      	bne.n	80006aa <main+0x4d6>
 8000648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800064c:	4844      	ldr	r0, [pc, #272]	@ (8000760 <main+0x58c>)
 800064e:	f001 fa6b 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d128      	bne.n	80006aa <main+0x4d6>
 8000658:	2110      	movs	r1, #16
 800065a:	4841      	ldr	r0, [pc, #260]	@ (8000760 <main+0x58c>)
 800065c:	f001 fa64 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d121      	bne.n	80006aa <main+0x4d6>
 8000666:	2108      	movs	r1, #8
 8000668:	483d      	ldr	r0, [pc, #244]	@ (8000760 <main+0x58c>)
 800066a:	f001 fa5d 	bl	8001b28 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d11a      	bne.n	80006aa <main+0x4d6>
								for(int i = 100 ; i > 0 ; i --){
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	e00c      	b.n	8000694 <main+0x4c0>
									A_Backward(i);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fa00 	bl	8000a84 <A_Backward>
									B_Backward(i);
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa6d 	bl	8000b68 <B_Backward>
								for(int i = 100 ; i > 0 ; i --){
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	3b01      	subs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	dcef      	bgt.n	800067a <main+0x4a6>
								LEFT(LEFT_SPD);
 800069a:	2032      	movs	r0, #50	@ 0x32
 800069c:	f000 fa9c 	bl	8000bd8 <LEFT>
								HAL_Delay(DELAY_DF);
 80006a0:	f240 2026 	movw	r0, #550	@ 0x226
 80006a4:	f000 fed8 	bl	8001458 <HAL_Delay>
 80006a8:	e046      	b.n	8000738 <main+0x564>
			else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(loop == 0)){
 80006aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ae:	482c      	ldr	r0, [pc, #176]	@ (8000760 <main+0x58c>)
 80006b0:	f001 fa3a 	bl	8001b28 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11d      	bne.n	80006f6 <main+0x522>
 80006ba:	2110      	movs	r1, #16
 80006bc:	4828      	ldr	r0, [pc, #160]	@ (8000760 <main+0x58c>)
 80006be:	f001 fa33 	bl	8001b28 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d116      	bne.n	80006f6 <main+0x522>
 80006c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006cc:	4824      	ldr	r0, [pc, #144]	@ (8000760 <main+0x58c>)
 80006ce:	f001 fa2b 	bl	8001b28 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10e      	bne.n	80006f6 <main+0x522>
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <main+0x590>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10a      	bne.n	80006f6 <main+0x522>
				  				A_Forward(A_SPEED);
 80006e0:	2047      	movs	r0, #71	@ 0x47
 80006e2:	f000 fa1b 	bl	8000b1c <A_Forward>
				  				B_Forward(B_SPEED);
 80006e6:	2032      	movs	r0, #50	@ 0x32
 80006e8:	f000 f9f2 	bl	8000ad0 <B_Forward>
				  				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 75);
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <main+0x594>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	224b      	movs	r2, #75	@ 0x4b
 80006f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f4:	e020      	b.n	8000738 <main+0x564>
			else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&loop != 9){
 80006f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006fa:	4819      	ldr	r0, [pc, #100]	@ (8000760 <main+0x58c>)
 80006fc:	f001 fa14 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d118      	bne.n	8000738 <main+0x564>
 8000706:	2120      	movs	r1, #32
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <main+0x58c>)
 800070a:	f001 fa0d 	bl	8001b28 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d111      	bne.n	8000738 <main+0x564>
 8000714:	2110      	movs	r1, #16
 8000716:	4812      	ldr	r0, [pc, #72]	@ (8000760 <main+0x58c>)
 8000718:	f001 fa06 	bl	8001b28 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10a      	bne.n	8000738 <main+0x564>
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <main+0x590>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b09      	cmp	r3, #9
 8000728:	d006      	beq.n	8000738 <main+0x564>
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <main+0x594>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	22c8      	movs	r2, #200	@ 0xc8
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
							loop = 9;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <main+0x590>)
 8000734:	2209      	movs	r2, #9
 8000736:	601a      	str	r2, [r3, #0]
			HAL_Delay(DELAY_NO);
 8000738:	200a      	movs	r0, #10
 800073a:	f000 fe8d 	bl	8001458 <HAL_Delay>
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 800073e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000742:	4807      	ldr	r0, [pc, #28]	@ (8000760 <main+0x58c>)
 8000744:	f001 f9f0 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d157      	bne.n	80007fe <main+0x62a>
 800074e:	2108      	movs	r1, #8
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <main+0x58c>)
 8000752:	f001 f9e9 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d150      	bne.n	80007fe <main+0x62a>
				left:
 800075c:	e007      	b.n	800076e <main+0x59a>
 800075e:	bf00      	nop
 8000760:	40010c00 	.word	0x40010c00
 8000764:	20000028 	.word	0x20000028
 8000768:	20000078 	.word	0x20000078
				goto left;
 800076c:	bf00      	nop
			LEFT(LEFT_SPD);
 800076e:	2032      	movs	r0, #50	@ 0x32
 8000770:	f000 fa32 	bl	8000bd8 <LEFT>
			switch(loop){
 8000774:	4b7a      	ldr	r3, [pc, #488]	@ (8000960 <main+0x78c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d010      	beq.n	800079e <main+0x5ca>
 800077c:	2b02      	cmp	r3, #2
 800077e:	dc13      	bgt.n	80007a8 <main+0x5d4>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <main+0x5b6>
 8000784:	2b01      	cmp	r3, #1
 8000786:	d005      	beq.n	8000794 <main+0x5c0>
 8000788:	e00e      	b.n	80007a8 <main+0x5d4>
			case 0:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 135);break;
 800078a:	4b76      	ldr	r3, [pc, #472]	@ (8000964 <main+0x790>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2287      	movs	r2, #135	@ 0x87
 8000790:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000792:	e00e      	b.n	80007b2 <main+0x5de>
			case 1:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 160);break;
 8000794:	4b73      	ldr	r3, [pc, #460]	@ (8000964 <main+0x790>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	22a0      	movs	r2, #160	@ 0xa0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800079c:	e009      	b.n	80007b2 <main+0x5de>
			case 2:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 140);break;
 800079e:	4b71      	ldr	r3, [pc, #452]	@ (8000964 <main+0x790>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	228c      	movs	r2, #140	@ 0x8c
 80007a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007a6:	e004      	b.n	80007b2 <main+0x5de>
			default:__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 165);break;
 80007a8:	4b6e      	ldr	r3, [pc, #440]	@ (8000964 <main+0x790>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	22a5      	movs	r2, #165	@ 0xa5
 80007ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b0:	bf00      	nop
		 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)){
 80007b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007b6:	486c      	ldr	r0, [pc, #432]	@ (8000968 <main+0x794>)
 80007b8:	f001 f9b6 	bl	8001b28 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d113      	bne.n	80007ea <main+0x616>
 80007c2:	2108      	movs	r1, #8
 80007c4:	4868      	ldr	r0, [pc, #416]	@ (8000968 <main+0x794>)
 80007c6:	f001 f9af 	bl	8001b28 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10c      	bne.n	80007ea <main+0x616>
 80007d0:	2120      	movs	r1, #32
 80007d2:	4865      	ldr	r0, [pc, #404]	@ (8000968 <main+0x794>)
 80007d4:	f001 f9a8 	bl	8001b28 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d105      	bne.n	80007ea <main+0x616>
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);
 80007de:	4b61      	ldr	r3, [pc, #388]	@ (8000964 <main+0x790>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2296      	movs	r2, #150	@ 0x96
 80007e4:	63da      	str	r2, [r3, #60]	@ 0x3c
			 break ;
 80007e6:	bf00      	nop
			if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 80007e8:	e037      	b.n	800085a <main+0x686>
		 	}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)){
 80007ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ee:	485e      	ldr	r0, [pc, #376]	@ (8000968 <main+0x794>)
 80007f0:	f001 f99a 	bl	8001b28 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	f43f ae91 	beq.w	800051e <main+0x34a>
			LEFT(LEFT_SPD);
 80007fc:	e7b7      	b.n	800076e <main+0x59a>
			}
		}
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1))){
 80007fe:	2120      	movs	r1, #32
 8000800:	4859      	ldr	r0, [pc, #356]	@ (8000968 <main+0x794>)
 8000802:	f001 f991 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d120      	bne.n	800084e <main+0x67a>
 800080c:	2108      	movs	r1, #8
 800080e:	4856      	ldr	r0, [pc, #344]	@ (8000968 <main+0x794>)
 8000810:	f001 f98a 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d100      	bne.n	800081c <main+0x648>
 800081a:	e008      	b.n	800082e <main+0x65a>
 800081c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000820:	4851      	ldr	r0, [pc, #324]	@ (8000968 <main+0x794>)
 8000822:	f001 f981 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d000      	beq.n	800082e <main+0x65a>
 800082c:	e00f      	b.n	800084e <main+0x67a>
				while(1){
				A_Forward(A_SPEED);
 800082e:	2047      	movs	r0, #71	@ 0x47
 8000830:	f000 f974 	bl	8000b1c <A_Forward>
				B_Forward(B_SPEED);
 8000834:	2032      	movs	r0, #50	@ 0x32
 8000836:	f000 f94b 	bl	8000ad0 <B_Forward>
				if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 800083a:	2110      	movs	r1, #16
 800083c:	484a      	ldr	r0, [pc, #296]	@ (8000968 <main+0x794>)
 800083e:	f001 f973 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d000      	beq.n	800084a <main+0x676>
				A_Forward(A_SPEED);
 8000848:	e7f1      	b.n	800082e <main+0x65a>
					break;
 800084a:	bf00      	nop
			}else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==1)&&((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1))){
 800084c:	e005      	b.n	800085a <main+0x686>
				}
			}
			}else{
				A_Forward(A_SPEED);
 800084e:	2047      	movs	r0, #71	@ 0x47
 8000850:	f000 f964 	bl	8000b1c <A_Forward>
				B_Forward(B_SPEED);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f000 f93b 	bl	8000ad0 <B_Forward>

			}
		}
		// T字与十字路口、出入环检查
	  	  // T左转
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==1)){
 800085a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085e:	4842      	ldr	r0, [pc, #264]	@ (8000968 <main+0x794>)
 8000860:	f001 f962 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d133      	bne.n	80008d2 <main+0x6fe>
 800086a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086e:	483e      	ldr	r0, [pc, #248]	@ (8000968 <main+0x794>)
 8000870:	f001 f95a 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d12b      	bne.n	80008d2 <main+0x6fe>
 800087a:	2110      	movs	r1, #16
 800087c:	483a      	ldr	r0, [pc, #232]	@ (8000968 <main+0x794>)
 800087e:	f001 f953 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d124      	bne.n	80008d2 <main+0x6fe>
 8000888:	2108      	movs	r1, #8
 800088a:	4837      	ldr	r0, [pc, #220]	@ (8000968 <main+0x794>)
 800088c:	f001 f94c 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d11d      	bne.n	80008d2 <main+0x6fe>
					for(int i = 100 ; i > 0 ; i --){
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e00c      	b.n	80008b6 <main+0x6e2>
						A_Backward(i);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f8ef 	bl	8000a84 <A_Backward>
						B_Backward(i);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f95c 	bl	8000b68 <B_Backward>
					for(int i = 100 ; i > 0 ; i --){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dcef      	bgt.n	800089c <main+0x6c8>
					}
					LEFT(LEFT_SPD);
 80008bc:	2032      	movs	r0, #50	@ 0x32
 80008be:	f000 f98b 	bl	8000bd8 <LEFT>
					loop = 9;
 80008c2:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <main+0x78c>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	601a      	str	r2, [r3, #0]
					HAL_Delay(DELAY_DF);
 80008c8:	f240 2026 	movw	r0, #550	@ 0x226
 80008cc:	f000 fdc4 	bl	8001458 <HAL_Delay>
 80008d0:	e045      	b.n	800095e <main+0x78a>
				}
		// T右转
		else if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)&&(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)){
 80008d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d6:	4824      	ldr	r0, [pc, #144]	@ (8000968 <main+0x794>)
 80008d8:	f001 f926 	bl	8001b28 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d133      	bne.n	800094a <main+0x776>
 80008e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e6:	4820      	ldr	r0, [pc, #128]	@ (8000968 <main+0x794>)
 80008e8:	f001 f91e 	bl	8001b28 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d12b      	bne.n	800094a <main+0x776>
 80008f2:	2110      	movs	r1, #16
 80008f4:	481c      	ldr	r0, [pc, #112]	@ (8000968 <main+0x794>)
 80008f6:	f001 f917 	bl	8001b28 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d124      	bne.n	800094a <main+0x776>
 8000900:	2108      	movs	r1, #8
 8000902:	4819      	ldr	r0, [pc, #100]	@ (8000968 <main+0x794>)
 8000904:	f001 f910 	bl	8001b28 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11d      	bne.n	800094a <main+0x776>
					for(int i = 100 ; i > 0 ; i --){
 800090e:	2364      	movs	r3, #100	@ 0x64
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	e00c      	b.n	800092e <main+0x75a>
						A_Backward(i);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f8b3 	bl	8000a84 <A_Backward>
						B_Backward(i);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f920 	bl	8000b68 <B_Backward>
					for(int i = 100 ; i > 0 ; i --){
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	3b01      	subs	r3, #1
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	dcef      	bgt.n	8000914 <main+0x740>
					}
					RIGHT(RIGHT_SPD);
 8000934:	2028      	movs	r0, #40	@ 0x28
 8000936:	f000 f93d 	bl	8000bb4 <RIGHT>
					loop = 9;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <main+0x78c>)
 800093c:	2209      	movs	r2, #9
 800093e:	601a      	str	r2, [r3, #0]
					HAL_Delay(DELAY_DF);
 8000940:	f240 2026 	movw	r0, #550	@ 0x226
 8000944:	f000 fd88 	bl	8001458 <HAL_Delay>
 8000948:	e009      	b.n	800095e <main+0x78a>
				}
		// 直行
		else{
			A_Forward(A_SPEED);
 800094a:	2047      	movs	r0, #71	@ 0x47
 800094c:	f000 f8e6 	bl	8000b1c <A_Forward>
			B_Forward(B_SPEED);
 8000950:	2032      	movs	r0, #50	@ 0x32
 8000952:	f000 f8bd 	bl	8000ad0 <B_Forward>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 150);
 8000956:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <main+0x790>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2296      	movs	r2, #150	@ 0x96
 800095c:	63da      	str	r2, [r3, #60]	@ 0x3c
	 if ((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==1)||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==1)){
 800095e:	e478      	b.n	8000252 <main+0x7e>
 8000960:	20000028 	.word	0x20000028
 8000964:	20000078 	.word	0x20000078
 8000968:	40010c00 	.word	0x40010c00

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	@ 0x40
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	2228      	movs	r2, #40	@ 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fa1e 	bl	8003dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f8cf 	bl	8001b58 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009c0:	f000 f819 	bl	80009f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fb3c 	bl	800205c <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ea:	f000 f804 	bl	80009f6 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3740      	adds	r7, #64	@ 0x40
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fa:	b672      	cpsid	i
}
 80009fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <Error_Handler+0x8>
	...

08000a04 <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__SetIn1PWM+0x1c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000030 	.word	0x20000030

08000a24 <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 8000a2e:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <__SetIn2PWM+0x1c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000030 	.word	0x20000030

08000a44 <__SetIn3PWM>:
/**
 * @brief 设置IN3引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn3PWM(uint8_t duty)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN3_TIM, IN3_CH, duty);
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <__SetIn3PWM+0x1c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000030 	.word	0x20000030

08000a64 <__SetIn4PWM>:
/**
 * @brief 设置IN4引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn4PWM(uint8_t duty)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN4_TIM, IN4_CH, duty);
 8000a6e:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <__SetIn4PWM+0x1c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	20000030 	.word	0x20000030

08000a84 <A_Backward>:
/**
 * @brief 控制电机A前进
 * @param speed 速度值（0-100）
 */
void A_Backward(uint8_t speed)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b64      	cmp	r3, #100	@ 0x64
 8000a92:	d901      	bls.n	8000a98 <A_Backward+0x14>
        speed = MAX_SPEED;
 8000a94:	2364      	movs	r3, #100	@ 0x64
 8000a96:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <A_Backward+0x48>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d107      	bne.n	8000ab0 <A_Backward+0x2c>
        __SetIn1PWM(speed);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffae 	bl	8000a04 <__SetIn1PWM>
        __SetIn2PWM(0);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff ffbb 	bl	8000a24 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 8000aae:	e009      	b.n	8000ac4 <A_Backward+0x40>
        __SetIn1PWM(MAX_SPEED);
 8000ab0:	2064      	movs	r0, #100	@ 0x64
 8000ab2:	f7ff ffa7 	bl	8000a04 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ffb0 	bl	8000a24 <__SetIn2PWM>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000002c 	.word	0x2000002c

08000ad0 <B_Forward>:
/**
 * @brief 控制电机B前进
 * @param speed 速度值（0-100）
 */
void B_Forward(uint8_t speed)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b64      	cmp	r3, #100	@ 0x64
 8000ade:	d901      	bls.n	8000ae4 <B_Forward+0x14>
        speed = MAX_SPEED;
 8000ae0:	2364      	movs	r3, #100	@ 0x64
 8000ae2:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <B_Forward+0x48>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d107      	bne.n	8000afc <B_Forward+0x2c>
        __SetIn3PWM(speed);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffa8 	bl	8000a44 <__SetIn3PWM>
        __SetIn4PWM(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff ffb5 	bl	8000a64 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED);
        __SetIn4PWM(MAX_SPEED - speed);
    }
}
 8000afa:	e009      	b.n	8000b10 <B_Forward+0x40>
        __SetIn3PWM(MAX_SPEED);
 8000afc:	2064      	movs	r0, #100	@ 0x64
 8000afe:	f7ff ffa1 	bl	8000a44 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED - speed);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffaa 	bl	8000a64 <__SetIn4PWM>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000002c 	.word	0x2000002c

08000b1c <A_Forward>:
/**
 * @brief 控制电机A后退
 * @param speed 速度值（0-100）
 */
void A_Forward(uint8_t speed)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b64      	cmp	r3, #100	@ 0x64
 8000b2a:	d901      	bls.n	8000b30 <A_Forward+0x14>
        speed = MAX_SPEED;
 8000b2c:	2364      	movs	r3, #100	@ 0x64
 8000b2e:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <A_Forward+0x48>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <A_Forward+0x2c>
        __SetIn1PWM(0);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff ff63 	bl	8000a04 <__SetIn1PWM>
        __SetIn2PWM(speed);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff6f 	bl	8000a24 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 8000b46:	e009      	b.n	8000b5c <A_Forward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff57 	bl	8000a04 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 8000b56:	2064      	movs	r0, #100	@ 0x64
 8000b58:	f7ff ff64 	bl	8000a24 <__SetIn2PWM>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000002c 	.word	0x2000002c

08000b68 <B_Backward>:
/**
 * @brief 控制电机B后退
 * @param speed 速度值（0-100）
 */
void B_Backward(uint8_t speed)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b64      	cmp	r3, #100	@ 0x64
 8000b76:	d901      	bls.n	8000b7c <B_Backward+0x14>
        speed = MAX_SPEED;
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <B_Backward+0x48>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d107      	bne.n	8000b94 <B_Backward+0x2c>
        __SetIn3PWM(0);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff5d 	bl	8000a44 <__SetIn3PWM>
        __SetIn4PWM(speed);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff69 	bl	8000a64 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED - speed);
        __SetIn4PWM(MAX_SPEED);
    }
}
 8000b92:	e009      	b.n	8000ba8 <B_Backward+0x40>
        __SetIn3PWM(MAX_SPEED - speed);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff51 	bl	8000a44 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED);
 8000ba2:	2064      	movs	r0, #100	@ 0x64
 8000ba4:	f7ff ff5e 	bl	8000a64 <__SetIn4PWM>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000002c 	.word	0x2000002c

08000bb4 <RIGHT>:

/**
 * @brief 右转
 */
void RIGHT(uint8_t speed)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	A_Forward(speed + 40);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3328      	adds	r3, #40	@ 0x28
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffa9 	bl	8000b1c <A_Forward>
	B_Backward(20);
 8000bca:	2014      	movs	r0, #20
 8000bcc:	f7ff ffcc 	bl	8000b68 <B_Backward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <LEFT>:

/**
 * @brief 左转
 */
void LEFT(uint8_t speed)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	A_Backward(20);
 8000be2:	2014      	movs	r0, #20
 8000be4:	f7ff ff4e 	bl	8000a84 <A_Backward>
	B_Forward(speed + 25);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3319      	adds	r3, #25
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff6e 	bl	8000ad0 <B_Forward>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 52);
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <HAL_MspInit+0x5c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_MspInit+0x60>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_MspInit+0x60>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 fbb6 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM3_IRQHandler+0x10>)
 8000cbe:	f001 fd33 	bl	8002728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000c0 	.word	0x200000c0

08000ccc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <TIM4_IRQHandler+0x10>)
 8000cd2:	f001 fd29 	bl	8002728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000108 	.word	0x20000108

08000ce0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <USART3_IRQHandler+0x10>)
 8000ce6:	f002 fb87 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000150 	.word	0x20000150

08000cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b096      	sub	sp, #88	@ 0x58
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2220      	movs	r2, #32
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 f83f 	bl	8003dbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d3e:	4b50      	ldr	r3, [pc, #320]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d40:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <MX_TIM1_Init+0x184>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000d44:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d46:	2247      	movs	r2, #71	@ 0x47
 8000d48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d50:	4b4b      	ldr	r3, [pc, #300]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d52:	2263      	movs	r2, #99	@ 0x63
 8000d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d5c:	4b48      	ldr	r3, [pc, #288]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d68:	4845      	ldr	r0, [pc, #276]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d6a:	f001 fb05 	bl	8002378 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d74:	f7ff fe3f 	bl	80009f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d82:	4619      	mov	r1, r3
 8000d84:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d86:	f001 fe81 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d90:	f7ff fe31 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d94:	483a      	ldr	r0, [pc, #232]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000d96:	f001 fb3e 	bl	8002416 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000da0:	f7ff fe29 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000db0:	4619      	mov	r1, r3
 8000db2:	4833      	ldr	r0, [pc, #204]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000db4:	f002 fa0e 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dbe:	f7ff fe1a 	bl	80009f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	@ 0x60
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4826      	ldr	r0, [pc, #152]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000de8:	f001 fd8e 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000df2:	f7ff fe00 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4820      	ldr	r0, [pc, #128]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000e00:	f001 fd82 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e0a:	f7ff fdf4 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	2208      	movs	r2, #8
 8000e14:	4619      	mov	r1, r3
 8000e16:	481a      	ldr	r0, [pc, #104]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000e18:	f001 fd76 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e22:	f7ff fde8 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000e30:	f001 fd6a 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000e3a:	f7ff fddc 	bl	80009f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000e62:	f002 fa15 	bl	8003290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000e6c:	f7ff fdc3 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e70:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <MX_TIM1_Init+0x180>)
 8000e72:	f000 f999 	bl	80011a8 <HAL_TIM_MspPostInit>

}
 8000e76:	bf00      	nop
 8000e78:	3758      	adds	r7, #88	@ 0x58
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000030 	.word	0x20000030
 8000e84:	40012c00 	.word	0x40012c00

08000e88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b38      	ldr	r3, [pc, #224]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000ec0:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000ec2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000ece:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000ed0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee2:	482e      	ldr	r0, [pc, #184]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000ee4:	f001 fa48 	bl	8002378 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f7ff fd82 	bl	80009f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4827      	ldr	r0, [pc, #156]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f00:	f001 fdc4 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f0a:	f7ff fd74 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f0e:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f10:	f001 fa81 	bl	8002416 <HAL_TIM_PWM_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f1a:	f7ff fd6c 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481b      	ldr	r0, [pc, #108]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f2e:	f002 f951 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f38:	f7ff fd5d 	bl	80009f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	@ 0x60
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f54:	f001 fcd8 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f5e:	f7ff fd4a 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2204      	movs	r2, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f6a:	f001 fccd 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f74:	f7ff fd3f 	bl	80009f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f80:	f001 fcc2 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000f8a:	f7ff fd34 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM2_Init+0x114>)
 8000f90:	f000 f90a 	bl	80011a8 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3738      	adds	r7, #56	@ 0x38
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000078 	.word	0x20000078

08000fa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <MX_TIM3_Init+0x98>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fc4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fd2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fe4:	4813      	ldr	r0, [pc, #76]	@ (8001034 <MX_TIM3_Init+0x94>)
 8000fe6:	f001 f9c7 	bl	8002378 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ff0:	f7ff fd01 	bl	80009f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <MX_TIM3_Init+0x94>)
 8001002:	f001 fd43 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800100c:	f7ff fcf3 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_TIM3_Init+0x94>)
 800101e:	f002 f8d9 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001028:	f7ff fce5 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000c0 	.word	0x200000c0
 8001038:	40000400 	.word	0x40000400

0800103c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_TIM4_Init+0x94>)
 800105a:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <MX_TIM4_Init+0x98>)
 800105c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_TIM4_Init+0x94>)
 8001060:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001064:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_TIM4_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_TIM4_Init+0x94>)
 800106e:	2263      	movs	r2, #99	@ 0x63
 8001070:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_TIM4_Init+0x94>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_TIM4_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800107e:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <MX_TIM4_Init+0x94>)
 8001080:	f001 f97a 	bl	8002378 <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800108a:	f7ff fcb4 	bl	80009f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4619      	mov	r1, r3
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <MX_TIM4_Init+0x94>)
 800109c:	f001 fcf6 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f7ff fca6 	bl	80009f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_TIM4_Init+0x94>)
 80010b8:	f002 f88c 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80010c2:	f7ff fc98 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000108 	.word	0x20000108
 80010d4:	40000800 	.word	0x40000800

080010d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001198 <HAL_TIM_Base_MspInit+0xc0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10c      	bne.n	8001104 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ea:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a2b      	ldr	r2, [pc, #172]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 80010f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001102:	e044      	b.n	800118e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800110c:	d10c      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a22      	ldr	r2, [pc, #136]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b20      	ldr	r3, [pc, #128]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
}
 8001126:	e032      	b.n	800118e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <HAL_TIM_Base_MspInit+0xc8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d114      	bne.n	800115c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001132:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201d      	movs	r0, #29
 8001150:	f000 fa7d 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001154:	201d      	movs	r0, #29
 8001156:	f000 fa96 	bl	8001686 <HAL_NVIC_EnableIRQ>
}
 800115a:	e018      	b.n	800118e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_TIM_Base_MspInit+0xcc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d113      	bne.n	800118e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_TIM_Base_MspInit+0xc4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	201e      	movs	r0, #30
 8001184:	f000 fa63 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001188:	201e      	movs	r0, #30
 800118a:	f000 fa7c 	bl	8001686 <HAL_NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40000400 	.word	0x40000400
 80011a4:	40000800 	.word	0x40000800

080011a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <HAL_TIM_MspPostInit+0x98>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d119      	bne.n	80011fc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011e0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	@ (8001248 <HAL_TIM_MspPostInit+0xa0>)
 80011f6:	f000 fb13 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011fa:	e01c      	b.n	8001236 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001204:	d117      	bne.n	8001236 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_TIM_MspPostInit+0x9c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800121e:	2307      	movs	r3, #7
 8001220:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <HAL_TIM_MspPostInit+0xa0>)
 8001232:	f000 faf5 	bl	8001820 <HAL_GPIO_Init>
}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART3_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART3_UART_Init+0x4c>)
 8001284:	f002 f867 	bl	8003356 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f7ff fbb2 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000150 	.word	0x20000150
 800129c:	40004800 	.word	0x40004800

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a20      	ldr	r2, [pc, #128]	@ (800133c <HAL_UART_MspInit+0x9c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d139      	bne.n	8001334 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_UART_MspInit+0xa0>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <HAL_UART_MspInit+0xa4>)
 8001306:	f000 fa8b 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800130a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <HAL_UART_MspInit+0xa4>)
 8001320:	f000 fa7e 	bl	8001820 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2027      	movs	r0, #39	@ 0x27
 800132a:	f000 f990 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800132e:	2027      	movs	r0, #39	@ 0x27
 8001330:	f000 f9a9 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40004800 	.word	0x40004800
 8001340:	40021000 	.word	0x40021000
 8001344:	40010c00 	.word	0x40010c00

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff fcd4 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134e:	490c      	ldr	r1, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001364:	4c09      	ldr	r4, [pc, #36]	@ (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 fd2b 	bl	8003dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7fe ff2d 	bl	80001d4 <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800138c:	2000019c 	.word	0x2000019c

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f947 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fc24 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f95f 	bl	80016a2 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f927 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000008 	.word	0x20000008
 8001440:	20000198 	.word	0x20000198

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000198 	.word	0x20000198

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fff0 	bl	8001444 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffe0 	bl	8001444 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	@ (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff90 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff2d 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff42 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff35 	bl	8001504 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d008      	beq.n	80016e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e020      	b.n	8001726 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 020e 	bic.w	r2, r2, #14
 80016f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d005      	beq.n	8001754 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e051      	b.n	80017f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020e 	bic.w	r2, r2, #14
 8001762:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a22      	ldr	r2, [pc, #136]	@ (8001804 <HAL_DMA_Abort_IT+0xd4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d029      	beq.n	80017d2 <HAL_DMA_Abort_IT+0xa2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <HAL_DMA_Abort_IT+0xd8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <HAL_DMA_Abort_IT+0x9e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1f      	ldr	r2, [pc, #124]	@ (800180c <HAL_DMA_Abort_IT+0xdc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x98>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <HAL_DMA_Abort_IT+0xe0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d012      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x92>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <HAL_DMA_Abort_IT+0xe4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00a      	beq.n	80017bc <HAL_DMA_Abort_IT+0x8c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_DMA_Abort_IT+0xe8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <HAL_DMA_Abort_IT+0x86>
 80017b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017b4:	e00e      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ba:	e00b      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c0:	e008      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	e005      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017cc:	e002      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017ce:	2310      	movs	r3, #16
 80017d0:	e000      	b.n	80017d4 <HAL_DMA_Abort_IT+0xa4>
 80017d2:	2301      	movs	r3, #1
 80017d4:	4a11      	ldr	r2, [pc, #68]	@ (800181c <HAL_DMA_Abort_IT+0xec>)
 80017d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
    } 
  }
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020008 	.word	0x40020008
 8001808:	4002001c 	.word	0x4002001c
 800180c:	40020030 	.word	0x40020030
 8001810:	40020044 	.word	0x40020044
 8001814:	40020058 	.word	0x40020058
 8001818:	4002006c 	.word	0x4002006c
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	@ 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	e169      	b.n	8001b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001834:	2201      	movs	r2, #1
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8158 	bne.w	8001b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a9a      	ldr	r2, [pc, #616]	@ (8001ac0 <HAL_GPIO_Init+0x2a0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05e      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800185c:	4a98      	ldr	r2, [pc, #608]	@ (8001ac0 <HAL_GPIO_Init+0x2a0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d875      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001862:	4a98      	ldr	r2, [pc, #608]	@ (8001ac4 <HAL_GPIO_Init+0x2a4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d058      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001868:	4a96      	ldr	r2, [pc, #600]	@ (8001ac4 <HAL_GPIO_Init+0x2a4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d86f      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800186e:	4a96      	ldr	r2, [pc, #600]	@ (8001ac8 <HAL_GPIO_Init+0x2a8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d052      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001874:	4a94      	ldr	r2, [pc, #592]	@ (8001ac8 <HAL_GPIO_Init+0x2a8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d869      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800187a:	4a94      	ldr	r2, [pc, #592]	@ (8001acc <HAL_GPIO_Init+0x2ac>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04c      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001880:	4a92      	ldr	r2, [pc, #584]	@ (8001acc <HAL_GPIO_Init+0x2ac>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d863      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001886:	4a92      	ldr	r2, [pc, #584]	@ (8001ad0 <HAL_GPIO_Init+0x2b0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d046      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800188c:	4a90      	ldr	r2, [pc, #576]	@ (8001ad0 <HAL_GPIO_Init+0x2b0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d85d      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d82a      	bhi.n	80018ec <HAL_GPIO_Init+0xcc>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d859      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <HAL_GPIO_Init+0x80>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	080018f5 	.word	0x080018f5
 80018a8:	08001907 	.word	0x08001907
 80018ac:	08001949 	.word	0x08001949
 80018b0:	0800194f 	.word	0x0800194f
 80018b4:	0800194f 	.word	0x0800194f
 80018b8:	0800194f 	.word	0x0800194f
 80018bc:	0800194f 	.word	0x0800194f
 80018c0:	0800194f 	.word	0x0800194f
 80018c4:	0800194f 	.word	0x0800194f
 80018c8:	0800194f 	.word	0x0800194f
 80018cc:	0800194f 	.word	0x0800194f
 80018d0:	0800194f 	.word	0x0800194f
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	0800194f 	.word	0x0800194f
 80018dc:	0800194f 	.word	0x0800194f
 80018e0:	0800194f 	.word	0x0800194f
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001911 	.word	0x08001911
 80018ec:	4a79      	ldr	r2, [pc, #484]	@ (8001ad4 <HAL_GPIO_Init+0x2b4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f2:	e02c      	b.n	800194e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e029      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	3304      	adds	r3, #4
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e024      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	3308      	adds	r3, #8
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e01f      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	330c      	adds	r3, #12
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e01a      	b.n	8001950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001922:	2304      	movs	r3, #4
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e013      	b.n	8001950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	611a      	str	r2, [r3, #16]
          break;
 800193a:	e009      	b.n	8001950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	615a      	str	r2, [r3, #20]
          break;
 8001946:	e003      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x130>
          break;
 800194e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	@ 0xff
 8001954:	d801      	bhi.n	800195a <HAL_GPIO_Init+0x13a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e001      	b.n	800195e <HAL_GPIO_Init+0x13e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	@ 0xff
 8001964:	d802      	bhi.n	800196c <HAL_GPIO_Init+0x14c>
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x152>
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	3b08      	subs	r3, #8
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	210f      	movs	r1, #15
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b1 	beq.w	8001b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b8:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <HAL_GPIO_Init+0x2bc>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a40      	ldr	r2, [pc, #256]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1ec>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae4 <HAL_GPIO_Init+0x2c4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1e8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae8 <HAL_GPIO_Init+0x2c8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3d      	ldr	r2, [pc, #244]	@ (8001aec <HAL_GPIO_Init+0x2cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e0>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1ee>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1e:	492f      	ldr	r1, [pc, #188]	@ (8001adc <HAL_GPIO_Init+0x2bc>)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	492c      	ldr	r1, [pc, #176]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a46:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4928      	ldr	r1, [pc, #160]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a60:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4922      	ldr	r1, [pc, #136]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	491e      	ldr	r1, [pc, #120]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4918      	ldr	r1, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4914      	ldr	r1, [pc, #80]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d021      	beq.n	8001af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	490e      	ldr	r1, [pc, #56]	@ (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e021      	b.n	8001b02 <HAL_GPIO_Init+0x2e2>
 8001abe:	bf00      	nop
 8001ac0:	10320000 	.word	0x10320000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10220000 	.word	0x10220000
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10110000 	.word	0x10110000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40011400 	.word	0x40011400
 8001af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4909      	ldr	r1, [pc, #36]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f ae8e 	bne.w	8001834 <HAL_GPIO_Init+0x14>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	372c      	adds	r7, #44	@ 0x2c
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e001      	b.n	8001b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e272      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b78:	4b92      	ldr	r3, [pc, #584]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b84:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d112      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
 8001b90:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	4b89      	ldr	r3, [pc, #548]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d06c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x12c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d168      	bne.n	8001c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e24c      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x76>
 8001bc0:	4b80      	ldr	r3, [pc, #512]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a7f      	ldr	r2, [pc, #508]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e02e      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b78      	ldr	r3, [pc, #480]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a77      	ldr	r2, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0xbc>
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a71      	ldr	r2, [pc, #452]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001c14:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a67      	ldr	r2, [pc, #412]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc06 	bl	8001444 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fc02 	bl	8001444 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e200      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe4>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fbf2 	bl	8001444 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fbee 	bl	8001444 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1ec      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x10c>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9e:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
 8001caa:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1c0      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4939      	ldr	r1, [pc, #228]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b36      	ldr	r3, [pc, #216]	@ (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fba7 	bl	8001444 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fba3 	bl	8001444 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1a1      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4927      	ldr	r1, [pc, #156]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fb86 	bl	8001444 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fb82 	bl	8001444 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e180      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03a      	beq.n	8001ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fb66 	bl	8001444 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fb62 	bl	8001444 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e160      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 face 	bl	800233c <RCC_Delay>
 8001da0:	e01c      	b.n	8001ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fb4c 	bl	8001444 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb48 	bl	8001444 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d908      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e146      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	42420000 	.word	0x42420000
 8001dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b92      	ldr	r3, [pc, #584]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e9      	bne.n	8001db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a6 	beq.w	8001f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b8b      	ldr	r3, [pc, #556]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a87      	ldr	r2, [pc, #540]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b85      	ldr	r3, [pc, #532]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b82      	ldr	r3, [pc, #520]	@ (8002020 <HAL_RCC_OscConfig+0x4c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7e      	ldr	r2, [pc, #504]	@ (8002020 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb09 	bl	8001444 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff fb05 	bl	8001444 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	@ 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e103      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b75      	ldr	r3, [pc, #468]	@ (8002020 <HAL_RCC_OscConfig+0x4c8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x312>
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a6e      	ldr	r2, [pc, #440]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e02d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001e72:	4b6a      	ldr	r3, [pc, #424]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a69      	ldr	r2, [pc, #420]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b67      	ldr	r3, [pc, #412]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a66      	ldr	r2, [pc, #408]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x356>
 8001e94:	4b61      	ldr	r3, [pc, #388]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a60      	ldr	r2, [pc, #384]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001eae:	4b5b      	ldr	r3, [pc, #364]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b58      	ldr	r3, [pc, #352]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a57      	ldr	r2, [pc, #348]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fab9 	bl	8001444 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fab5 	bl	8001444 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0b1      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b4b      	ldr	r3, [pc, #300]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff faa3 	bl	8001444 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa9f 	bl	8001444 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e09b      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b40      	ldr	r3, [pc, #256]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8087 	beq.w	800204e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d061      	beq.n	8002010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d146      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b33      	ldr	r3, [pc, #204]	@ (8002024 <HAL_RCC_OscConfig+0x4cc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fa73 	bl	8001444 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fa6f 	bl	8001444 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e06d      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4921      	ldr	r1, [pc, #132]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a19      	ldr	r1, [r3, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	430b      	orrs	r3, r1
 8001fae:	491b      	ldr	r1, [pc, #108]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fa43 	bl	8001444 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff fa3f 	bl	8001444 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e03d      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46a>
 8001fe0:	e035      	b.n	800204e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fa2c 	bl	8001444 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff fa28 	bl	8001444 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e026      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x4c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x498>
 800200e:	e01e      	b.n	800204e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e019      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
 8002024:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_RCC_OscConfig+0x500>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d0      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4965      	ldr	r1, [pc, #404]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a58      	ldr	r2, [pc, #352]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d040      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e073      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06b      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4936      	ldr	r1, [pc, #216]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7ff f97a 	bl	8001444 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff f976 	bl	8001444 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e053      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d210      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4922      	ldr	r1, [pc, #136]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	@ (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <HAL_RCC_ClockConfig+0x1cc>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_ClockConfig+0x1d0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f8d8 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	08003e2c 	.word	0x08003e2c
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224a:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e027      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	613b      	str	r3, [r7, #16]
      break;
 8002264:	e027      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0c5b      	lsrs	r3, r3, #17
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	613b      	str	r3, [r7, #16]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	693b      	ldr	r3, [r7, #16]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	08003e44 	.word	0x08003e44
 80022d0:	08003e54 	.word	0x08003e54
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b02      	ldr	r3, [pc, #8]	@ (80022e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08003e3c 	.word	0x08003e3c

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffde 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08003e3c 	.word	0x08003e3c

0800233c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <RCC_Delay+0x34>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <RCC_Delay+0x38>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002358:	bf00      	nop
  }
  while (Delay --);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <RCC_Delay+0x1c>
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fe9a 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fc5c 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e041      	b.n	80024ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f839 	bl	80024b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f000 fc0d 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_TIM_PWM_Start+0x24>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e022      	b.n	8002532 <HAL_TIM_PWM_Start+0x6a>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d109      	bne.n	8002506 <HAL_TIM_PWM_Start+0x3e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e015      	b.n	8002532 <HAL_TIM_PWM_Start+0x6a>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d109      	bne.n	8002520 <HAL_TIM_PWM_Start+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e008      	b.n	8002532 <HAL_TIM_PWM_Start+0x6a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e05e      	b.n	80025f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_TIM_PWM_Start+0x82>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002548:	e013      	b.n	8002572 <HAL_TIM_PWM_Start+0xaa>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d104      	bne.n	800255a <HAL_TIM_PWM_Start+0x92>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002558:	e00b      	b.n	8002572 <HAL_TIM_PWM_Start+0xaa>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d104      	bne.n	800256a <HAL_TIM_PWM_Start+0xa2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002568:	e003      	b.n	8002572 <HAL_TIM_PWM_Start+0xaa>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2201      	movs	r2, #1
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fe06 	bl	800318c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1e      	ldr	r2, [pc, #120]	@ (8002600 <HAL_TIM_PWM_Start+0x138>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d107      	bne.n	800259a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_TIM_PWM_Start+0x138>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <HAL_TIM_PWM_Start+0xfa>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d009      	beq.n	80025c2 <HAL_TIM_PWM_Start+0xfa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <HAL_TIM_PWM_Start+0x13c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_TIM_PWM_Start+0xfa>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_TIM_PWM_Start+0x140>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d010      	beq.n	80025f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800

0800260c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800261c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800262c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d110      	bne.n	800265e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002642:	7b7b      	ldrb	r3, [r7, #13]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d001      	beq.n	800264c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e069      	b.n	8002720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800265c:	e031      	b.n	80026c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d110      	bne.n	8002686 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002664:	7bbb      	ldrb	r3, [r7, #14]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800266a:	7b3b      	ldrb	r3, [r7, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d001      	beq.n	8002674 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e055      	b.n	8002720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002684:	e01d      	b.n	80026c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d108      	bne.n	800269e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002698:	7b3b      	ldrb	r3, [r7, #12]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e03e      	b.n	8002720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_TIM_Encoder_Start+0xc4>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d008      	beq.n	80026e0 <HAL_TIM_Encoder_Start+0xd4>
 80026ce:	e00f      	b.n	80026f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2201      	movs	r2, #1
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd57 	bl	800318c <TIM_CCxChannelCmd>
      break;
 80026de:	e016      	b.n	800270e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fd4f 	bl	800318c <TIM_CCxChannelCmd>
      break;
 80026ee:	e00e      	b.n	800270e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fd47 	bl	800318c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	2104      	movs	r1, #4
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd40 	bl	800318c <TIM_CCxChannelCmd>
      break;
 800270c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0202 	mvn.w	r2, #2
 800275c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa63 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa56 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fa65 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d020      	beq.n	80027d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0204 	mvn.w	r2, #4
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa3d 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa30 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa3f 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0208 	mvn.w	r2, #8
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2204      	movs	r2, #4
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa17 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa0a 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fa19 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d020      	beq.n	8002870 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0210 	mvn.w	r2, #16
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2208      	movs	r2, #8
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9f1 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9e4 	bl	8002c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9f3 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9c3 	bl	8002c1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fd46 	bl	8003344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9c3 	bl	8002c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0220 	mvn.w	r2, #32
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fd19 	bl	8003332 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002922:	2302      	movs	r3, #2
 8002924:	e0ae      	b.n	8002a84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f200 809f 	bhi.w	8002a74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002936:	a201      	add	r2, pc, #4	@ (adr r2, 800293c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08002971 	.word	0x08002971
 8002940:	08002a75 	.word	0x08002a75
 8002944:	08002a75 	.word	0x08002a75
 8002948:	08002a75 	.word	0x08002a75
 800294c:	080029b1 	.word	0x080029b1
 8002950:	08002a75 	.word	0x08002a75
 8002954:	08002a75 	.word	0x08002a75
 8002958:	08002a75 	.word	0x08002a75
 800295c:	080029f3 	.word	0x080029f3
 8002960:	08002a75 	.word	0x08002a75
 8002964:	08002a75 	.word	0x08002a75
 8002968:	08002a75 	.word	0x08002a75
 800296c:	08002a33 	.word	0x08002a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f9ea 	bl	8002d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0208 	orr.w	r2, r2, #8
 800298a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6999      	ldr	r1, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	619a      	str	r2, [r3, #24]
      break;
 80029ae:	e064      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fa30 	bl	8002e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      break;
 80029f0:	e043      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fa79 	bl	8002ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0208 	orr.w	r2, r2, #8
 8002a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0204 	bic.w	r2, r2, #4
 8002a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
      break;
 8002a30:	e023      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fac3 	bl	8002fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	61da      	str	r2, [r3, #28]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      break;
 8002a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0b4      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x186>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ae0:	d03e      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ae6:	f200 8087 	bhi.w	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aee:	f000 8086 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x172>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af6:	d87f      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b70      	cmp	r3, #112	@ 0x70
 8002afa:	d01a      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0xa6>
 8002afc:	2b70      	cmp	r3, #112	@ 0x70
 8002afe:	d87b      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b60      	cmp	r3, #96	@ 0x60
 8002b02:	d050      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b04:	2b60      	cmp	r3, #96	@ 0x60
 8002b06:	d877      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b50      	cmp	r3, #80	@ 0x50
 8002b0a:	d03c      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xfa>
 8002b0c:	2b50      	cmp	r3, #80	@ 0x50
 8002b0e:	d873      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b40      	cmp	r3, #64	@ 0x40
 8002b12:	d058      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d86f      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b30      	cmp	r3, #48	@ 0x30
 8002b1a:	d064      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b1c:	2b30      	cmp	r3, #48	@ 0x30
 8002b1e:	d86b      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d060      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d867      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05c      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d05a      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b30:	e062      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b42:	f000 fb04 	bl	800314e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]
      break;
 8002b5e:	e04f      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	f000 faed 	bl	800314e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b82:	609a      	str	r2, [r3, #8]
      break;
 8002b84:	e03c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 fa64 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2150      	movs	r1, #80	@ 0x50
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fabb 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e02c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 fa82 	bl	80030bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2160      	movs	r1, #96	@ 0x60
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 faab 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e01c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 fa44 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2140      	movs	r1, #64	@ 0x40
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa9b 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002be4:	e00c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f000 fa92 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002bf6:	e003      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e000      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a2f      	ldr	r2, [pc, #188]	@ (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <TIM_Base_SetConfig+0xd4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d4c <TIM_Base_SetConfig+0xd8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <TIM_Base_SetConfig+0xd4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <TIM_Base_SetConfig+0xd8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <TIM_Base_SetConfig+0xd0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800

08002d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 0201 	bic.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <TIM_OC1_SetConfig+0xc8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10c      	bne.n	8002dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0308 	bic.w	r3, r3, #8
 8002db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	@ (8002e18 <TIM_OC1_SetConfig+0xc8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00

08002e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f023 0210 	bic.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0320 	bic.w	r3, r3, #32
 8002e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <TIM_OC2_SetConfig+0xd0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10d      	bne.n	8002e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <TIM_OC2_SetConfig+0xd0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d113      	bne.n	8002ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00

08002ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <TIM_OC3_SetConfig+0xd0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10d      	bne.n	8002f6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <TIM_OC3_SetConfig+0xd0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d113      	bne.n	8002f9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00

08002fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800300e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	031b      	lsls	r3, r3, #12
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0f      	ldr	r2, [pc, #60]	@ (800305c <TIM_OC4_SetConfig+0x98>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d109      	bne.n	8003038 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800302a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00

08003060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 030a 	bic.w	r3, r3, #10
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0210 	bic.w	r2, r3, #16
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	031b      	lsls	r3, r3, #12
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	f043 0307 	orr.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	431a      	orrs	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4313      	orrs	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	609a      	str	r2, [r3, #8]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e046      	b.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003238:	d009      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a10      	ldr	r2, [pc, #64]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10c      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e03d      	b.n	8003328 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e042      	b.n	80033ee <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd ff8f 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2224      	movs	r2, #36	@ 0x24
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fc80 	bl	8003ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0ba      	sub	sp, #232	@ 0xe8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_UART_IRQHandler+0x66>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fb63 	bl	8003b22 <UART_Receive_IT>
      return;
 800345c:	e25b      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80de 	beq.w	8003624 <HAL_UART_IRQHandler+0x22c>
 8003468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80d1 	beq.w	8003624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_UART_IRQHandler+0xae>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_UART_IRQHandler+0xd2>
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_UART_IRQHandler+0xf6>
 80034d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d011      	beq.n	800351e <HAL_UART_IRQHandler+0x126>
 80034fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 81f2 	beq.w	800390c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_UART_IRQHandler+0x14e>
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 faee 	bl	8003b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_UART_IRQHandler+0x17a>
 800356a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04f      	beq.n	8003612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9f8 	bl	8003968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d041      	beq.n	800360a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3314      	adds	r3, #20
 800358c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800359c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1d9      	bne.n	8003586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d013      	beq.n	8003602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	4a7e      	ldr	r2, [pc, #504]	@ (80037d8 <HAL_UART_IRQHandler+0x3e0>)
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe f8a2 	bl	8001730 <HAL_DMA_Abort_IT>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035fc:	4610      	mov	r0, r2
 80035fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e00e      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f99c 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e00a      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f998 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e006      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f994 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800361e:	e175      	b.n	800390c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	bf00      	nop
    return;
 8003622:	e173      	b.n	800390c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 814f 	bne.w	80038cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8148 	beq.w	80038cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8141 	beq.w	80038cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80b6 	beq.w	80037dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800367c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8145 	beq.w	8003910 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800368a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800368e:	429a      	cmp	r2, r3
 8003690:	f080 813e 	bcs.w	8003910 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800369a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f000 8088 	beq.w	80037b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1d9      	bne.n	80036a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3314      	adds	r3, #20
 80036fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003718:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800371c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003720:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800372a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e1      	bne.n	80036f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3314      	adds	r3, #20
 8003736:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3314      	adds	r3, #20
 8003750:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003754:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003756:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800375a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e3      	bne.n	8003730 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003788:	f023 0310 	bic.w	r3, r3, #16
 800378c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800379a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800379c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd ff81 	bl	80016ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8bf 	bl	8003952 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d4:	e09c      	b.n	8003910 <HAL_UART_IRQHandler+0x518>
 80037d6:	bf00      	nop
 80037d8:	08003a2d 	.word	0x08003a2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808e 	beq.w	8003914 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8089 	beq.w	8003914 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003826:	647a      	str	r2, [r7, #68]	@ 0x44
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800382c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	623b      	str	r3, [r7, #32]
   return(result);
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800385e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e3      	bne.n	800383a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038a4:	61fa      	str	r2, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	617b      	str	r3, [r7, #20]
   return(result);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e3      	bne.n	8003880 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f844 	bl	8003952 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038ca:	e023      	b.n	8003914 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_UART_IRQHandler+0x4f4>
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8b5 	bl	8003a54 <UART_Transmit_IT>
    return;
 80038ea:	e014      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <HAL_UART_IRQHandler+0x51e>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8f4 	bl	8003af2 <UART_EndTransmit_IT>
    return;
 800390a:	e004      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
    return;
 800390c:	bf00      	nop
 800390e:	e002      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
      return;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
      return;
 8003914:	bf00      	nop
  }
}
 8003916:	37e8      	adds	r7, #232	@ 0xe8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b095      	sub	sp, #84	@ 0x54
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003990:	643a      	str	r2, [r7, #64]	@ 0x40
 8003992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003996:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e5      	bne.n	80039a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d119      	bne.n	8003a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f023 0310 	bic.w	r3, r3, #16
 80039f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a00:	61ba      	str	r2, [r7, #24]
 8003a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a22:	bf00      	nop
 8003a24:	3754      	adds	r7, #84	@ 0x54
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff ff7a 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b21      	cmp	r3, #33	@ 0x21
 8003a66:	d13e      	bne.n	8003ae6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a70:	d114      	bne.n	8003a9c <UART_Transmit_IT+0x48>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d110      	bne.n	8003a9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]
 8003a9a:	e008      	b.n	8003aae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	1c59      	adds	r1, r3, #1
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6211      	str	r1, [r2, #32]
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4619      	mov	r1, r3
 8003abc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ad0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ae0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff02 	bl	800391c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08c      	sub	sp, #48	@ 0x30
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b22      	cmp	r3, #34	@ 0x22
 8003b34:	f040 80ae 	bne.w	8003c94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b40:	d117      	bne.n	8003b72 <UART_Receive_IT+0x50>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b70:	e026      	b.n	8003bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b84:	d007      	beq.n	8003b96 <UART_Receive_IT+0x74>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <UART_Receive_IT+0x82>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e008      	b.n	8003bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d15d      	bne.n	8003c90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0220 	bic.w	r2, r2, #32
 8003be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d135      	bne.n	8003c86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c40:	623a      	str	r2, [r7, #32]
 8003c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	69f9      	ldr	r1, [r7, #28]
 8003c46:	6a3a      	ldr	r2, [r7, #32]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d10a      	bne.n	8003c78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe67 	bl	8003952 <HAL_UARTEx_RxEventCallback>
 8003c84:	e002      	b.n	8003c8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fe51 	bl	800392e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e002      	b.n	8003c96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3730      	adds	r7, #48	@ 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cda:	f023 030c 	bic.w	r3, r3, #12
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <UART_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7fe fb04 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	e002      	b.n	8003d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe faec 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	0119      	lsls	r1, r3, #4
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2064      	movs	r0, #100	@ 0x64
 8003d56:	fb00 f303 	mul.w	r3, r0, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	@ 0x32
 8003d60:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d6c:	4419      	add	r1, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d86:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2064      	movs	r0, #100	@ 0x64
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	@ 0x32
 8003d98:	4a07      	ldr	r2, [pc, #28]	@ (8003db8 <UART_SetConfig+0x118>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	440a      	add	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013800 	.word	0x40013800
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <memset>:
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4402      	add	r2, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memset+0xa>
 8003dc4:	4770      	bx	lr
 8003dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dca:	e7f9      	b.n	8003dc0 <memset+0x4>

08003dcc <__libc_init_array>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	2600      	movs	r6, #0
 8003dd0:	4d0c      	ldr	r5, [pc, #48]	@ (8003e04 <__libc_init_array+0x38>)
 8003dd2:	4c0d      	ldr	r4, [pc, #52]	@ (8003e08 <__libc_init_array+0x3c>)
 8003dd4:	1b64      	subs	r4, r4, r5
 8003dd6:	10a4      	asrs	r4, r4, #2
 8003dd8:	42a6      	cmp	r6, r4
 8003dda:	d109      	bne.n	8003df0 <__libc_init_array+0x24>
 8003ddc:	f000 f81a 	bl	8003e14 <_init>
 8003de0:	2600      	movs	r6, #0
 8003de2:	4d0a      	ldr	r5, [pc, #40]	@ (8003e0c <__libc_init_array+0x40>)
 8003de4:	4c0a      	ldr	r4, [pc, #40]	@ (8003e10 <__libc_init_array+0x44>)
 8003de6:	1b64      	subs	r4, r4, r5
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	42a6      	cmp	r6, r4
 8003dec:	d105      	bne.n	8003dfa <__libc_init_array+0x2e>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df4:	4798      	blx	r3
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7ee      	b.n	8003dd8 <__libc_init_array+0xc>
 8003dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfe:	4798      	blx	r3
 8003e00:	3601      	adds	r6, #1
 8003e02:	e7f2      	b.n	8003dea <__libc_init_array+0x1e>
 8003e04:	08003e58 	.word	0x08003e58
 8003e08:	08003e58 	.word	0x08003e58
 8003e0c:	08003e58 	.word	0x08003e58
 8003e10:	08003e5c 	.word	0x08003e5c

08003e14 <_init>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr

08003e20 <_fini>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

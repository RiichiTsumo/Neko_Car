
Neko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055cc  080055cc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000060  08005630  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08005630  00007538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d123  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cc  00000000  00000000  000141a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00016478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2f  00000000  00000000  00017188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca8  00000000  00000000  00017bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f544  00000000  00000000  0002f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d68  00000000  00000000  0003eda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  000c8b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000cc744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800548c 	.word	0x0800548c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800548c 	.word	0x0800548c

0800014c <setjmp>:
 800014c:	46ec      	mov	ip, sp
 800014e:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000152:	f04f 0000 	mov.w	r0, #0
 8000156:	4770      	bx	lr

08000158 <longjmp>:
 8000158:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800015c:	46e5      	mov	sp, ip
 800015e:	0008      	movs	r0, r1
 8000160:	bf08      	it	eq
 8000162:	2001      	moveq	r0, #1
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop

08000168 <strlen>:
 8000168:	4603      	mov	r3, r0
 800016a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016e:	2a00      	cmp	r2, #0
 8000170:	d1fb      	bne.n	800016a <strlen+0x2>
 8000172:	1a18      	subs	r0, r3, r0
 8000174:	3801      	subs	r0, #1
 8000176:	4770      	bx	lr

08000178 <__aeabi_fmul>:
 8000178:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800017c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000180:	bf1e      	ittt	ne
 8000182:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000186:	ea92 0f0c 	teqne	r2, ip
 800018a:	ea93 0f0c 	teqne	r3, ip
 800018e:	d06f      	beq.n	8000270 <__aeabi_fmul+0xf8>
 8000190:	441a      	add	r2, r3
 8000192:	ea80 0c01 	eor.w	ip, r0, r1
 8000196:	0240      	lsls	r0, r0, #9
 8000198:	bf18      	it	ne
 800019a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019e:	d01e      	beq.n	80001de <__aeabi_fmul+0x66>
 80001a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001ac:	fba0 3101 	umull	r3, r1, r0, r1
 80001b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b8:	bf3e      	ittt	cc
 80001ba:	0049      	lslcc	r1, r1, #1
 80001bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c0:	005b      	lslcc	r3, r3, #1
 80001c2:	ea40 0001 	orr.w	r0, r0, r1
 80001c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ca:	2afd      	cmp	r2, #253	@ 0xfd
 80001cc:	d81d      	bhi.n	800020a <__aeabi_fmul+0x92>
 80001ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d6:	bf08      	it	eq
 80001d8:	f020 0001 	biceq.w	r0, r0, #1
 80001dc:	4770      	bx	lr
 80001de:	f090 0f00 	teq	r0, #0
 80001e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001e6:	bf08      	it	eq
 80001e8:	0249      	lsleq	r1, r1, #9
 80001ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f2:	3a7f      	subs	r2, #127	@ 0x7f
 80001f4:	bfc2      	ittt	gt
 80001f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fe:	4770      	bxgt	lr
 8000200:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000204:	f04f 0300 	mov.w	r3, #0
 8000208:	3a01      	subs	r2, #1
 800020a:	dc5d      	bgt.n	80002c8 <__aeabi_fmul+0x150>
 800020c:	f112 0f19 	cmn.w	r2, #25
 8000210:	bfdc      	itt	le
 8000212:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000216:	4770      	bxle	lr
 8000218:	f1c2 0200 	rsb	r2, r2, #0
 800021c:	0041      	lsls	r1, r0, #1
 800021e:	fa21 f102 	lsr.w	r1, r1, r2
 8000222:	f1c2 0220 	rsb	r2, r2, #32
 8000226:	fa00 fc02 	lsl.w	ip, r0, r2
 800022a:	ea5f 0031 	movs.w	r0, r1, rrx
 800022e:	f140 0000 	adc.w	r0, r0, #0
 8000232:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000236:	bf08      	it	eq
 8000238:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800023c:	4770      	bx	lr
 800023e:	f092 0f00 	teq	r2, #0
 8000242:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0040      	lsleq	r0, r0, #1
 800024a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800024e:	3a01      	subeq	r2, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xce>
 8000252:	ea40 000c 	orr.w	r0, r0, ip
 8000256:	f093 0f00 	teq	r3, #0
 800025a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0049      	lsleq	r1, r1, #1
 8000262:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000266:	3b01      	subeq	r3, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xe6>
 800026a:	ea41 010c 	orr.w	r1, r1, ip
 800026e:	e78f      	b.n	8000190 <__aeabi_fmul+0x18>
 8000270:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000274:	ea92 0f0c 	teq	r2, ip
 8000278:	bf18      	it	ne
 800027a:	ea93 0f0c 	teqne	r3, ip
 800027e:	d00a      	beq.n	8000296 <__aeabi_fmul+0x11e>
 8000280:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000284:	bf18      	it	ne
 8000286:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800028a:	d1d8      	bne.n	800023e <__aeabi_fmul+0xc6>
 800028c:	ea80 0001 	eor.w	r0, r0, r1
 8000290:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	bf17      	itett	ne
 800029c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002a0:	4608      	moveq	r0, r1
 80002a2:	f091 0f00 	teqne	r1, #0
 80002a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002aa:	d014      	beq.n	80002d6 <__aeabi_fmul+0x15e>
 80002ac:	ea92 0f0c 	teq	r2, ip
 80002b0:	d101      	bne.n	80002b6 <__aeabi_fmul+0x13e>
 80002b2:	0242      	lsls	r2, r0, #9
 80002b4:	d10f      	bne.n	80002d6 <__aeabi_fmul+0x15e>
 80002b6:	ea93 0f0c 	teq	r3, ip
 80002ba:	d103      	bne.n	80002c4 <__aeabi_fmul+0x14c>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	bf18      	it	ne
 80002c0:	4608      	movne	r0, r1
 80002c2:	d108      	bne.n	80002d6 <__aeabi_fmul+0x15e>
 80002c4:	ea80 0001 	eor.w	r0, r0, r1
 80002c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d4:	4770      	bx	lr
 80002d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	@ 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__gesf2>:
 80004fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000500:	e006      	b.n	8000510 <__cmpsf2+0x4>
 8000502:	bf00      	nop

08000504 <__lesf2>:
 8000504:	f04f 0c01 	mov.w	ip, #1
 8000508:	e002      	b.n	8000510 <__cmpsf2+0x4>
 800050a:	bf00      	nop

0800050c <__cmpsf2>:
 800050c:	f04f 0c01 	mov.w	ip, #1
 8000510:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000514:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000518:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800051c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000520:	bf18      	it	ne
 8000522:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000526:	d011      	beq.n	800054c <__cmpsf2+0x40>
 8000528:	b001      	add	sp, #4
 800052a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800052e:	bf18      	it	ne
 8000530:	ea90 0f01 	teqne	r0, r1
 8000534:	bf58      	it	pl
 8000536:	ebb2 0003 	subspl.w	r0, r2, r3
 800053a:	bf88      	it	hi
 800053c:	17c8      	asrhi	r0, r1, #31
 800053e:	bf38      	it	cc
 8000540:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000544:	bf18      	it	ne
 8000546:	f040 0001 	orrne.w	r0, r0, #1
 800054a:	4770      	bx	lr
 800054c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000550:	d102      	bne.n	8000558 <__cmpsf2+0x4c>
 8000552:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000556:	d105      	bne.n	8000564 <__cmpsf2+0x58>
 8000558:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800055c:	d1e4      	bne.n	8000528 <__cmpsf2+0x1c>
 800055e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000562:	d0e1      	beq.n	8000528 <__cmpsf2+0x1c>
 8000564:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__aeabi_cfrcmple>:
 800056c:	4684      	mov	ip, r0
 800056e:	4608      	mov	r0, r1
 8000570:	4661      	mov	r1, ip
 8000572:	e7ff      	b.n	8000574 <__aeabi_cfcmpeq>

08000574 <__aeabi_cfcmpeq>:
 8000574:	b50f      	push	{r0, r1, r2, r3, lr}
 8000576:	f7ff ffc9 	bl	800050c <__cmpsf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000584 <__aeabi_fcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cfcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_fcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cfcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_fcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cfcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_fcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffd2 	bl	800056c <__aeabi_cfrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_fcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc8 	bl	800056c <__aeabi_cfrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2iz>:
 80005e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005f0:	d30f      	bcc.n	8000612 <__aeabi_f2iz+0x2a>
 80005f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005fa:	d90d      	bls.n	8000618 <__aeabi_f2iz+0x30>
 80005fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000604:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000608:	fa23 f002 	lsr.w	r0, r3, r2
 800060c:	bf18      	it	ne
 800060e:	4240      	negne	r0, r0
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr
 8000618:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800061c:	d101      	bne.n	8000622 <__aeabi_f2iz+0x3a>
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	d105      	bne.n	800062e <__aeabi_f2iz+0x46>
 8000622:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000626:	bf08      	it	eq
 8000628:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr

08000634 <selfrel_offset31>:
 8000634:	6803      	ldr	r3, [r0, #0]
 8000636:	005a      	lsls	r2, r3, #1
 8000638:	bf4c      	ite	mi
 800063a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800063e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000642:	4418      	add	r0, r3
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <search_EIT_table>:
 8000648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800064c:	b341      	cbz	r1, 80006a0 <search_EIT_table+0x58>
 800064e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000652:	4605      	mov	r5, r0
 8000654:	4616      	mov	r6, r2
 8000656:	4647      	mov	r7, r8
 8000658:	2400      	movs	r4, #0
 800065a:	19e1      	adds	r1, r4, r7
 800065c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000660:	1049      	asrs	r1, r1, #1
 8000662:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8000666:	4648      	mov	r0, r9
 8000668:	f7ff ffe4 	bl	8000634 <selfrel_offset31>
 800066c:	4588      	cmp	r8, r1
 800066e:	4603      	mov	r3, r0
 8000670:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8000674:	d00e      	beq.n	8000694 <search_EIT_table+0x4c>
 8000676:	f102 0008 	add.w	r0, r2, #8
 800067a:	42b3      	cmp	r3, r6
 800067c:	4428      	add	r0, r5
 800067e:	d80b      	bhi.n	8000698 <search_EIT_table+0x50>
 8000680:	f7ff ffd8 	bl	8000634 <selfrel_offset31>
 8000684:	3801      	subs	r0, #1
 8000686:	42b0      	cmp	r0, r6
 8000688:	f101 0401 	add.w	r4, r1, #1
 800068c:	d3e5      	bcc.n	800065a <search_EIT_table+0x12>
 800068e:	4648      	mov	r0, r9
 8000690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000694:	42b0      	cmp	r0, r6
 8000696:	d9fa      	bls.n	800068e <search_EIT_table+0x46>
 8000698:	428c      	cmp	r4, r1
 800069a:	d001      	beq.n	80006a0 <search_EIT_table+0x58>
 800069c:	1e4f      	subs	r7, r1, #1
 800069e:	e7dc      	b.n	800065a <search_EIT_table+0x12>
 80006a0:	f04f 0900 	mov.w	r9, #0
 80006a4:	4648      	mov	r0, r9
 80006a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006aa:	bf00      	nop

080006ac <__gnu_unwind_get_pr_addr>:
 80006ac:	2801      	cmp	r0, #1
 80006ae:	d007      	beq.n	80006c0 <__gnu_unwind_get_pr_addr+0x14>
 80006b0:	2802      	cmp	r0, #2
 80006b2:	d007      	beq.n	80006c4 <__gnu_unwind_get_pr_addr+0x18>
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf0c      	ite	eq
 80006ba:	4618      	moveq	r0, r3
 80006bc:	2000      	movne	r0, #0
 80006be:	4770      	bx	lr
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <__gnu_unwind_get_pr_addr+0x20>)
 80006c2:	4770      	bx	lr
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <__gnu_unwind_get_pr_addr+0x24>)
 80006c6:	4770      	bx	lr
 80006c8:	08000d89 	.word	0x08000d89
 80006cc:	08000d8d 	.word	0x08000d8d
 80006d0:	08000d91 	.word	0x08000d91

080006d4 <get_eit_entry>:
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <get_eit_entry+0x88>)
 80006d8:	4604      	mov	r4, r0
 80006da:	b083      	sub	sp, #12
 80006dc:	1e8d      	subs	r5, r1, #2
 80006de:	b31b      	cbz	r3, 8000728 <get_eit_entry+0x54>
 80006e0:	4628      	mov	r0, r5
 80006e2:	a901      	add	r1, sp, #4
 80006e4:	f3af 8000 	nop.w
 80006e8:	b388      	cbz	r0, 800074e <get_eit_entry+0x7a>
 80006ea:	9901      	ldr	r1, [sp, #4]
 80006ec:	462a      	mov	r2, r5
 80006ee:	f7ff ffab 	bl	8000648 <search_EIT_table>
 80006f2:	4601      	mov	r1, r0
 80006f4:	b358      	cbz	r0, 800074e <get_eit_entry+0x7a>
 80006f6:	f7ff ff9d 	bl	8000634 <selfrel_offset31>
 80006fa:	684b      	ldr	r3, [r1, #4]
 80006fc:	64a0      	str	r0, [r4, #72]	@ 0x48
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d028      	beq.n	8000754 <get_eit_entry+0x80>
 8000702:	2b00      	cmp	r3, #0
 8000704:	f101 0004 	add.w	r0, r1, #4
 8000708:	db1f      	blt.n	800074a <get_eit_entry+0x76>
 800070a:	f7ff ff93 	bl	8000634 <selfrel_offset31>
 800070e:	2300      	movs	r3, #0
 8000710:	6523      	str	r3, [r4, #80]	@ 0x50
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0d      	blt.n	8000736 <get_eit_entry+0x62>
 800071a:	f7ff ff8b 	bl	8000634 <selfrel_offset31>
 800071e:	4603      	mov	r3, r0
 8000720:	2000      	movs	r0, #0
 8000722:	6123      	str	r3, [r4, #16]
 8000724:	b003      	add	sp, #12
 8000726:	bd30      	pop	{r4, r5, pc}
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <get_eit_entry+0x8c>)
 800072a:	490e      	ldr	r1, [pc, #56]	@ (8000764 <get_eit_entry+0x90>)
 800072c:	4618      	mov	r0, r3
 800072e:	1ac9      	subs	r1, r1, r3
 8000730:	10c9      	asrs	r1, r1, #3
 8000732:	9101      	str	r1, [sp, #4]
 8000734:	e7da      	b.n	80006ec <get_eit_entry+0x18>
 8000736:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800073a:	f7ff ffb7 	bl	80006ac <__gnu_unwind_get_pr_addr>
 800073e:	4603      	mov	r3, r0
 8000740:	b128      	cbz	r0, 800074e <get_eit_entry+0x7a>
 8000742:	2000      	movs	r0, #0
 8000744:	6123      	str	r3, [r4, #16]
 8000746:	b003      	add	sp, #12
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	2301      	movs	r3, #1
 800074c:	e7e0      	b.n	8000710 <get_eit_entry+0x3c>
 800074e:	2300      	movs	r3, #0
 8000750:	2009      	movs	r0, #9
 8000752:	e7e6      	b.n	8000722 <get_eit_entry+0x4e>
 8000754:	2300      	movs	r3, #0
 8000756:	2005      	movs	r0, #5
 8000758:	e7e3      	b.n	8000722 <get_eit_entry+0x4e>
 800075a:	bf00      	nop
 800075c:	00000000 	.word	0x00000000
 8000760:	0800550c 	.word	0x0800550c
 8000764:	080055cc 	.word	0x080055cc

08000768 <restore_non_core_regs>:
 8000768:	6803      	ldr	r3, [r0, #0]
 800076a:	b510      	push	{r4, lr}
 800076c:	07da      	lsls	r2, r3, #31
 800076e:	4604      	mov	r4, r0
 8000770:	d406      	bmi.n	8000780 <restore_non_core_regs+0x18>
 8000772:	079b      	lsls	r3, r3, #30
 8000774:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8000778:	d509      	bpl.n	800078e <restore_non_core_regs+0x26>
 800077a:	f000 fc6f 	bl	800105c <__gnu_Unwind_Restore_VFP_D>
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	0759      	lsls	r1, r3, #29
 8000782:	d509      	bpl.n	8000798 <restore_non_core_regs+0x30>
 8000784:	071a      	lsls	r2, r3, #28
 8000786:	d50e      	bpl.n	80007a6 <restore_non_core_regs+0x3e>
 8000788:	06db      	lsls	r3, r3, #27
 800078a:	d513      	bpl.n	80007b4 <restore_non_core_regs+0x4c>
 800078c:	bd10      	pop	{r4, pc}
 800078e:	f000 fc5d 	bl	800104c <__gnu_Unwind_Restore_VFP>
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	0759      	lsls	r1, r3, #29
 8000796:	d4f5      	bmi.n	8000784 <restore_non_core_regs+0x1c>
 8000798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800079c:	f000 fc66 	bl	800106c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	071a      	lsls	r2, r3, #28
 80007a4:	d4f0      	bmi.n	8000788 <restore_non_core_regs+0x20>
 80007a6:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80007aa:	f000 fc67 	bl	800107c <__gnu_Unwind_Restore_WMMXD>
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	06db      	lsls	r3, r3, #27
 80007b2:	d4eb      	bmi.n	800078c <restore_non_core_regs+0x24>
 80007b4:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 80007b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007bc:	f000 bca2 	b.w	8001104 <__gnu_Unwind_Restore_WMMXC>

080007c0 <__gnu_unwind_24bit.constprop.0>:
 80007c0:	2009      	movs	r0, #9
 80007c2:	4770      	bx	lr

080007c4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80007c4:	4603      	mov	r3, r0
 80007c6:	6800      	ldr	r0, [r0, #0]
 80007c8:	b100      	cbz	r0, 80007cc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80007ca:	4418      	add	r0, r3
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <_Unwind_DebugHook>:
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <unwind_phase2>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	4604      	mov	r4, r0
 80007d8:	460e      	mov	r6, r1
 80007da:	4620      	mov	r0, r4
 80007dc:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80007de:	f7ff ff79 	bl	80006d4 <get_eit_entry>
 80007e2:	4605      	mov	r5, r0
 80007e4:	b998      	cbnz	r0, 800080e <unwind_phase2+0x3a>
 80007e6:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 80007ea:	4632      	mov	r2, r6
 80007ec:	4621      	mov	r1, r4
 80007ee:	2001      	movs	r0, #1
 80007f0:	6923      	ldr	r3, [r4, #16]
 80007f2:	f8c4 c014 	str.w	ip, [r4, #20]
 80007f6:	4798      	blx	r3
 80007f8:	2808      	cmp	r0, #8
 80007fa:	d0ee      	beq.n	80007da <unwind_phase2+0x6>
 80007fc:	2807      	cmp	r0, #7
 80007fe:	d106      	bne.n	800080e <unwind_phase2+0x3a>
 8000800:	4628      	mov	r0, r5
 8000802:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000804:	f7ff ffe4 	bl	80007d0 <_Unwind_DebugHook>
 8000808:	1d30      	adds	r0, r6, #4
 800080a:	f000 fc13 	bl	8001034 <__restore_core_regs>
 800080e:	f004 fde3 	bl	80053d8 <abort>
 8000812:	bf00      	nop

08000814 <unwind_phase2_forced>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	f04f 0a00 	mov.w	sl, #0
 800081c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8000820:	f10d 0e0c 	add.w	lr, sp, #12
 8000824:	f101 0c04 	add.w	ip, r1, #4
 8000828:	68c7      	ldr	r7, [r0, #12]
 800082a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800082e:	4606      	mov	r6, r0
 8000830:	4614      	mov	r4, r2
 8000832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000836:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800083a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800083e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000842:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000846:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800084a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800084e:	ad02      	add	r5, sp, #8
 8000850:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000854:	f8c5 a000 	str.w	sl, [r5]
 8000858:	e021      	b.n	800089e <unwind_phase2_forced+0x8a>
 800085a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800085c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000860:	4629      	mov	r1, r5
 8000862:	6173      	str	r3, [r6, #20]
 8000864:	a87a      	add	r0, sp, #488	@ 0x1e8
 8000866:	f004 fe03 	bl	8005470 <memcpy>
 800086a:	4631      	mov	r1, r6
 800086c:	4650      	mov	r0, sl
 800086e:	6933      	ldr	r3, [r6, #16]
 8000870:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8000872:	4798      	blx	r3
 8000874:	9c88      	ldr	r4, [sp, #544]	@ 0x220
 8000876:	4682      	mov	sl, r0
 8000878:	646c      	str	r4, [r5, #68]	@ 0x44
 800087a:	4633      	mov	r3, r6
 800087c:	4632      	mov	r2, r6
 800087e:	4649      	mov	r1, r9
 8000880:	2001      	movs	r0, #1
 8000882:	e9cd 5800 	strd	r5, r8, [sp]
 8000886:	47b8      	blx	r7
 8000888:	4604      	mov	r4, r0
 800088a:	bb30      	cbnz	r0, 80008da <unwind_phase2_forced+0xc6>
 800088c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000890:	4628      	mov	r0, r5
 8000892:	a97a      	add	r1, sp, #488	@ 0x1e8
 8000894:	f004 fdec 	bl	8005470 <memcpy>
 8000898:	f1ba 0f08 	cmp.w	sl, #8
 800089c:	d11a      	bne.n	80008d4 <unwind_phase2_forced+0xc0>
 800089e:	4630      	mov	r0, r6
 80008a0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80008a2:	f7ff ff17 	bl	80006d4 <get_eit_entry>
 80008a6:	f104 0909 	add.w	r9, r4, #9
 80008aa:	fa5f fa89 	uxtb.w	sl, r9
 80008ae:	4604      	mov	r4, r0
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d0d2      	beq.n	800085a <unwind_phase2_forced+0x46>
 80008b4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80008b6:	4633      	mov	r3, r6
 80008b8:	6469      	str	r1, [r5, #68]	@ 0x44
 80008ba:	4632      	mov	r2, r6
 80008bc:	2001      	movs	r0, #1
 80008be:	e9cd 5800 	strd	r5, r8, [sp]
 80008c2:	f04a 0110 	orr.w	r1, sl, #16
 80008c6:	47b8      	blx	r7
 80008c8:	b938      	cbnz	r0, 80008da <unwind_phase2_forced+0xc6>
 80008ca:	4620      	mov	r0, r4
 80008cc:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	f1ba 0f07 	cmp.w	sl, #7
 80008d8:	d005      	beq.n	80008e6 <unwind_phase2_forced+0xd2>
 80008da:	2409      	movs	r4, #9
 80008dc:	4620      	mov	r0, r4
 80008de:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e6:	4620      	mov	r0, r4
 80008e8:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80008ea:	f7ff ff71 	bl	80007d0 <_Unwind_DebugHook>
 80008ee:	a803      	add	r0, sp, #12
 80008f0:	f000 fba0 	bl	8001034 <__restore_core_regs>

080008f4 <_Unwind_GetCFA>:
 80008f4:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80008f6:	4770      	bx	lr

080008f8 <__gnu_Unwind_RaiseException>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	f04f 37ff 	mov.w	r7, #4294967295
 80008fe:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000900:	b0f9      	sub	sp, #484	@ 0x1e4
 8000902:	640b      	str	r3, [r1, #64]	@ 0x40
 8000904:	ac01      	add	r4, sp, #4
 8000906:	f101 0c04 	add.w	ip, r1, #4
 800090a:	460e      	mov	r6, r1
 800090c:	4605      	mov	r5, r0
 800090e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800091e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000920:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000928:	9700      	str	r7, [sp, #0]
 800092a:	e006      	b.n	800093a <__gnu_Unwind_RaiseException+0x42>
 800092c:	466a      	mov	r2, sp
 800092e:	4629      	mov	r1, r5
 8000930:	692b      	ldr	r3, [r5, #16]
 8000932:	4798      	blx	r3
 8000934:	2808      	cmp	r0, #8
 8000936:	4604      	mov	r4, r0
 8000938:	d108      	bne.n	800094c <__gnu_Unwind_RaiseException+0x54>
 800093a:	4628      	mov	r0, r5
 800093c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800093e:	f7ff fec9 	bl	80006d4 <get_eit_entry>
 8000942:	2800      	cmp	r0, #0
 8000944:	d0f2      	beq.n	800092c <__gnu_Unwind_RaiseException+0x34>
 8000946:	2009      	movs	r0, #9
 8000948:	b079      	add	sp, #484	@ 0x1e4
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	4668      	mov	r0, sp
 800094e:	f7ff ff0b 	bl	8000768 <restore_non_core_regs>
 8000952:	2c06      	cmp	r4, #6
 8000954:	d1f7      	bne.n	8000946 <__gnu_Unwind_RaiseException+0x4e>
 8000956:	4631      	mov	r1, r6
 8000958:	4628      	mov	r0, r5
 800095a:	f7ff ff3b 	bl	80007d4 <unwind_phase2>
 800095e:	bf00      	nop

08000960 <__gnu_Unwind_ForcedUnwind>:
 8000960:	b410      	push	{r4}
 8000962:	4614      	mov	r4, r2
 8000964:	6184      	str	r4, [r0, #24]
 8000966:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000968:	60c1      	str	r1, [r0, #12]
 800096a:	2200      	movs	r2, #0
 800096c:	641c      	str	r4, [r3, #64]	@ 0x40
 800096e:	4619      	mov	r1, r3
 8000970:	bc10      	pop	{r4}
 8000972:	e74f      	b.n	8000814 <unwind_phase2_forced>

08000974 <__gnu_Unwind_Resume>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	6943      	ldr	r3, [r0, #20]
 8000978:	68c6      	ldr	r6, [r0, #12]
 800097a:	640b      	str	r3, [r1, #64]	@ 0x40
 800097c:	b9ae      	cbnz	r6, 80009aa <__gnu_Unwind_Resume+0x36>
 800097e:	460a      	mov	r2, r1
 8000980:	6903      	ldr	r3, [r0, #16]
 8000982:	4604      	mov	r4, r0
 8000984:	460d      	mov	r5, r1
 8000986:	4601      	mov	r1, r0
 8000988:	2002      	movs	r0, #2
 800098a:	4798      	blx	r3
 800098c:	2807      	cmp	r0, #7
 800098e:	d005      	beq.n	800099c <__gnu_Unwind_Resume+0x28>
 8000990:	2808      	cmp	r0, #8
 8000992:	d10f      	bne.n	80009b4 <__gnu_Unwind_Resume+0x40>
 8000994:	4629      	mov	r1, r5
 8000996:	4620      	mov	r0, r4
 8000998:	f7ff ff1c 	bl	80007d4 <unwind_phase2>
 800099c:	4630      	mov	r0, r6
 800099e:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80009a0:	f7ff ff16 	bl	80007d0 <_Unwind_DebugHook>
 80009a4:	1d28      	adds	r0, r5, #4
 80009a6:	f000 fb45 	bl	8001034 <__restore_core_regs>
 80009aa:	2201      	movs	r2, #1
 80009ac:	f7ff ff32 	bl	8000814 <unwind_phase2_forced>
 80009b0:	f004 fd12 	bl	80053d8 <abort>
 80009b4:	f004 fd10 	bl	80053d8 <abort>

080009b8 <__gnu_Unwind_Resume_or_Rethrow>:
 80009b8:	68c2      	ldr	r2, [r0, #12]
 80009ba:	b12a      	cbz	r2, 80009c8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80009bc:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 80009c0:	2200      	movs	r2, #0
 80009c2:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 80009c6:	e725      	b.n	8000814 <unwind_phase2_forced>
 80009c8:	e796      	b.n	80008f8 <__gnu_Unwind_RaiseException>
 80009ca:	bf00      	nop

080009cc <_Unwind_Complete>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <_Unwind_DeleteException>:
 80009d0:	6883      	ldr	r3, [r0, #8]
 80009d2:	4601      	mov	r1, r0
 80009d4:	b10b      	cbz	r3, 80009da <_Unwind_DeleteException+0xa>
 80009d6:	2001      	movs	r0, #1
 80009d8:	4718      	bx	r3
 80009da:	4770      	bx	lr

080009dc <_Unwind_VRS_Get>:
 80009dc:	2901      	cmp	r1, #1
 80009de:	d010      	beq.n	8000a02 <_Unwind_VRS_Get+0x26>
 80009e0:	d809      	bhi.n	80009f6 <_Unwind_VRS_Get+0x1a>
 80009e2:	b983      	cbnz	r3, 8000a06 <_Unwind_VRS_Get+0x2a>
 80009e4:	2a0f      	cmp	r2, #15
 80009e6:	d80e      	bhi.n	8000a06 <_Unwind_VRS_Get+0x2a>
 80009e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009ec:	6852      	ldr	r2, [r2, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	9b00      	ldr	r3, [sp, #0]
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	3903      	subs	r1, #3
 80009f8:	2901      	cmp	r1, #1
 80009fa:	bf8c      	ite	hi
 80009fc:	2002      	movhi	r0, #2
 80009fe:	2001      	movls	r0, #1
 8000a00:	4770      	bx	lr
 8000a02:	4608      	mov	r0, r1
 8000a04:	4770      	bx	lr
 8000a06:	2002      	movs	r0, #2
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <_Unwind_GetGR>:
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	b500      	push	{lr}
 8000a10:	b085      	sub	sp, #20
 8000a12:	460a      	mov	r2, r1
 8000a14:	a903      	add	r1, sp, #12
 8000a16:	9100      	str	r1, [sp, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f7ff ffdf 	bl	80009dc <_Unwind_VRS_Get>
 8000a1e:	9803      	ldr	r0, [sp, #12]
 8000a20:	b005      	add	sp, #20
 8000a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a26:	bf00      	nop

08000a28 <_Unwind_VRS_Set>:
 8000a28:	2901      	cmp	r1, #1
 8000a2a:	d010      	beq.n	8000a4e <_Unwind_VRS_Set+0x26>
 8000a2c:	d809      	bhi.n	8000a42 <_Unwind_VRS_Set+0x1a>
 8000a2e:	b983      	cbnz	r3, 8000a52 <_Unwind_VRS_Set+0x2a>
 8000a30:	2a0f      	cmp	r2, #15
 8000a32:	d80e      	bhi.n	8000a52 <_Unwind_VRS_Set+0x2a>
 8000a34:	9900      	ldr	r1, [sp, #0]
 8000a36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000a3a:	6809      	ldr	r1, [r1, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	6051      	str	r1, [r2, #4]
 8000a40:	4770      	bx	lr
 8000a42:	3903      	subs	r1, #3
 8000a44:	2901      	cmp	r1, #1
 8000a46:	bf8c      	ite	hi
 8000a48:	2002      	movhi	r0, #2
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4770      	bx	lr
 8000a52:	2002      	movs	r0, #2
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <_Unwind_SetGR>:
 8000a58:	2300      	movs	r3, #0
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	ac03      	add	r4, sp, #12
 8000a60:	9203      	str	r2, [sp, #12]
 8000a62:	9400      	str	r4, [sp, #0]
 8000a64:	460a      	mov	r2, r1
 8000a66:	4619      	mov	r1, r3
 8000a68:	f7ff ffde 	bl	8000a28 <_Unwind_VRS_Set>
 8000a6c:	b004      	add	sp, #16
 8000a6e:	bd10      	pop	{r4, pc}

08000a70 <__gnu_Unwind_Backtrace>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	f04f 36ff 	mov.w	r6, #4294967295
 8000a76:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000a78:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8000a82:	f102 0c04 	add.w	ip, r2, #4
 8000a86:	4605      	mov	r5, r0
 8000a88:	460c      	mov	r4, r1
 8000a8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000aa2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000aa6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000aaa:	9616      	str	r6, [sp, #88]	@ 0x58
 8000aac:	e012      	b.n	8000ad4 <__gnu_Unwind_Backtrace+0x64>
 8000aae:	210c      	movs	r1, #12
 8000ab0:	a816      	add	r0, sp, #88	@ 0x58
 8000ab2:	466a      	mov	r2, sp
 8000ab4:	f7ff ffd0 	bl	8000a58 <_Unwind_SetGR>
 8000ab8:	4621      	mov	r1, r4
 8000aba:	a816      	add	r0, sp, #88	@ 0x58
 8000abc:	47a8      	blx	r5
 8000abe:	b978      	cbnz	r0, 8000ae0 <__gnu_Unwind_Backtrace+0x70>
 8000ac0:	4669      	mov	r1, sp
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	9b04      	ldr	r3, [sp, #16]
 8000ac6:	aa16      	add	r2, sp, #88	@ 0x58
 8000ac8:	4798      	blx	r3
 8000aca:	2805      	cmp	r0, #5
 8000acc:	4606      	mov	r6, r0
 8000ace:	d008      	beq.n	8000ae2 <__gnu_Unwind_Backtrace+0x72>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d005      	beq.n	8000ae0 <__gnu_Unwind_Backtrace+0x70>
 8000ad4:	4668      	mov	r0, sp
 8000ad6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000ad8:	f7ff fdfc 	bl	80006d4 <get_eit_entry>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d0e6      	beq.n	8000aae <__gnu_Unwind_Backtrace+0x3e>
 8000ae0:	2609      	movs	r6, #9
 8000ae2:	a816      	add	r0, sp, #88	@ 0x58
 8000ae4:	f7ff fe40 	bl	8000768 <restore_non_core_regs>
 8000ae8:	4630      	mov	r0, r6
 8000aea:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <__gnu_unwind_pr_common>:
 8000af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af4:	4693      	mov	fp, r2
 8000af6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000af8:	460d      	mov	r5, r1
 8000afa:	f852 1b04 	ldr.w	r1, [r2], #4
 8000afe:	b089      	sub	sp, #36	@ 0x24
 8000b00:	f000 0c03 	and.w	ip, r0, #3
 8000b04:	9206      	str	r2, [sp, #24]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d079      	beq.n	8000bfe <__gnu_unwind_pr_common+0x10e>
 8000b0a:	2402      	movs	r4, #2
 8000b0c:	0c0e      	lsrs	r6, r1, #16
 8000b0e:	f88d 601d 	strb.w	r6, [sp, #29]
 8000b12:	0409      	lsls	r1, r1, #16
 8000b14:	b2f6      	uxtb	r6, r6
 8000b16:	9105      	str	r1, [sp, #20]
 8000b18:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8000b1c:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8000b1e:	f1bc 0f02 	cmp.w	ip, #2
 8000b22:	bf08      	it	eq
 8000b24:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000b26:	f017 0701 	ands.w	r7, r7, #1
 8000b2a:	f88d 401c 	strb.w	r4, [sp, #28]
 8000b2e:	d00c      	beq.n	8000b4a <__gnu_unwind_pr_common+0x5a>
 8000b30:	4658      	mov	r0, fp
 8000b32:	a905      	add	r1, sp, #20
 8000b34:	f000 fb80 	bl	8001238 <__gnu_unwind_execute>
 8000b38:	b918      	cbnz	r0, 8000b42 <__gnu_unwind_pr_common+0x52>
 8000b3a:	2008      	movs	r0, #8
 8000b3c:	b009      	add	sp, #36	@ 0x24
 8000b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b42:	2009      	movs	r0, #9
 8000b44:	b009      	add	sp, #36	@ 0x24
 8000b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b4a:	6816      	ldr	r6, [r2, #0]
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d0ef      	beq.n	8000b30 <__gnu_unwind_pr_common+0x40>
 8000b50:	46b2      	mov	sl, r6
 8000b52:	4664      	mov	r4, ip
 8000b54:	4699      	mov	r9, r3
 8000b56:	f000 0108 	and.w	r1, r0, #8
 8000b5a:	9101      	str	r1, [sp, #4]
 8000b5c:	9702      	str	r7, [sp, #8]
 8000b5e:	f1b9 0f02 	cmp.w	r9, #2
 8000b62:	d048      	beq.n	8000bf6 <__gnu_unwind_pr_common+0x106>
 8000b64:	f8b2 a000 	ldrh.w	sl, [r2]
 8000b68:	8856      	ldrh	r6, [r2, #2]
 8000b6a:	f102 0804 	add.w	r8, r2, #4
 8000b6e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000b70:	f026 0201 	bic.w	r2, r6, #1
 8000b74:	210f      	movs	r1, #15
 8000b76:	4658      	mov	r0, fp
 8000b78:	18d7      	adds	r7, r2, r3
 8000b7a:	f7ff ff47 	bl	8000a0c <_Unwind_GetGR>
 8000b7e:	4287      	cmp	r7, r0
 8000b80:	d837      	bhi.n	8000bf2 <__gnu_unwind_pr_common+0x102>
 8000b82:	f02a 0201 	bic.w	r2, sl, #1
 8000b86:	443a      	add	r2, r7
 8000b88:	4282      	cmp	r2, r0
 8000b8a:	bf94      	ite	ls
 8000b8c:	2200      	movls	r2, #0
 8000b8e:	2201      	movhi	r2, #1
 8000b90:	0076      	lsls	r6, r6, #1
 8000b92:	f006 0302 	and.w	r3, r6, #2
 8000b96:	f00a 0a01 	and.w	sl, sl, #1
 8000b9a:	ea43 030a 	orr.w	r3, r3, sl
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d047      	beq.n	8000c32 <__gnu_unwind_pr_common+0x142>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d031      	beq.n	8000c0a <__gnu_unwind_pr_common+0x11a>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1cb      	bne.n	8000b42 <__gnu_unwind_pr_common+0x52>
 8000baa:	b114      	cbz	r4, 8000bb2 <__gnu_unwind_pr_common+0xc2>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 80ca 	bne.w	8000d46 <__gnu_unwind_pr_common+0x256>
 8000bb2:	f108 0204 	add.w	r2, r8, #4
 8000bb6:	f8d2 a000 	ldr.w	sl, [r2]
 8000bba:	f1ba 0f00 	cmp.w	sl, #0
 8000bbe:	d1ce      	bne.n	8000b5e <__gnu_unwind_pr_common+0x6e>
 8000bc0:	4658      	mov	r0, fp
 8000bc2:	a905      	add	r1, sp, #20
 8000bc4:	9f02      	ldr	r7, [sp, #8]
 8000bc6:	f000 fb37 	bl	8001238 <__gnu_unwind_execute>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d1b9      	bne.n	8000b42 <__gnu_unwind_pr_common+0x52>
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d0b3      	beq.n	8000b3a <__gnu_unwind_pr_common+0x4a>
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	4658      	mov	r0, fp
 8000bd6:	f7ff ff19 	bl	8000a0c <_Unwind_GetGR>
 8000bda:	210e      	movs	r1, #14
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4658      	mov	r0, fp
 8000be0:	f7ff ff3a 	bl	8000a58 <_Unwind_SetGR>
 8000be4:	210f      	movs	r1, #15
 8000be6:	4658      	mov	r0, fp
 8000be8:	4a66      	ldr	r2, [pc, #408]	@ (8000d84 <__gnu_unwind_pr_common+0x294>)
 8000bea:	f7ff ff35 	bl	8000a58 <_Unwind_SetGR>
 8000bee:	2007      	movs	r0, #7
 8000bf0:	e7a8      	b.n	8000b44 <__gnu_unwind_pr_common+0x54>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e7cc      	b.n	8000b90 <__gnu_unwind_pr_common+0xa0>
 8000bf6:	6856      	ldr	r6, [r2, #4]
 8000bf8:	f102 0808 	add.w	r8, r2, #8
 8000bfc:	e7b7      	b.n	8000b6e <__gnu_unwind_pr_common+0x7e>
 8000bfe:	0209      	lsls	r1, r1, #8
 8000c00:	2403      	movs	r4, #3
 8000c02:	9105      	str	r1, [sp, #20]
 8000c04:	f88d 301d 	strb.w	r3, [sp, #29]
 8000c08:	e788      	b.n	8000b1c <__gnu_unwind_pr_common+0x2c>
 8000c0a:	f8d8 6000 	ldr.w	r6, [r8]
 8000c0e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d144      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x1b0>
 8000c16:	b122      	cbz	r2, 8000c22 <__gnu_unwind_pr_common+0x132>
 8000c18:	9a01      	ldr	r2, [sp, #4]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d05a      	beq.n	8000cd4 <__gnu_unwind_pr_common+0x1e4>
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d058      	beq.n	8000cd4 <__gnu_unwind_pr_common+0x1e4>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	da01      	bge.n	8000c2a <__gnu_unwind_pr_common+0x13a>
 8000c26:	f108 0804 	add.w	r8, r8, #4
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000c30:	e7c1      	b.n	8000bb6 <__gnu_unwind_pr_common+0xc6>
 8000c32:	b9ec      	cbnz	r4, 8000c70 <__gnu_unwind_pr_common+0x180>
 8000c34:	b1ca      	cbz	r2, 8000c6a <__gnu_unwind_pr_common+0x17a>
 8000c36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000c3a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c3e:	1c99      	adds	r1, r3, #2
 8000c40:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000c44:	f43f af7d 	beq.w	8000b42 <__gnu_unwind_pr_common+0x52>
 8000c48:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	9104      	str	r1, [sp, #16]
 8000c50:	f000 808c 	beq.w	8000d6c <__gnu_unwind_pr_common+0x27c>
 8000c54:	f108 0004 	add.w	r0, r8, #4
 8000c58:	f7ff fdb4 	bl	80007c4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c5c:	ab04      	add	r3, sp, #16
 8000c5e:	4601      	mov	r1, r0
 8000c60:	4628      	mov	r0, r5
 8000c62:	f3af 8000 	nop.w
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d157      	bne.n	8000d1a <__gnu_unwind_pr_common+0x22a>
 8000c6a:	f108 0208 	add.w	r2, r8, #8
 8000c6e:	e7a2      	b.n	8000bb6 <__gnu_unwind_pr_common+0xc6>
 8000c70:	210d      	movs	r1, #13
 8000c72:	4658      	mov	r0, fp
 8000c74:	f7ff feca 	bl	8000a0c <_Unwind_GetGR>
 8000c78:	6a2b      	ldr	r3, [r5, #32]
 8000c7a:	4283      	cmp	r3, r0
 8000c7c:	d1f5      	bne.n	8000c6a <__gnu_unwind_pr_common+0x17a>
 8000c7e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000c80:	4598      	cmp	r8, r3
 8000c82:	d1f2      	bne.n	8000c6a <__gnu_unwind_pr_common+0x17a>
 8000c84:	4640      	mov	r0, r8
 8000c86:	f7ff fcd5 	bl	8000634 <selfrel_offset31>
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	4658      	mov	r0, fp
 8000c90:	f7ff fee2 	bl	8000a58 <_Unwind_SetGR>
 8000c94:	462a      	mov	r2, r5
 8000c96:	2100      	movs	r1, #0
 8000c98:	4658      	mov	r0, fp
 8000c9a:	f7ff fedd 	bl	8000a58 <_Unwind_SetGR>
 8000c9e:	e7a6      	b.n	8000bee <__gnu_unwind_pr_common+0xfe>
 8000ca0:	210d      	movs	r1, #13
 8000ca2:	4658      	mov	r0, fp
 8000ca4:	9303      	str	r3, [sp, #12]
 8000ca6:	f7ff feb1 	bl	8000a0c <_Unwind_GetGR>
 8000caa:	6a2a      	ldr	r2, [r5, #32]
 8000cac:	9b03      	ldr	r3, [sp, #12]
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	d1b7      	bne.n	8000c22 <__gnu_unwind_pr_common+0x132>
 8000cb2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000cb4:	4590      	cmp	r8, r2
 8000cb6:	d1b4      	bne.n	8000c22 <__gnu_unwind_pr_common+0x132>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	2204      	movs	r2, #4
 8000cbc:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000cc0:	4442      	add	r2, r8
 8000cc2:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000cc4:	636a      	str	r2, [r5, #52]	@ 0x34
 8000cc6:	f8d8 2000 	ldr.w	r2, [r8]
 8000cca:	42ba      	cmp	r2, r7
 8000ccc:	db56      	blt.n	8000d7c <__gnu_unwind_pr_common+0x28c>
 8000cce:	2201      	movs	r2, #1
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	e7aa      	b.n	8000c2a <__gnu_unwind_pr_common+0x13a>
 8000cd4:	9403      	str	r4, [sp, #12]
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	461c      	mov	r4, r3
 8000cda:	f108 0a04 	add.w	sl, r8, #4
 8000cde:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000ce2:	e00d      	b.n	8000d00 <__gnu_unwind_pr_common+0x210>
 8000ce4:	4650      	mov	r0, sl
 8000ce6:	9704      	str	r7, [sp, #16]
 8000ce8:	f7ff fd6c 	bl	80007c4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000cec:	2200      	movs	r2, #0
 8000cee:	4601      	mov	r1, r0
 8000cf0:	ab04      	add	r3, sp, #16
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	f10a 0a04 	add.w	sl, sl, #4
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	b9e8      	cbnz	r0, 8000d3c <__gnu_unwind_pr_common+0x24c>
 8000d00:	42a6      	cmp	r6, r4
 8000d02:	d1ef      	bne.n	8000ce4 <__gnu_unwind_pr_common+0x1f4>
 8000d04:	210d      	movs	r1, #13
 8000d06:	4658      	mov	r0, fp
 8000d08:	f7ff fe80 	bl	8000a0c <_Unwind_GetGR>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	9a04      	ldr	r2, [sp, #16]
 8000d10:	2006      	movs	r0, #6
 8000d12:	e9c5 2809 	strd	r2, r8, [r5, #36]	@ 0x24
 8000d16:	622b      	str	r3, [r5, #32]
 8000d18:	e714      	b.n	8000b44 <__gnu_unwind_pr_common+0x54>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	210d      	movs	r1, #13
 8000d1e:	4658      	mov	r0, fp
 8000d20:	f7ff fe74 	bl	8000a0c <_Unwind_GetGR>
 8000d24:	9e04      	ldr	r6, [sp, #16]
 8000d26:	2c02      	cmp	r4, #2
 8000d28:	bf08      	it	eq
 8000d2a:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000d2c:	6228      	str	r0, [r5, #32]
 8000d2e:	bf08      	it	eq
 8000d30:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000d34:	2006      	movs	r0, #6
 8000d36:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000d3a:	e703      	b.n	8000b44 <__gnu_unwind_pr_common+0x54>
 8000d3c:	4623      	mov	r3, r4
 8000d3e:	f8d8 6000 	ldr.w	r6, [r8]
 8000d42:	9c03      	ldr	r4, [sp, #12]
 8000d44:	e76d      	b.n	8000c22 <__gnu_unwind_pr_common+0x132>
 8000d46:	4640      	mov	r0, r8
 8000d48:	f7ff fc74 	bl	8000634 <selfrel_offset31>
 8000d4c:	f108 0204 	add.w	r2, r8, #4
 8000d50:	4604      	mov	r4, r0
 8000d52:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000d54:	4628      	mov	r0, r5
 8000d56:	f3af 8000 	nop.w
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	f43f aef1 	beq.w	8000b42 <__gnu_unwind_pr_common+0x52>
 8000d60:	4622      	mov	r2, r4
 8000d62:	210f      	movs	r1, #15
 8000d64:	4658      	mov	r0, fp
 8000d66:	f7ff fe77 	bl	8000a58 <_Unwind_SetGR>
 8000d6a:	e740      	b.n	8000bee <__gnu_unwind_pr_common+0xfe>
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	4658      	mov	r0, fp
 8000d70:	210d      	movs	r1, #13
 8000d72:	f7ff fe4b 	bl	8000a0c <_Unwind_GetGR>
 8000d76:	4626      	mov	r6, r4
 8000d78:	6228      	str	r0, [r5, #32]
 8000d7a:	e7db      	b.n	8000d34 <__gnu_unwind_pr_common+0x244>
 8000d7c:	1c58      	adds	r0, r3, #1
 8000d7e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000d82:	e780      	b.n	8000c86 <__gnu_unwind_pr_common+0x196>
 8000d84:	00000000 	.word	0x00000000

08000d88 <__aeabi_unwind_cpp_pr0>:
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e6b1      	b.n	8000af0 <__gnu_unwind_pr_common>

08000d8c <__aeabi_unwind_cpp_pr1>:
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e6af      	b.n	8000af0 <__gnu_unwind_pr_common>

08000d90 <__aeabi_unwind_cpp_pr2>:
 8000d90:	2302      	movs	r3, #2
 8000d92:	e6ad      	b.n	8000af0 <__gnu_unwind_pr_common>

08000d94 <_Unwind_VRS_Pop>:
 8000d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	461c      	mov	r4, r3
 8000d9e:	b0c3      	sub	sp, #268	@ 0x10c
 8000da0:	2904      	cmp	r1, #4
 8000da2:	f200 80cd 	bhi.w	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000da6:	e8df f001 	tbb	[pc, r1]
 8000daa:	51ac      	.short	0x51ac
 8000dac:	2acb      	.short	0x2acb
 8000dae:	03          	.byte	0x03
 8000daf:	00          	.byte	0x00
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	f040 80c5 	bne.w	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000db6:	2a10      	cmp	r2, #16
 8000db8:	f200 80c2 	bhi.w	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000dbc:	6803      	ldr	r3, [r0, #0]
 8000dbe:	06dc      	lsls	r4, r3, #27
 8000dc0:	f100 80e3 	bmi.w	8000f8a <_Unwind_VRS_Pop+0x1f6>
 8000dc4:	af20      	add	r7, sp, #128	@ 0x80
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	f000 f9a6 	bl	8001118 <__gnu_Unwind_Save_WMMXC>
 8000dcc:	2401      	movs	r4, #1
 8000dce:	4638      	mov	r0, r7
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000dd4:	fa04 f203 	lsl.w	r2, r4, r3
 8000dd8:	422a      	tst	r2, r5
 8000dda:	f103 0301 	add.w	r3, r3, #1
 8000dde:	d005      	beq.n	8000dec <_Unwind_VRS_Pop+0x58>
 8000de0:	460a      	mov	r2, r1
 8000de2:	f852 cb04 	ldr.w	ip, [r2], #4
 8000de6:	4611      	mov	r1, r2
 8000de8:	f8c0 c000 	str.w	ip, [r0]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	f100 0004 	add.w	r0, r0, #4
 8000df2:	d1ef      	bne.n	8000dd4 <_Unwind_VRS_Pop+0x40>
 8000df4:	4638      	mov	r0, r7
 8000df6:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000df8:	f000 f984 	bl	8001104 <__gnu_Unwind_Restore_WMMXC>
 8000dfc:	e095      	b.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000dfe:	2c03      	cmp	r4, #3
 8000e00:	f040 809e 	bne.w	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000e04:	b294      	uxth	r4, r2
 8000e06:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000e0a:	2b10      	cmp	r3, #16
 8000e0c:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000e10:	f200 8096 	bhi.w	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000e14:	6803      	ldr	r3, [r0, #0]
 8000e16:	071f      	lsls	r7, r3, #28
 8000e18:	f100 80bf 	bmi.w	8000f9a <_Unwind_VRS_Pop+0x206>
 8000e1c:	af20      	add	r7, sp, #128	@ 0x80
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f000 f94e 	bl	80010c0 <__gnu_Unwind_Save_WMMXD>
 8000e24:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000e26:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000e2a:	b154      	cbz	r4, 8000e42 <_Unwind_VRS_Pop+0xae>
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000e32:	1ad0      	subs	r0, r2, r3
 8000e34:	00e4      	lsls	r4, r4, #3
 8000e36:	581d      	ldr	r5, [r3, r0]
 8000e38:	f843 5b04 	str.w	r5, [r3], #4
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d1fa      	bne.n	8000e36 <_Unwind_VRS_Pop+0xa2>
 8000e40:	4422      	add	r2, r4
 8000e42:	4638      	mov	r0, r7
 8000e44:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000e46:	f000 f919 	bl	800107c <__gnu_Unwind_Restore_WMMXD>
 8000e4a:	e06e      	b.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000e4c:	2c01      	cmp	r4, #1
 8000e4e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000e52:	b295      	uxth	r5, r2
 8000e54:	d06d      	beq.n	8000f32 <_Unwind_VRS_Pop+0x19e>
 8000e56:	2c05      	cmp	r4, #5
 8000e58:	d172      	bne.n	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000e5a:	eb08 0905 	add.w	r9, r8, r5
 8000e5e:	f1b9 0f20 	cmp.w	r9, #32
 8000e62:	d86d      	bhi.n	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000e64:	f1b8 0f0f 	cmp.w	r8, #15
 8000e68:	d86e      	bhi.n	8000f48 <_Unwind_VRS_Pop+0x1b4>
 8000e6a:	f1b9 0f10 	cmp.w	r9, #16
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	f200 809b 	bhi.w	8000faa <_Unwind_VRS_Pop+0x216>
 8000e74:	07d9      	lsls	r1, r3, #31
 8000e76:	d508      	bpl.n	8000e8a <_Unwind_VRS_Pop+0xf6>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f840 3b48 	str.w	r3, [r0], #72
 8000e86:	f000 f8ed 	bl	8001064 <__gnu_Unwind_Save_VFP_D>
 8000e8a:	af20      	add	r7, sp, #128	@ 0x80
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	f000 f8e9 	bl	8001064 <__gnu_Unwind_Save_VFP_D>
 8000e92:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	f000 80b5 	beq.w	8001004 <_Unwind_VRS_Pop+0x270>
 8000e9a:	006d      	lsls	r5, r5, #1
 8000e9c:	1e6a      	subs	r2, r5, #1
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000ea4:	3201      	adds	r2, #1
 8000ea6:	3904      	subs	r1, #4
 8000ea8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000eac:	f853 0b04 	ldr.w	r0, [r3], #4
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f841 0f04 	str.w	r0, [r1, #4]!
 8000eb6:	d1f9      	bne.n	8000eac <_Unwind_VRS_Pop+0x118>
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	f000 809d 	beq.w	8000ff8 <_Unwind_VRS_Pop+0x264>
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	2910      	cmp	r1, #16
 8000ec2:	bf38      	it	cc
 8000ec4:	2110      	movcc	r1, #16
 8000ec6:	466f      	mov	r7, sp
 8000ec8:	006b      	lsls	r3, r5, #1
 8000eca:	3910      	subs	r1, #16
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	3904      	subs	r1, #4
 8000ed6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000eda:	f852 0b04 	ldr.w	r0, [r2], #4
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	f841 0f04 	str.w	r0, [r1, #4]!
 8000ee4:	d1f9      	bne.n	8000eda <_Unwind_VRS_Pop+0x146>
 8000ee6:	2c01      	cmp	r4, #1
 8000ee8:	f000 8084 	beq.w	8000ff4 <_Unwind_VRS_Pop+0x260>
 8000eec:	f1b8 0f0f 	cmp.w	r8, #15
 8000ef0:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000ef2:	d802      	bhi.n	8000efa <_Unwind_VRS_Pop+0x166>
 8000ef4:	a820      	add	r0, sp, #128	@ 0x80
 8000ef6:	f000 f8b1 	bl	800105c <__gnu_Unwind_Restore_VFP_D>
 8000efa:	4638      	mov	r0, r7
 8000efc:	f000 f8b6 	bl	800106c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f00:	e013      	b.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000f02:	b9ec      	cbnz	r4, 8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000f04:	4623      	mov	r3, r4
 8000f06:	2401      	movs	r4, #1
 8000f08:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8000f0a:	1d37      	adds	r7, r6, #4
 8000f0c:	b290      	uxth	r0, r2
 8000f0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f12:	4202      	tst	r2, r0
 8000f14:	bf1c      	itt	ne
 8000f16:	f851 2b04 	ldrne.w	r2, [r1], #4
 8000f1a:	f847 2023 	strne.w	r2, [r7, r3, lsl #2]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	d1f4      	bne.n	8000f0e <_Unwind_VRS_Pop+0x17a>
 8000f24:	04a8      	lsls	r0, r5, #18
 8000f26:	d400      	bmi.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000f28:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	b043      	add	sp, #268	@ 0x10c
 8000f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f32:	eb08 0305 	add.w	r3, r8, r5
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d802      	bhi.n	8000f40 <_Unwind_VRS_Pop+0x1ac>
 8000f3a:	f1b8 0f10 	cmp.w	r8, #16
 8000f3e:	d114      	bne.n	8000f6a <_Unwind_VRS_Pop+0x1d6>
 8000f40:	2002      	movs	r0, #2
 8000f42:	b043      	add	sp, #268	@ 0x10c
 8000f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d0ee      	beq.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000f4c:	6803      	ldr	r3, [r0, #0]
 8000f4e:	075a      	lsls	r2, r3, #29
 8000f50:	d45c      	bmi.n	800100c <_Unwind_VRS_Pop+0x278>
 8000f52:	466f      	mov	r7, sp
 8000f54:	4638      	mov	r0, r7
 8000f56:	f000 f88d 	bl	8001074 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f5a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000f5c:	006b      	lsls	r3, r5, #1
 8000f5e:	f1a8 0110 	sub.w	r1, r8, #16
 8000f62:	3b01      	subs	r3, #1
 8000f64:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000f68:	e7b3      	b.n	8000ed2 <_Unwind_VRS_Pop+0x13e>
 8000f6a:	6803      	ldr	r3, [r0, #0]
 8000f6c:	07da      	lsls	r2, r3, #31
 8000f6e:	d459      	bmi.n	8001024 <_Unwind_VRS_Pop+0x290>
 8000f70:	af20      	add	r7, sp, #128	@ 0x80
 8000f72:	4638      	mov	r0, r7
 8000f74:	f000 f86e 	bl	8001054 <__gnu_Unwind_Save_VFP>
 8000f78:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d18d      	bne.n	8000e9a <_Unwind_VRS_Pop+0x106>
 8000f7e:	3304      	adds	r3, #4
 8000f80:	4638      	mov	r0, r7
 8000f82:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000f84:	f000 f862 	bl	800104c <__gnu_Unwind_Restore_VFP>
 8000f88:	e7cf      	b.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8000f8a:	f023 0310 	bic.w	r3, r3, #16
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000f94:	f000 f8c0 	bl	8001118 <__gnu_Unwind_Save_WMMXC>
 8000f98:	e714      	b.n	8000dc4 <_Unwind_VRS_Pop+0x30>
 8000f9a:	f023 0308 	bic.w	r3, r3, #8
 8000f9e:	6003      	str	r3, [r0, #0]
 8000fa0:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000fa4:	f000 f88c 	bl	80010c0 <__gnu_Unwind_Save_WMMXD>
 8000fa8:	e738      	b.n	8000e1c <_Unwind_VRS_Pop+0x88>
 8000faa:	07d9      	lsls	r1, r3, #31
 8000fac:	d508      	bpl.n	8000fc0 <_Unwind_VRS_Pop+0x22c>
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f840 3b48 	str.w	r3, [r0], #72
 8000fba:	f000 f853 	bl	8001064 <__gnu_Unwind_Save_VFP_D>
 8000fbe:	6833      	ldr	r3, [r6, #0]
 8000fc0:	0758      	lsls	r0, r3, #29
 8000fc2:	d506      	bpl.n	8000fd2 <_Unwind_VRS_Pop+0x23e>
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	f840 3bd0 	str.w	r3, [r0], #208
 8000fce:	f000 f851 	bl	8001074 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000fd2:	af20      	add	r7, sp, #128	@ 0x80
 8000fd4:	4638      	mov	r0, r7
 8000fd6:	f000 f845 	bl	8001064 <__gnu_Unwind_Save_VFP_D>
 8000fda:	4668      	mov	r0, sp
 8000fdc:	f000 f84a 	bl	8001074 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000fe0:	f1c8 0210 	rsb	r2, r8, #16
 8000fe4:	0052      	lsls	r2, r2, #1
 8000fe6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000fe8:	f1a9 0510 	sub.w	r5, r9, #16
 8000fec:	3a01      	subs	r2, #1
 8000fee:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000ff2:	e757      	b.n	8000ea4 <_Unwind_VRS_Pop+0x110>
 8000ff4:	af20      	add	r7, sp, #128	@ 0x80
 8000ff6:	e7c2      	b.n	8000f7e <_Unwind_VRS_Pop+0x1ea>
 8000ff8:	2c01      	cmp	r4, #1
 8000ffa:	d0c0      	beq.n	8000f7e <_Unwind_VRS_Pop+0x1ea>
 8000ffc:	f1b8 0f0f 	cmp.w	r8, #15
 8001000:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001002:	d892      	bhi.n	8000f2a <_Unwind_VRS_Pop+0x196>
 8001004:	4638      	mov	r0, r7
 8001006:	f000 f829 	bl	800105c <__gnu_Unwind_Restore_VFP_D>
 800100a:	e78e      	b.n	8000f2a <_Unwind_VRS_Pop+0x196>
 800100c:	466f      	mov	r7, sp
 800100e:	f023 0304 	bic.w	r3, r3, #4
 8001012:	f840 3bd0 	str.w	r3, [r0], #208
 8001016:	f000 f82d 	bl	8001074 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800101a:	4638      	mov	r0, r7
 800101c:	f000 f82a 	bl	8001074 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001020:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001022:	e79b      	b.n	8000f5c <_Unwind_VRS_Pop+0x1c8>
 8001024:	4630      	mov	r0, r6
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f840 3b48 	str.w	r3, [r0], #72
 800102e:	f000 f811 	bl	8001054 <__gnu_Unwind_Save_VFP>
 8001032:	e79d      	b.n	8000f70 <_Unwind_VRS_Pop+0x1dc>

08001034 <__restore_core_regs>:
 8001034:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8001038:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800103c:	469c      	mov	ip, r3
 800103e:	46a6      	mov	lr, r4
 8001040:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001044:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001048:	46e5      	mov	sp, ip
 800104a:	bd00      	pop	{pc}

0800104c <__gnu_Unwind_Restore_VFP>:
 800104c:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__gnu_Unwind_Save_VFP>:
 8001054:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__gnu_Unwind_Restore_VFP_D>:
 800105c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__gnu_Unwind_Save_VFP_D>:
 8001064:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800106c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001074:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__gnu_Unwind_Restore_WMMXD>:
 800107c:	ecf0 0102 	ldfe	f0, [r0], #8
 8001080:	ecf0 1102 	ldfe	f1, [r0], #8
 8001084:	ecf0 2102 	ldfe	f2, [r0], #8
 8001088:	ecf0 3102 	ldfe	f3, [r0], #8
 800108c:	ecf0 4102 	ldfe	f4, [r0], #8
 8001090:	ecf0 5102 	ldfe	f5, [r0], #8
 8001094:	ecf0 6102 	ldfe	f6, [r0], #8
 8001098:	ecf0 7102 	ldfe	f7, [r0], #8
 800109c:	ecf0 8102 	ldfp	f0, [r0], #8
 80010a0:	ecf0 9102 	ldfp	f1, [r0], #8
 80010a4:	ecf0 a102 	ldfp	f2, [r0], #8
 80010a8:	ecf0 b102 	ldfp	f3, [r0], #8
 80010ac:	ecf0 c102 	ldfp	f4, [r0], #8
 80010b0:	ecf0 d102 	ldfp	f5, [r0], #8
 80010b4:	ecf0 e102 	ldfp	f6, [r0], #8
 80010b8:	ecf0 f102 	ldfp	f7, [r0], #8
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <__gnu_Unwind_Save_WMMXD>:
 80010c0:	ece0 0102 	stfe	f0, [r0], #8
 80010c4:	ece0 1102 	stfe	f1, [r0], #8
 80010c8:	ece0 2102 	stfe	f2, [r0], #8
 80010cc:	ece0 3102 	stfe	f3, [r0], #8
 80010d0:	ece0 4102 	stfe	f4, [r0], #8
 80010d4:	ece0 5102 	stfe	f5, [r0], #8
 80010d8:	ece0 6102 	stfe	f6, [r0], #8
 80010dc:	ece0 7102 	stfe	f7, [r0], #8
 80010e0:	ece0 8102 	stfp	f0, [r0], #8
 80010e4:	ece0 9102 	stfp	f1, [r0], #8
 80010e8:	ece0 a102 	stfp	f2, [r0], #8
 80010ec:	ece0 b102 	stfp	f3, [r0], #8
 80010f0:	ece0 c102 	stfp	f4, [r0], #8
 80010f4:	ece0 d102 	stfp	f5, [r0], #8
 80010f8:	ece0 e102 	stfp	f6, [r0], #8
 80010fc:	ece0 f102 	stfp	f7, [r0], #8
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <__gnu_Unwind_Restore_WMMXC>:
 8001104:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001108:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800110c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001110:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__gnu_Unwind_Save_WMMXC>:
 8001118:	fca0 8101 	stc2	1, cr8, [r0], #4
 800111c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001120:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001124:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <_Unwind_RaiseException>:
 800112c:	46ec      	mov	ip, sp
 800112e:	b500      	push	{lr}
 8001130:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001134:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001140:	a901      	add	r1, sp, #4
 8001142:	f7ff fbd9 	bl	80008f8 <__gnu_Unwind_RaiseException>
 8001146:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800114a:	b012      	add	sp, #72	@ 0x48
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_Unwind_Resume>:
 8001150:	46ec      	mov	ip, sp
 8001152:	b500      	push	{lr}
 8001154:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001158:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001164:	a901      	add	r1, sp, #4
 8001166:	f7ff fc05 	bl	8000974 <__gnu_Unwind_Resume>
 800116a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800116e:	b012      	add	sp, #72	@ 0x48
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <_Unwind_Resume_or_Rethrow>:
 8001174:	46ec      	mov	ip, sp
 8001176:	b500      	push	{lr}
 8001178:	e92d 5000 	stmdb	sp!, {ip, lr}
 800117c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001188:	a901      	add	r1, sp, #4
 800118a:	f7ff fc15 	bl	80009b8 <__gnu_Unwind_Resume_or_Rethrow>
 800118e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001192:	b012      	add	sp, #72	@ 0x48
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <_Unwind_ForcedUnwind>:
 8001198:	46ec      	mov	ip, sp
 800119a:	b500      	push	{lr}
 800119c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80011a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80011ac:	ab01      	add	r3, sp, #4
 80011ae:	f7ff fbd7 	bl	8000960 <__gnu_Unwind_ForcedUnwind>
 80011b2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80011b6:	b012      	add	sp, #72	@ 0x48
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <_Unwind_Backtrace>:
 80011bc:	46ec      	mov	ip, sp
 80011be:	b500      	push	{lr}
 80011c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80011c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80011d0:	aa01      	add	r2, sp, #4
 80011d2:	f7ff fc4d 	bl	8000a70 <__gnu_Unwind_Backtrace>
 80011d6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80011da:	b012      	add	sp, #72	@ 0x48
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <next_unwind_byte>:
 80011e0:	7a02      	ldrb	r2, [r0, #8]
 80011e2:	4603      	mov	r3, r0
 80011e4:	b97a      	cbnz	r2, 8001206 <next_unwind_byte+0x26>
 80011e6:	7a42      	ldrb	r2, [r0, #9]
 80011e8:	b1a2      	cbz	r2, 8001214 <next_unwind_byte+0x34>
 80011ea:	f04f 0c03 	mov.w	ip, #3
 80011ee:	6841      	ldr	r1, [r0, #4]
 80011f0:	3a01      	subs	r2, #1
 80011f2:	7242      	strb	r2, [r0, #9]
 80011f4:	6808      	ldr	r0, [r1, #0]
 80011f6:	1d0a      	adds	r2, r1, #4
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	0202      	lsls	r2, r0, #8
 80011fc:	f883 c008 	strb.w	ip, [r3, #8]
 8001200:	0e00      	lsrs	r0, r0, #24
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	4770      	bx	lr
 8001206:	6800      	ldr	r0, [r0, #0]
 8001208:	3a01      	subs	r2, #1
 800120a:	721a      	strb	r2, [r3, #8]
 800120c:	0202      	lsls	r2, r0, #8
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	0e00      	lsrs	r0, r0, #24
 8001212:	4770      	bx	lr
 8001214:	20b0      	movs	r0, #176	@ 0xb0
 8001216:	4770      	bx	lr

08001218 <_Unwind_GetGR.constprop.0>:
 8001218:	2300      	movs	r3, #0
 800121a:	b500      	push	{lr}
 800121c:	b085      	sub	sp, #20
 800121e:	a903      	add	r1, sp, #12
 8001220:	9100      	str	r1, [sp, #0]
 8001222:	220c      	movs	r2, #12
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fbd9 	bl	80009dc <_Unwind_VRS_Get>
 800122a:	9803      	ldr	r0, [sp, #12]
 800122c:	b005      	add	sp, #20
 800122e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001232:	bf00      	nop

08001234 <unwind_UCB_from_context>:
 8001234:	e7f0      	b.n	8001218 <_Unwind_GetGR.constprop.0>
 8001236:	bf00      	nop

08001238 <__gnu_unwind_execute>:
 8001238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800123c:	f04f 0800 	mov.w	r8, #0
 8001240:	4606      	mov	r6, r0
 8001242:	460d      	mov	r5, r1
 8001244:	b085      	sub	sp, #20
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff ffca 	bl	80011e0 <next_unwind_byte>
 800124c:	28b0      	cmp	r0, #176	@ 0xb0
 800124e:	4604      	mov	r4, r0
 8001250:	f000 80dc 	beq.w	800140c <__gnu_unwind_execute+0x1d4>
 8001254:	0607      	lsls	r7, r0, #24
 8001256:	d547      	bpl.n	80012e8 <__gnu_unwind_execute+0xb0>
 8001258:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800125c:	2b80      	cmp	r3, #128	@ 0x80
 800125e:	d05f      	beq.n	8001320 <__gnu_unwind_execute+0xe8>
 8001260:	2bb0      	cmp	r3, #176	@ 0xb0
 8001262:	d074      	beq.n	800134e <__gnu_unwind_execute+0x116>
 8001264:	d81b      	bhi.n	800129e <__gnu_unwind_execute+0x66>
 8001266:	2b90      	cmp	r3, #144	@ 0x90
 8001268:	f000 809c 	beq.w	80013a4 <__gnu_unwind_execute+0x16c>
 800126c:	2ba0      	cmp	r3, #160	@ 0xa0
 800126e:	d112      	bne.n	8001296 <__gnu_unwind_execute+0x5e>
 8001270:	43c3      	mvns	r3, r0
 8001272:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	411a      	asrs	r2, r3
 800127c:	0701      	lsls	r1, r0, #28
 800127e:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001282:	d501      	bpl.n	8001288 <__gnu_unwind_execute+0x50>
 8001284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001288:	2300      	movs	r3, #0
 800128a:	4630      	mov	r0, r6
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fd81 	bl	8000d94 <_Unwind_VRS_Pop>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0d7      	beq.n	8001246 <__gnu_unwind_execute+0xe>
 8001296:	2009      	movs	r0, #9
 8001298:	b005      	add	sp, #20
 800129a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800129e:	2bc0      	cmp	r3, #192	@ 0xc0
 80012a0:	d16e      	bne.n	8001380 <__gnu_unwind_execute+0x148>
 80012a2:	28c6      	cmp	r0, #198	@ 0xc6
 80012a4:	f000 8094 	beq.w	80013d0 <__gnu_unwind_execute+0x198>
 80012a8:	28c7      	cmp	r0, #199	@ 0xc7
 80012aa:	f000 80b4 	beq.w	8001416 <__gnu_unwind_execute+0x1de>
 80012ae:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80012b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80012b4:	f000 80c9 	beq.w	800144a <__gnu_unwind_execute+0x212>
 80012b8:	28c8      	cmp	r0, #200	@ 0xc8
 80012ba:	f000 80d4 	beq.w	8001466 <__gnu_unwind_execute+0x22e>
 80012be:	28c9      	cmp	r0, #201	@ 0xc9
 80012c0:	d1e9      	bne.n	8001296 <__gnu_unwind_execute+0x5e>
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff ff8c 	bl	80011e0 <next_unwind_byte>
 80012c8:	2305      	movs	r3, #5
 80012ca:	4604      	mov	r4, r0
 80012cc:	2101      	movs	r1, #1
 80012ce:	4630      	mov	r0, r6
 80012d0:	0322      	lsls	r2, r4, #12
 80012d2:	f004 040f 	and.w	r4, r4, #15
 80012d6:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80012da:	440c      	add	r4, r1
 80012dc:	4322      	orrs	r2, r4
 80012de:	f7ff fd59 	bl	8000d94 <_Unwind_VRS_Pop>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d0af      	beq.n	8001246 <__gnu_unwind_execute+0xe>
 80012e6:	e7d6      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 80012e8:	0083      	lsls	r3, r0, #2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	1d1f      	adds	r7, r3, #4
 80012ee:	2300      	movs	r3, #0
 80012f0:	f10d 090c 	add.w	r9, sp, #12
 80012f4:	4619      	mov	r1, r3
 80012f6:	220d      	movs	r2, #13
 80012f8:	4630      	mov	r0, r6
 80012fa:	f8cd 9000 	str.w	r9, [sp]
 80012fe:	f7ff fb6d 	bl	80009dc <_Unwind_VRS_Get>
 8001302:	9b03      	ldr	r3, [sp, #12]
 8001304:	0660      	lsls	r0, r4, #25
 8001306:	bf4c      	ite	mi
 8001308:	1bdf      	submi	r7, r3, r7
 800130a:	18ff      	addpl	r7, r7, r3
 800130c:	2300      	movs	r3, #0
 800130e:	220d      	movs	r2, #13
 8001310:	4630      	mov	r0, r6
 8001312:	4619      	mov	r1, r3
 8001314:	f8cd 9000 	str.w	r9, [sp]
 8001318:	9703      	str	r7, [sp, #12]
 800131a:	f7ff fb85 	bl	8000a28 <_Unwind_VRS_Set>
 800131e:	e792      	b.n	8001246 <__gnu_unwind_execute+0xe>
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff ff5d 	bl	80011e0 <next_unwind_byte>
 8001326:	0224      	lsls	r4, r4, #8
 8001328:	4320      	orrs	r0, r4
 800132a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800132e:	d0b2      	beq.n	8001296 <__gnu_unwind_execute+0x5e>
 8001330:	2300      	movs	r3, #0
 8001332:	0104      	lsls	r4, r0, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4630      	mov	r0, r6
 8001338:	b2a2      	uxth	r2, r4
 800133a:	f7ff fd2b 	bl	8000d94 <_Unwind_VRS_Pop>
 800133e:	2800      	cmp	r0, #0
 8001340:	d1a9      	bne.n	8001296 <__gnu_unwind_execute+0x5e>
 8001342:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001346:	bf18      	it	ne
 8001348:	f04f 0801 	movne.w	r8, #1
 800134c:	e77b      	b.n	8001246 <__gnu_unwind_execute+0xe>
 800134e:	28b1      	cmp	r0, #177	@ 0xb1
 8001350:	d052      	beq.n	80013f8 <__gnu_unwind_execute+0x1c0>
 8001352:	28b2      	cmp	r0, #178	@ 0xb2
 8001354:	f000 80ac 	beq.w	80014b0 <__gnu_unwind_execute+0x278>
 8001358:	28b3      	cmp	r0, #179	@ 0xb3
 800135a:	d06e      	beq.n	800143a <__gnu_unwind_execute+0x202>
 800135c:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001360:	2bb4      	cmp	r3, #180	@ 0xb4
 8001362:	d098      	beq.n	8001296 <__gnu_unwind_execute+0x5e>
 8001364:	2301      	movs	r3, #1
 8001366:	f000 0207 	and.w	r2, r0, #7
 800136a:	441a      	add	r2, r3
 800136c:	4630      	mov	r0, r6
 800136e:	4619      	mov	r1, r3
 8001370:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001374:	f7ff fd0e 	bl	8000d94 <_Unwind_VRS_Pop>
 8001378:	2800      	cmp	r0, #0
 800137a:	f43f af64 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 800137e:	e78a      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 8001380:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001384:	2bd0      	cmp	r3, #208	@ 0xd0
 8001386:	d186      	bne.n	8001296 <__gnu_unwind_execute+0x5e>
 8001388:	f000 0207 	and.w	r2, r0, #7
 800138c:	3201      	adds	r2, #1
 800138e:	2305      	movs	r3, #5
 8001390:	2101      	movs	r1, #1
 8001392:	4630      	mov	r0, r6
 8001394:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001398:	f7ff fcfc 	bl	8000d94 <_Unwind_VRS_Pop>
 800139c:	2800      	cmp	r0, #0
 800139e:	f43f af52 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 80013a2:	e778      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 80013a4:	f000 030d 	and.w	r3, r0, #13
 80013a8:	2b0d      	cmp	r3, #13
 80013aa:	f43f af74 	beq.w	8001296 <__gnu_unwind_execute+0x5e>
 80013ae:	2300      	movs	r3, #0
 80013b0:	af03      	add	r7, sp, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 020f 	and.w	r2, r0, #15
 80013b8:	9700      	str	r7, [sp, #0]
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fb0e 	bl	80009dc <_Unwind_VRS_Get>
 80013c0:	2300      	movs	r3, #0
 80013c2:	220d      	movs	r2, #13
 80013c4:	4630      	mov	r0, r6
 80013c6:	4619      	mov	r1, r3
 80013c8:	9700      	str	r7, [sp, #0]
 80013ca:	f7ff fb2d 	bl	8000a28 <_Unwind_VRS_Set>
 80013ce:	e73a      	b.n	8001246 <__gnu_unwind_execute+0xe>
 80013d0:	4628      	mov	r0, r5
 80013d2:	f7ff ff05 	bl	80011e0 <next_unwind_byte>
 80013d6:	4604      	mov	r4, r0
 80013d8:	2303      	movs	r3, #3
 80013da:	0322      	lsls	r2, r4, #12
 80013dc:	f004 040f 	and.w	r4, r4, #15
 80013e0:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80013e4:	3401      	adds	r4, #1
 80013e6:	4630      	mov	r0, r6
 80013e8:	4619      	mov	r1, r3
 80013ea:	4322      	orrs	r2, r4
 80013ec:	f7ff fcd2 	bl	8000d94 <_Unwind_VRS_Pop>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	f43f af28 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 80013f6:	e74e      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 80013f8:	4628      	mov	r0, r5
 80013fa:	f7ff fef1 	bl	80011e0 <next_unwind_byte>
 80013fe:	1e43      	subs	r3, r0, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b0e      	cmp	r3, #14
 8001404:	4602      	mov	r2, r0
 8001406:	f67f af3f 	bls.w	8001288 <__gnu_unwind_execute+0x50>
 800140a:	e744      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 800140c:	f1b8 0f00 	cmp.w	r8, #0
 8001410:	d03e      	beq.n	8001490 <__gnu_unwind_execute+0x258>
 8001412:	2000      	movs	r0, #0
 8001414:	e740      	b.n	8001298 <__gnu_unwind_execute+0x60>
 8001416:	4628      	mov	r0, r5
 8001418:	f7ff fee2 	bl	80011e0 <next_unwind_byte>
 800141c:	1e43      	subs	r3, r0, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b0e      	cmp	r3, #14
 8001422:	4602      	mov	r2, r0
 8001424:	f63f af37 	bhi.w	8001296 <__gnu_unwind_execute+0x5e>
 8001428:	2300      	movs	r3, #0
 800142a:	2104      	movs	r1, #4
 800142c:	4630      	mov	r0, r6
 800142e:	f7ff fcb1 	bl	8000d94 <_Unwind_VRS_Pop>
 8001432:	2800      	cmp	r0, #0
 8001434:	f43f af07 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 8001438:	e72d      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 800143a:	4628      	mov	r0, r5
 800143c:	f7ff fed0 	bl	80011e0 <next_unwind_byte>
 8001440:	2301      	movs	r3, #1
 8001442:	4604      	mov	r4, r0
 8001444:	4619      	mov	r1, r3
 8001446:	4630      	mov	r0, r6
 8001448:	e742      	b.n	80012d0 <__gnu_unwind_execute+0x98>
 800144a:	2303      	movs	r3, #3
 800144c:	f000 020f 	and.w	r2, r0, #15
 8001450:	3201      	adds	r2, #1
 8001452:	4630      	mov	r0, r6
 8001454:	4619      	mov	r1, r3
 8001456:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 800145a:	f7ff fc9b 	bl	8000d94 <_Unwind_VRS_Pop>
 800145e:	2800      	cmp	r0, #0
 8001460:	f43f aef1 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 8001464:	e717      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 8001466:	4628      	mov	r0, r5
 8001468:	f7ff feba 	bl	80011e0 <next_unwind_byte>
 800146c:	4602      	mov	r2, r0
 800146e:	2101      	movs	r1, #1
 8001470:	f002 04f0 	and.w	r4, r2, #240	@ 0xf0
 8001474:	f002 020f 	and.w	r2, r2, #15
 8001478:	3410      	adds	r4, #16
 800147a:	440a      	add	r2, r1
 800147c:	2305      	movs	r3, #5
 800147e:	4630      	mov	r0, r6
 8001480:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001484:	f7ff fc86 	bl	8000d94 <_Unwind_VRS_Pop>
 8001488:	2800      	cmp	r0, #0
 800148a:	f43f aedc 	beq.w	8001246 <__gnu_unwind_execute+0xe>
 800148e:	e702      	b.n	8001296 <__gnu_unwind_execute+0x5e>
 8001490:	ac03      	add	r4, sp, #12
 8001492:	4643      	mov	r3, r8
 8001494:	4641      	mov	r1, r8
 8001496:	220e      	movs	r2, #14
 8001498:	4630      	mov	r0, r6
 800149a:	9400      	str	r4, [sp, #0]
 800149c:	f7ff fa9e 	bl	80009dc <_Unwind_VRS_Get>
 80014a0:	4643      	mov	r3, r8
 80014a2:	220f      	movs	r2, #15
 80014a4:	4641      	mov	r1, r8
 80014a6:	4630      	mov	r0, r6
 80014a8:	9400      	str	r4, [sp, #0]
 80014aa:	f7ff fabd 	bl	8000a28 <_Unwind_VRS_Set>
 80014ae:	e7b0      	b.n	8001412 <__gnu_unwind_execute+0x1da>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f10d 090c 	add.w	r9, sp, #12
 80014b6:	220d      	movs	r2, #13
 80014b8:	4619      	mov	r1, r3
 80014ba:	4630      	mov	r0, r6
 80014bc:	f8cd 9000 	str.w	r9, [sp]
 80014c0:	f7ff fa8c 	bl	80009dc <_Unwind_VRS_Get>
 80014c4:	4628      	mov	r0, r5
 80014c6:	f7ff fe8b 	bl	80011e0 <next_unwind_byte>
 80014ca:	0602      	lsls	r2, r0, #24
 80014cc:	f04f 0702 	mov.w	r7, #2
 80014d0:	9c03      	ldr	r4, [sp, #12]
 80014d2:	d50b      	bpl.n	80014ec <__gnu_unwind_execute+0x2b4>
 80014d4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80014d8:	40b8      	lsls	r0, r7
 80014da:	4404      	add	r4, r0
 80014dc:	4628      	mov	r0, r5
 80014de:	9403      	str	r4, [sp, #12]
 80014e0:	f7ff fe7e 	bl	80011e0 <next_unwind_byte>
 80014e4:	0603      	lsls	r3, r0, #24
 80014e6:	f107 0707 	add.w	r7, r7, #7
 80014ea:	d4f3      	bmi.n	80014d4 <__gnu_unwind_execute+0x29c>
 80014ec:	2300      	movs	r3, #0
 80014ee:	fa00 f207 	lsl.w	r2, r0, r7
 80014f2:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 80014f6:	4422      	add	r2, r4
 80014f8:	9203      	str	r2, [sp, #12]
 80014fa:	4630      	mov	r0, r6
 80014fc:	220d      	movs	r2, #13
 80014fe:	4619      	mov	r1, r3
 8001500:	f8cd 9000 	str.w	r9, [sp]
 8001504:	f7ff fa90 	bl	8000a28 <_Unwind_VRS_Set>
 8001508:	e69d      	b.n	8001246 <__gnu_unwind_execute+0xe>
 800150a:	bf00      	nop

0800150c <__gnu_unwind_frame>:
 800150c:	460b      	mov	r3, r1
 800150e:	f04f 0c03 	mov.w	ip, #3
 8001512:	b500      	push	{lr}
 8001514:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001516:	4618      	mov	r0, r3
 8001518:	6853      	ldr	r3, [r2, #4]
 800151a:	b085      	sub	sp, #20
 800151c:	3208      	adds	r2, #8
 800151e:	9202      	str	r2, [sp, #8]
 8001520:	a901      	add	r1, sp, #4
 8001522:	0e1a      	lsrs	r2, r3, #24
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	f88d c00c 	strb.w	ip, [sp, #12]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001530:	f7ff fe82 	bl	8001238 <__gnu_unwind_execute>
 8001534:	b005      	add	sp, #20
 8001536:	f85d fb04 	ldr.w	pc, [sp], #4
 800153a:	bf00      	nop

0800153c <_Unwind_GetRegionStart>:
 800153c:	b508      	push	{r3, lr}
 800153e:	f7ff fe79 	bl	8001234 <unwind_UCB_from_context>
 8001542:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001544:	bd08      	pop	{r3, pc}
 8001546:	bf00      	nop

08001548 <_Unwind_GetLanguageSpecificData>:
 8001548:	b508      	push	{r3, lr}
 800154a:	f7ff fe73 	bl	8001234 <unwind_UCB_from_context>
 800154e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001550:	79c3      	ldrb	r3, [r0, #7]
 8001552:	3302      	adds	r3, #2
 8001554:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop

0800155c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <MX_GPIO_Init+0xc8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a2b      	ldr	r2, [pc, #172]	@ (8001624 <MX_GPIO_Init+0xc8>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <MX_GPIO_Init+0xc8>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <MX_GPIO_Init+0xc8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <MX_GPIO_Init+0xc8>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <MX_GPIO_Init+0xc8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <MX_GPIO_Init+0xc8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <MX_GPIO_Init+0xc8>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <MX_GPIO_Init+0xc8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB3 PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 80015b8:	f44f 7346 	mov.w	r3, #792	@ 0x318
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_GPIO_Init+0xcc>)
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <MX_GPIO_Init+0xd0>)
 80015ce:	f001 fa03 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d2:	2320      	movs	r3, #32
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_GPIO_Init+0xd4>)
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	4811      	ldr	r0, [pc, #68]	@ (800162c <MX_GPIO_Init+0xd0>)
 80015e6:	f001 f9f7 	bl	80029d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2009      	movs	r0, #9
 80015f0:	f001 f909 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015f4:	2009      	movs	r0, #9
 80015f6:	f001 f922 	bl	800283e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	200a      	movs	r0, #10
 8001600:	f001 f901 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001604:	200a      	movs	r0, #10
 8001606:	f001 f91a 	bl	800283e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2017      	movs	r0, #23
 8001610:	f001 f8f9 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001614:	2017      	movs	r0, #23
 8001616:	f001 f912 	bl	800283e <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	10110000 	.word	0x10110000
 800162c:	40010c00 	.word	0x40010c00
 8001630:	10210000 	.word	0x10210000

08001634 <PID_Calc>:
    pid->maxIntegral = maxI;
    pid->maxOutput = maxOut;
}

void PID_Calc(PID *pid, float reference, float feedback)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
    pid->lastError = pid->error;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]
    pid->error = reference - feedback;
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68b8      	ldr	r0, [r7, #8]
 800164c:	f7fe fe4c 	bl	80002e8 <__aeabi_fsub>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	60da      	str	r2, [r3, #12]
    float dout = (pid->error - pid->lastError) * pid->kd;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f7fe fe40 	bl	80002e8 <__aeabi_fsub>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7fe fd80 	bl	8000178 <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	617b      	str	r3, [r7, #20]
    float pout = pid->error * pid->kp;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f7fe fd76 	bl	8000178 <__aeabi_fmul>
 800168c:	4603      	mov	r3, r0
 800168e:	613b      	str	r3, [r7, #16]
    pid->integral += pid->error * pid->ki;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	695c      	ldr	r4, [r3, #20]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7fe fd6a 	bl	8000178 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7fe fe1f 	bl	80002ec <__addsf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	615a      	str	r2, [r3, #20]
    if(pid->integral > pid->maxIntegral) pid->integral = pid->maxIntegral;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4619      	mov	r1, r3
 80016c0:	4610      	mov	r0, r2
 80016c2:	f7fe ff87 	bl	80005d4 <__aeabi_fcmpgt>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <PID_Calc+0xa2>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	e012      	b.n	80016fc <PID_Calc+0xc8>
    else if(pid->integral < -pid->maxIntegral) pid->integral = -pid->maxIntegral;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7fe ff57 	bl	8000598 <__aeabi_fcmplt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <PID_Calc+0xc8>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	615a      	str	r2, [r3, #20]
    pid->output = pout+dout + pid->integral;
 80016fc:	6979      	ldr	r1, [r7, #20]
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	f7fe fdf4 	bl	80002ec <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f7fe fdec 	bl	80002ec <__addsf3>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	61da      	str	r2, [r3, #28]
    if(pid->output > pid->maxOutput) pid->output =   pid->maxOutput;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7fe ff54 	bl	80005d4 <__aeabi_fcmpgt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <PID_Calc+0x108>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	61da      	str	r2, [r3, #28]
    else if(pid->output < -pid->maxOutput) pid->output = -pid->maxOutput;
}
 800173a:	e013      	b.n	8001764 <PID_Calc+0x130>
    else if(pid->output < -pid->maxOutput) pid->output = -pid->maxOutput;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f7fe ff24 	bl	8000598 <__aeabi_fcmplt>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d100      	bne.n	8001758 <PID_Calc+0x124>
}
 8001756:	e005      	b.n	8001764 <PID_Calc+0x130>
    else if(pid->output < -pid->maxOutput) pid->output = -pid->maxOutput;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	61da      	str	r2, [r3, #28]
}
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f000 feeb 	bl	800254c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f853 	bl	8001820 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800177a:	213c      	movs	r1, #60	@ 0x3c
 800177c:	4825      	ldr	r0, [pc, #148]	@ (8001814 <main+0xa8>)
 800177e:	f002 f947 	bl	8003a10 <HAL_TIM_Encoder_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f7ff feeb 	bl	800155c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001786:	f000 fcbf 	bl	8002108 <MX_TIM3_Init>
  MX_TIM2_Init();
 800178a:	f000 fc33 	bl	8001ff4 <MX_TIM2_Init>
  MX_TIM1_Init();
 800178e:	f000 fb6d 	bl	8001e6c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001792:	f000 fd07 	bl	80021a4 <MX_TIM4_Init>
  MOTOR_Init();
 8001796:	f000 f8cf 	bl	8001938 <MOTOR_Init>
  MX_USART3_UART_Init();
 800179a:	f000 fe33 	bl	8002404 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_1);
 800179e:	2100      	movs	r1, #0
 80017a0:	481d      	ldr	r0, [pc, #116]	@ (8001818 <main+0xac>)
 80017a2:	f001 fff1 	bl	8003788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 80017a6:	2104      	movs	r1, #4
 80017a8:	481b      	ldr	r0, [pc, #108]	@ (8001818 <main+0xac>)
 80017aa:	f001 ffed 	bl	8003788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 80017ae:	2108      	movs	r1, #8
 80017b0:	4819      	ldr	r0, [pc, #100]	@ (8001818 <main+0xac>)
 80017b2:	f001 ffe9 	bl	8003788 <HAL_TIM_PWM_Start>

  // PID_Init(&mypid, 0, 0, 0, 800, 1000);

  HAL_TIM_Base_Start(&htim2);
 80017b6:	4818      	ldr	r0, [pc, #96]	@ (8001818 <main+0xac>)
 80017b8:	f001 fef2 	bl	80035a0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80017bc:	4815      	ldr	r0, [pc, #84]	@ (8001814 <main+0xa8>)
 80017be:	f001 feef 	bl	80035a0 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 145);		// 舵机A驱动代码，舵机占空比代数i取值为40~250
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <main+0xac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2291      	movs	r2, #145	@ 0x91
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 40);		// 舵机B驱动代码
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <main+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2228      	movs	r2, #40	@ 0x28
 80017d0:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 40);		// 舵机C驱动代码
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <main+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2228      	movs	r2, #40	@ 0x28
 80017d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  A_Forward(55);
 80017da:	2037      	movs	r0, #55	@ 0x37
 80017dc:	f000 f90e 	bl	80019fc <A_Forward>
	  B_Forward(55);
 80017e0:	2037      	movs	r0, #55	@ 0x37
 80017e2:	f000 f8e5 	bl	80019b0 <B_Forward>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // PID计算区域

      float feedbackValue = 0; //这里获取到被控对象的反馈值
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
      float targetValue = 0; //这里获取到目标值
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
      PID_Calc(&mypid, targetValue, feedbackValue); //进行PID计算，结果在output成员变量
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	4809      	ldr	r0, [pc, #36]	@ (800181c <main+0xb0>)
 80017f8:	f7ff ff1c 	bl	8001634 <PID_Calc>
      int pid_result = (mypid.output);
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <main+0xb0>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fef1 	bl	80005e8 <__aeabi_f2iz>
 8001806:	4603      	mov	r3, r0
 8001808:	607b      	str	r3, [r7, #4]
      HAL_Delay(10);
 800180a:	200a      	movs	r0, #10
 800180c:	f000 ff00 	bl	8002610 <HAL_Delay>
  {
 8001810:	bf00      	nop
 8001812:	e7e2      	b.n	80017da <main+0x6e>
 8001814:	20000368 	.word	0x20000368
 8001818:	200002d8 	.word	0x200002d8
 800181c:	2000007c 	.word	0x2000007c

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b090      	sub	sp, #64	@ 0x40
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2228      	movs	r2, #40	@ 0x28
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fda0 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001846:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800184a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001854:	2302      	movs	r3, #2
 8001856:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800185e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fa39 	bl	8002ce0 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001874:	f000 f819 	bl	80018aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001878:	230f      	movs	r3, #15
 800187a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187c:	2302      	movs	r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2102      	movs	r1, #2
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fca6 	bl	80031e4 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800189e:	f000 f804 	bl	80018aa <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3740      	adds	r7, #64	@ 0x40
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ae:	b672      	cpsid	i
}
 80018b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b2:	bf00      	nop
 80018b4:	e7fd      	b.n	80018b2 <Error_Handler+0x8>
	...

080018b8 <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__SetIn1PWM+0x1c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000290 	.word	0x20000290

080018d8 <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__SetIn2PWM+0x1c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000290 	.word	0x20000290

080018f8 <__SetIn3PWM>:
/**
 * @brief 设置IN3引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn3PWM(uint8_t duty)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN3_TIM, IN3_CH, duty);
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <__SetIn3PWM+0x1c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000290 	.word	0x20000290

08001918 <__SetIn4PWM>:
/**
 * @brief 设置IN4引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn4PWM(uint8_t duty)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN4_TIM, IN4_CH, duty);
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__SetIn4PWM+0x1c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	20000290 	.word	0x20000290

08001938 <MOTOR_Init>:

/**
 * @brief 初始化
 */
void MOTOR_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(IN1_TIM, IN1_CH);
 800193c:	2100      	movs	r1, #0
 800193e:	4808      	ldr	r0, [pc, #32]	@ (8001960 <MOTOR_Init+0x28>)
 8001940:	f001 ff22 	bl	8003788 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(IN2_TIM, IN2_CH);
 8001944:	2104      	movs	r1, #4
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <MOTOR_Init+0x28>)
 8001948:	f001 ff1e 	bl	8003788 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(IN3_TIM, IN3_CH);
 800194c:	2108      	movs	r1, #8
 800194e:	4804      	ldr	r0, [pc, #16]	@ (8001960 <MOTOR_Init+0x28>)
 8001950:	f001 ff1a 	bl	8003788 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(IN4_TIM, IN4_CH);
 8001954:	210c      	movs	r1, #12
 8001956:	4802      	ldr	r0, [pc, #8]	@ (8001960 <MOTOR_Init+0x28>)
 8001958:	f001 ff16 	bl	8003788 <HAL_TIM_PWM_Start>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000290 	.word	0x20000290

08001964 <A_Backward>:
/**
 * @brief 控制电机A前进
 * @param speed 速度值（0-100）
 */
void A_Backward(uint8_t speed)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b64      	cmp	r3, #100	@ 0x64
 8001972:	d901      	bls.n	8001978 <A_Backward+0x14>
        speed = MAX_SPEED;
 8001974:	2364      	movs	r3, #100	@ 0x64
 8001976:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <A_Backward+0x48>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <A_Backward+0x2c>
        __SetIn1PWM(speed);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff98 	bl	80018b8 <__SetIn1PWM>
        __SetIn2PWM(0);
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ffa5 	bl	80018d8 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 800198e:	e009      	b.n	80019a4 <A_Backward+0x40>
        __SetIn1PWM(MAX_SPEED);
 8001990:	2064      	movs	r0, #100	@ 0x64
 8001992:	f7ff ff91 	bl	80018b8 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff9a 	bl	80018d8 <__SetIn2PWM>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000a0 	.word	0x200000a0

080019b0 <B_Forward>:
/**
 * @brief 控制电机B前进
 * @param speed 速度值（0-100）
 */
void B_Forward(uint8_t speed)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b64      	cmp	r3, #100	@ 0x64
 80019be:	d901      	bls.n	80019c4 <B_Forward+0x14>
        speed = MAX_SPEED;
 80019c0:	2364      	movs	r3, #100	@ 0x64
 80019c2:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <B_Forward+0x48>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <B_Forward+0x2c>
        __SetIn3PWM(speed);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff92 	bl	80018f8 <__SetIn3PWM>
        __SetIn4PWM(0);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff ff9f 	bl	8001918 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED);
        __SetIn4PWM(MAX_SPEED - speed);
    }
}
 80019da:	e009      	b.n	80019f0 <B_Forward+0x40>
        __SetIn3PWM(MAX_SPEED);
 80019dc:	2064      	movs	r0, #100	@ 0x64
 80019de:	f7ff ff8b 	bl	80018f8 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED - speed);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff94 	bl	8001918 <__SetIn4PWM>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200000a0 	.word	0x200000a0

080019fc <A_Forward>:
/**
 * @brief 控制电机A后退
 * @param speed 速度值（0-100）
 */
void A_Forward(uint8_t speed)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b64      	cmp	r3, #100	@ 0x64
 8001a0a:	d901      	bls.n	8001a10 <A_Forward+0x14>
        speed = MAX_SPEED;
 8001a0c:	2364      	movs	r3, #100	@ 0x64
 8001a0e:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <A_Forward+0x48>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <A_Forward+0x2c>
        __SetIn1PWM(0);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ff4d 	bl	80018b8 <__SetIn1PWM>
        __SetIn2PWM(speed);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff59 	bl	80018d8 <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 8001a26:	e009      	b.n	8001a3c <A_Forward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff41 	bl	80018b8 <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 8001a36:	2064      	movs	r0, #100	@ 0x64
 8001a38:	f7ff ff4e 	bl	80018d8 <__SetIn2PWM>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000a0 	.word	0x200000a0

08001a48 <B_Backward>:
/**
 * @brief 控制电机B后退
 * @param speed 速度值（0-100）
 */
void B_Backward(uint8_t speed)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b64      	cmp	r3, #100	@ 0x64
 8001a56:	d901      	bls.n	8001a5c <B_Backward+0x14>
        speed = MAX_SPEED;
 8001a58:	2364      	movs	r3, #100	@ 0x64
 8001a5a:	71fb      	strb	r3, [r7, #7]

    if (currentDecayMode == FAST_DECAY) {
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <B_Backward+0x48>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <B_Backward+0x2c>
        __SetIn3PWM(0);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff47 	bl	80018f8 <__SetIn3PWM>
        __SetIn4PWM(speed);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff53 	bl	8001918 <__SetIn4PWM>
    } else {
        __SetIn3PWM(MAX_SPEED - speed);
        __SetIn4PWM(MAX_SPEED);
    }
}
 8001a72:	e009      	b.n	8001a88 <B_Backward+0x40>
        __SetIn3PWM(MAX_SPEED - speed);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff3b 	bl	80018f8 <__SetIn3PWM>
        __SetIn4PWM(MAX_SPEED);
 8001a82:	2064      	movs	r0, #100	@ 0x64
 8001a84:	f7ff ff48 	bl	8001918 <__SetIn4PWM>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000a0 	.word	0x200000a0

08001a94 <RIGHT>:

/**
 * @brief 右转
 */
void RIGHT(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	A_Forward(30);
 8001a98:	201e      	movs	r0, #30
 8001a9a:	f7ff ffaf 	bl	80019fc <A_Forward>
	B_Backward(10);
 8001a9e:	200a      	movs	r0, #10
 8001aa0:	f7ff ffd2 	bl	8001a48 <B_Backward>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 157);
 8001aa4:	4b02      	ldr	r3, [pc, #8]	@ (8001ab0 <RIGHT+0x1c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	229d      	movs	r2, #157	@ 0x9d
 8001aaa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200002d8 	.word	0x200002d8

08001ab4 <LEFT>:

/**
 * @brief 左转
 */
void LEFT(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	A_Backward(10);
 8001ab8:	200a      	movs	r0, #10
 8001aba:	f7ff ff53 	bl	8001964 <A_Backward>
	B_Forward(30);
 8001abe:	201e      	movs	r0, #30
 8001ac0:	f7ff ff76 	bl	80019b0 <B_Forward>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 52);
 8001ac4:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <LEFT+0x1c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2234      	movs	r2, #52	@ 0x34
 8001aca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002d8 	.word	0x200002d8

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6193      	str	r3, [r2, #24]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_MspInit+0x60>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <HAL_MspInit+0x60>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000

08001b38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if(flag == 3){
 8001b40:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d103      	bne.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x18>
		longjmp(three,1);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b4c:	f7fe fb04 	bl	8000158 <longjmp>
	}else if(flag == 4){
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d103      	bne.n	8001b60 <HAL_TIM_PeriodElapsedCallback+0x28>
		longjmp(four,1);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4809      	ldr	r0, [pc, #36]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b5c:	f7fe fafc 	bl	8000158 <longjmp>
	}else if(flag == 5){
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d103      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x38>
		longjmp(five,1);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b6c:	f7fe faf4 	bl	8000158 <longjmp>
	}else{
		return;
 8001b70:	bf00      	nop
	}
}
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200000a8 	.word	0x200000a8
 8001b7c:	200000b0 	.word	0x200000b0
 8001b80:	20000150 	.word	0x20000150
 8001b84:	200001f0 	.word	0x200001f0

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <NMI_Handler+0x4>

08001b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <MemManage_Handler+0x4>

08001ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <UsageFault_Handler+0x4>

08001bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 fcfe 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	HAL_Delay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f000 fd12 	bl	8002610 <HAL_Delay>
	char message3[] = "3 ENABLE!";
 8001bec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <EXTI3_IRQHandler+0xc8>)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf2:	c303      	stmia	r3!, {r0, r1}
 8001bf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)message3, strlen(message3), 100);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fab5 	bl	8000168 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	1d39      	adds	r1, r7, #4
 8001c04:	2364      	movs	r3, #100	@ 0x64
 8001c06:	4829      	ldr	r0, [pc, #164]	@ (8001cac <EXTI3_IRQHandler+0xcc>)
 8001c08:	f002 fdef 	bl	80047ea <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim3);
 8001c0c:	4828      	ldr	r0, [pc, #160]	@ (8001cb0 <EXTI3_IRQHandler+0xd0>)
 8001c0e:	f001 fd11 	bl	8003634 <HAL_TIM_Base_Start_IT>
	flag = 3;
 8001c12:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <EXTI3_IRQHandler+0xd4>)
 8001c14:	2203      	movs	r2, #3
 8001c16:	601a      	str	r2, [r3, #0]
	while(1){
	switch (checkpoint) {
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <EXTI3_IRQHandler+0xd8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	2b13      	cmp	r3, #19
 8001c20:	d840      	bhi.n	8001ca4 <EXTI3_IRQHandler+0xc4>
 8001c22:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <EXTI3_IRQHandler+0x48>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001c7f 	.word	0x08001c7f
 8001c30:	08001c85 	.word	0x08001c85
 8001c34:	08001ca5 	.word	0x08001ca5
 8001c38:	08001ca5 	.word	0x08001ca5
 8001c3c:	08001ca5 	.word	0x08001ca5
 8001c40:	08001c8b 	.word	0x08001c8b
 8001c44:	08001ca5 	.word	0x08001ca5
 8001c48:	08001ca5 	.word	0x08001ca5
 8001c4c:	08001ca5 	.word	0x08001ca5
 8001c50:	08001ca5 	.word	0x08001ca5
 8001c54:	08001ca5 	.word	0x08001ca5
 8001c58:	08001c91 	.word	0x08001c91
 8001c5c:	08001ca5 	.word	0x08001ca5
 8001c60:	08001ca5 	.word	0x08001ca5
 8001c64:	08001ca5 	.word	0x08001ca5
 8001c68:	08001ca5 	.word	0x08001ca5
 8001c6c:	08001ca5 	.word	0x08001ca5
 8001c70:	08001ca5 	.word	0x08001ca5
 8001c74:	08001c9f 	.word	0x08001c9f
		case 1:RIGHT();
 8001c78:	f7ff ff0c 	bl	8001a94 <RIGHT>
			break;
 8001c7c:	e013      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		case 2:RIGHT();
 8001c7e:	f7ff ff09 	bl	8001a94 <RIGHT>
			break;
 8001c82:	e010      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		case 3:RIGHT();
 8001c84:	f7ff ff06 	bl	8001a94 <RIGHT>
			break;
 8001c88:	e00d      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		case 7:RIGHT();
 8001c8a:	f7ff ff03 	bl	8001a94 <RIGHT>
			break;
 8001c8e:	e00a      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		case 13:	A_Forward(30);B_Backward(30);			// 右�?�转，特殊情况特殊处�?
 8001c90:	201e      	movs	r0, #30
 8001c92:	f7ff feb3 	bl	80019fc <A_Forward>
 8001c96:	201e      	movs	r0, #30
 8001c98:	f7ff fed6 	bl	8001a48 <B_Backward>
			break;
 8001c9c:	e003      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		case 20:RIGHT();
 8001c9e:	f7ff fef9 	bl	8001a94 <RIGHT>
			break;
 8001ca2:	e000      	b.n	8001ca6 <EXTI3_IRQHandler+0xc6>
		default:
			break;
 8001ca4:	bf00      	nop
	switch (checkpoint) {
 8001ca6:	e7b7      	b.n	8001c18 <EXTI3_IRQHandler+0x38>
 8001ca8:	080054a4 	.word	0x080054a4
 8001cac:	200003b0 	.word	0x200003b0
 8001cb0:	20000320 	.word	0x20000320
 8001cb4:	200000a8 	.word	0x200000a8
 8001cb8:	200000a4 	.word	0x200000a4

08001cbc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	HAL_Delay(10);
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f000 fca4 	bl	8002610 <HAL_Delay>
	char message4[] = "4 ENABLE!";
 8001cc8:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <EXTI4_IRQHandler+0x54>)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cce:	c303      	stmia	r3!, {r0, r1}
 8001cd0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)message4, strlen(message4), 100);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fa47 	bl	8000168 <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	1d39      	adds	r1, r7, #4
 8001ce0:	2364      	movs	r3, #100	@ 0x64
 8001ce2:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <EXTI4_IRQHandler+0x58>)
 8001ce4:	f002 fd81 	bl	80047ea <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim3);
 8001ce8:	480b      	ldr	r0, [pc, #44]	@ (8001d18 <EXTI4_IRQHandler+0x5c>)
 8001cea:	f001 fca3 	bl	8003634 <HAL_TIM_Base_Start_IT>
	flag = 4;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <EXTI4_IRQHandler+0x60>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	601a      	str	r2, [r3, #0]
	while(1){
	switch (checkpoint) {
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <EXTI4_IRQHandler+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d106      	bne.n	8001d0a <EXTI4_IRQHandler+0x4e>
			case 8:A_Forward(7);B_Backward(25);
 8001cfc:	2007      	movs	r0, #7
 8001cfe:	f7ff fe7d 	bl	80019fc <A_Forward>
 8001d02:	2019      	movs	r0, #25
 8001d04:	f7ff fea0 	bl	8001a48 <B_Backward>
				break;
 8001d08:	e000      	b.n	8001d0c <EXTI4_IRQHandler+0x50>
			default:
				break;
 8001d0a:	bf00      	nop
	switch (checkpoint) {
 8001d0c:	e7f2      	b.n	8001cf4 <EXTI4_IRQHandler+0x38>
 8001d0e:	bf00      	nop
 8001d10:	080054b0 	.word	0x080054b0
 8001d14:	200003b0 	.word	0x200003b0
 8001d18:	20000320 	.word	0x20000320
 8001d1c:	200000a8 	.word	0x200000a8
 8001d20:	200000a4 	.word	0x200000a4

08001d24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_Delay(10);
 8001d2a:	200a      	movs	r0, #10
 8001d2c:	f000 fc70 	bl	8002610 <HAL_Delay>
	char message59[] = "59 ENABLE!";
 8001d30:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <EXTI9_5_IRQHandler+0xbc>)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d36:	c303      	stmia	r3!, {r0, r1}
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	0c12      	lsrs	r2, r2, #16
 8001d3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)message59, strlen(message59), 100);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fa10 	bl	8000168 <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	1d39      	adds	r1, r7, #4
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	4824      	ldr	r0, [pc, #144]	@ (8001de4 <EXTI9_5_IRQHandler+0xc0>)
 8001d52:	f002 fd4a 	bl	80047ea <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d56:	4824      	ldr	r0, [pc, #144]	@ (8001de8 <EXTI9_5_IRQHandler+0xc4>)
 8001d58:	f001 fc6c 	bl	8003634 <HAL_TIM_Base_Start_IT>
	flag = 5;
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <EXTI9_5_IRQHandler+0xc8>)
 8001d5e:	2205      	movs	r2, #5
 8001d60:	601a      	str	r2, [r3, #0]
	while(1){
	switch (checkpoint) {
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <EXTI9_5_IRQHandler+0xcc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d838      	bhi.n	8001ddc <EXTI9_5_IRQHandler+0xb8>
 8001d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <EXTI9_5_IRQHandler+0x4c>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001ddd 	.word	0x08001ddd
 8001d74:	08001ddd 	.word	0x08001ddd
 8001d78:	08001ddd 	.word	0x08001ddd
 8001d7c:	08001ddd 	.word	0x08001ddd
 8001d80:	08001db5 	.word	0x08001db5
 8001d84:	08001dbb 	.word	0x08001dbb
 8001d88:	08001ddd 	.word	0x08001ddd
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001ddd 	.word	0x08001ddd
 8001d94:	08001dc1 	.word	0x08001dc1
 8001d98:	08001ddd 	.word	0x08001ddd
 8001d9c:	08001ddd 	.word	0x08001ddd
 8001da0:	08001ddd 	.word	0x08001ddd
 8001da4:	08001ddd 	.word	0x08001ddd
 8001da8:	08001ddd 	.word	0x08001ddd
 8001dac:	08001ddd 	.word	0x08001ddd
 8001db0:	08001dcf 	.word	0x08001dcf
		case 0:
			break;
		case 4:LEFT();
 8001db4:	f7ff fe7e 	bl	8001ab4 <LEFT>
			break;
 8001db8:	e011      	b.n	8001dde <EXTI9_5_IRQHandler+0xba>
		case 5:LEFT();
 8001dba:	f7ff fe7b 	bl	8001ab4 <LEFT>
			break;
 8001dbe:	e00e      	b.n	8001dde <EXTI9_5_IRQHandler+0xba>
		case 9:A_Backward(25);B_Forward(7);
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	f7ff fdcf 	bl	8001964 <A_Backward>
 8001dc6:	2007      	movs	r0, #7
 8001dc8:	f7ff fdf2 	bl	80019b0 <B_Forward>
			break;
 8001dcc:	e007      	b.n	8001dde <EXTI9_5_IRQHandler+0xba>
		case 16:A_Backward(7);B_Forward(25);					// 大圈
 8001dce:	2007      	movs	r0, #7
 8001dd0:	f7ff fdc8 	bl	8001964 <A_Backward>
 8001dd4:	2019      	movs	r0, #25
 8001dd6:	f7ff fdeb 	bl	80019b0 <B_Forward>
			break;
 8001dda:	e000      	b.n	8001dde <EXTI9_5_IRQHandler+0xba>
		default:
			break;
 8001ddc:	bf00      	nop
	switch (checkpoint) {
 8001dde:	e7c0      	b.n	8001d62 <EXTI9_5_IRQHandler+0x3e>
 8001de0:	080054bc 	.word	0x080054bc
 8001de4:	200003b0 	.word	0x200003b0
 8001de8:	20000320 	.word	0x20000320
 8001dec:	200000a8 	.word	0x200000a8
 8001df0:	200000a4 	.word	0x200000a4

08001df4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <TIM3_IRQHandler+0x10>)
 8001dfa:	f001 fe97 	bl	8003b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000320 	.word	0x20000320

08001e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <USART3_IRQHandler+0x10>)
 8001e0e:	f002 fd77 	bl	8004900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200003b0 	.word	0x200003b0

08001e1c <_getpid>:
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	2301      	movs	r3, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <_kill>:
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
 8001e34:	f003 faa6 	bl	8005384 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2216      	movs	r2, #22
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_exit>:
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	f04f 31ff 	mov.w	r1, #4294967295
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffe7 	bl	8001e2a <_kill>
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <_exit+0x12>

08001e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b096      	sub	sp, #88	@ 0x58
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fa65 	bl	8005374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eaa:	4b50      	ldr	r3, [pc, #320]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001eac:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <MX_TIM1_Init+0x184>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001eb2:	2247      	movs	r2, #71	@ 0x47
 8001eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001ebe:	2263      	movs	r2, #99	@ 0x63
 8001ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec8:	4b48      	ldr	r3, [pc, #288]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed4:	4845      	ldr	r0, [pc, #276]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001ed6:	f001 fb13 	bl	8003500 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ee0:	f7ff fce3 	bl	80018aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eee:	4619      	mov	r1, r3
 8001ef0:	483e      	ldr	r0, [pc, #248]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001ef2:	f001 ffcd 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001efc:	f7ff fcd5 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f00:	483a      	ldr	r0, [pc, #232]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f02:	f001 fbe9 	bl	80036d8 <HAL_TIM_PWM_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001f0c:	f7ff fccd 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4833      	ldr	r0, [pc, #204]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f20:	f002 fb52 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001f2a:	f7ff fcbe 	bl	80018aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2e:	2360      	movs	r3, #96	@ 0x60
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4826      	ldr	r0, [pc, #152]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f54:	f001 feda 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001f5e:	f7ff fca4 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f66:	2204      	movs	r2, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4820      	ldr	r0, [pc, #128]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f6c:	f001 fece 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001f76:	f7ff fc98 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7e:	2208      	movs	r2, #8
 8001f80:	4619      	mov	r1, r3
 8001f82:	481a      	ldr	r0, [pc, #104]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f84:	f001 fec2 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001f8e:	f7ff fc8c 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f96:	220c      	movs	r2, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4814      	ldr	r0, [pc, #80]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001f9c:	f001 feb6 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001fa6:	f7ff fc80 	bl	80018aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001fce:	f002 fb59 	bl	8004684 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001fd8:	f7ff fc67 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fdc:	4803      	ldr	r0, [pc, #12]	@ (8001fec <MX_TIM1_Init+0x180>)
 8001fde:	f000 f9bf 	bl	8002360 <HAL_TIM_MspPostInit>

}
 8001fe2:	bf00      	nop
 8001fe4:	3758      	adds	r7, #88	@ 0x58
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000290 	.word	0x20000290
 8001ff0:	40012c00 	.word	0x40012c00

08001ff4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]
 8002022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002024:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002026:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800202a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800202c:	4b35      	ldr	r3, [pc, #212]	@ (8002104 <MX_TIM2_Init+0x110>)
 800202e:	2247      	movs	r2, #71	@ 0x47
 8002030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002038:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <MX_TIM2_Init+0x110>)
 800203a:	2263      	movs	r2, #99	@ 0x63
 800203c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b2f      	ldr	r3, [pc, #188]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204a:	482e      	ldr	r0, [pc, #184]	@ (8002104 <MX_TIM2_Init+0x110>)
 800204c:	f001 fa58 	bl	8003500 <HAL_TIM_Base_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002056:	f7ff fc28 	bl	80018aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002064:	4619      	mov	r1, r3
 8002066:	4827      	ldr	r0, [pc, #156]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002068:	f001 ff12 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002072:	f7ff fc1a 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002076:	4823      	ldr	r0, [pc, #140]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002078:	f001 fb2e 	bl	80036d8 <HAL_TIM_PWM_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002082:	f7ff fc12 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800208e:	f107 0320 	add.w	r3, r7, #32
 8002092:	4619      	mov	r1, r3
 8002094:	481b      	ldr	r0, [pc, #108]	@ (8002104 <MX_TIM2_Init+0x110>)
 8002096:	f002 fa97 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80020a0:	f7ff fc03 	bl	80018aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a4:	2360      	movs	r3, #96	@ 0x60
 80020a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4812      	ldr	r0, [pc, #72]	@ (8002104 <MX_TIM2_Init+0x110>)
 80020bc:	f001 fe26 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80020c6:	f7ff fbf0 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2204      	movs	r2, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <MX_TIM2_Init+0x110>)
 80020d2:	f001 fe1b 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80020dc:	f7ff fbe5 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2208      	movs	r2, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	@ (8002104 <MX_TIM2_Init+0x110>)
 80020e8:	f001 fe10 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80020f2:	f7ff fbda 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <MX_TIM2_Init+0x110>)
 80020f8:	f000 f932 	bl	8002360 <HAL_TIM_MspPostInit>

}
 80020fc:	bf00      	nop
 80020fe:	3738      	adds	r7, #56	@ 0x38
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200002d8 	.word	0x200002d8

08002108 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002124:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <MX_TIM3_Init+0x94>)
 8002126:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <MX_TIM3_Init+0x98>)
 8002128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800212a:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <MX_TIM3_Init+0x94>)
 800212c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_TIM3_Init+0x94>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <MX_TIM3_Init+0x94>)
 800213a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800213e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_TIM3_Init+0x94>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <MX_TIM3_Init+0x94>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800214c:	4813      	ldr	r0, [pc, #76]	@ (800219c <MX_TIM3_Init+0x94>)
 800214e:	f001 f9d7 	bl	8003500 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002158:	f7ff fba7 	bl	80018aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4619      	mov	r1, r3
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <MX_TIM3_Init+0x94>)
 800216a:	f001 fe91 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002174:	f7ff fb99 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_TIM3_Init+0x94>)
 8002186:	f002 fa1f 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002190:	f7ff fb8b 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000320 	.word	0x20000320
 80021a0:	40000400 	.word	0x40000400

080021a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	2224      	movs	r2, #36	@ 0x24
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 f8de 	bl	8005374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021c0:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021c2:	4a21      	ldr	r2, [pc, #132]	@ (8002248 <MX_TIM4_Init+0xa4>)
 80021c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <MX_TIM4_Init+0xa0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80021f6:	230f      	movs	r3, #15
 80021f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021fe:	2301      	movs	r3, #1
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002206:	230f      	movs	r3, #15
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	4619      	mov	r1, r3
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <MX_TIM4_Init+0xa0>)
 8002212:	f001 fb5b 	bl	80038cc <HAL_TIM_Encoder_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800221c:	f7ff fb45 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <MX_TIM4_Init+0xa0>)
 800222e:	f002 f9cb 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002238:	f7ff fb37 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	3730      	adds	r7, #48	@ 0x30
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000368 	.word	0x20000368
 8002248:	40000800 	.word	0x40000800

0800224c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <HAL_TIM_Base_MspInit+0x8c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4a1e      	ldr	r2, [pc, #120]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 8002264:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002268:	6193      	str	r3, [r2, #24]
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002276:	e02a      	b.n	80022ce <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002280:	d10c      	bne.n	800229c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a15      	ldr	r2, [pc, #84]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	61d3      	str	r3, [r2, #28]
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
}
 800229a:	e018      	b.n	80022ce <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_TIM_Base_MspInit+0x94>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d113      	bne.n	80022ce <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_TIM_Base_MspInit+0x90>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	201d      	movs	r0, #29
 80022c4:	f000 fa9f 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022c8:	201d      	movs	r0, #29
 80022ca:	f000 fab8 	bl	800283e <HAL_NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40000400 	.word	0x40000400

080022e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x70>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d123      	bne.n	800234c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	61d3      	str	r3, [r2, #28]
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x74>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002334:	23c0      	movs	r3, #192	@ 0xc0
 8002336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	@ (800235c <HAL_TIM_Encoder_MspInit+0x78>)
 8002348:	f000 fb46 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40000800 	.word	0x40000800
 8002358:	40021000 	.word	0x40021000
 800235c:	40010c00 	.word	0x40010c00

08002360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_TIM_MspPostInit+0x98>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d119      	bne.n	80023b4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002380:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a1d      	ldr	r2, [pc, #116]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002398:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	4814      	ldr	r0, [pc, #80]	@ (8002400 <HAL_TIM_MspPostInit+0xa0>)
 80023ae:	f000 fb13 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023b2:	e01c      	b.n	80023ee <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023bc:	d117      	bne.n	80023ee <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6193      	str	r3, [r2, #24]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_TIM_MspPostInit+0x9c>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin;
 80023d6:	2307      	movs	r3, #7
 80023d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2302      	movs	r3, #2
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	4619      	mov	r1, r3
 80023e8:	4805      	ldr	r0, [pc, #20]	@ (8002400 <HAL_TIM_MspPostInit+0xa0>)
 80023ea:	f000 faf5 	bl	80029d8 <HAL_GPIO_Init>
}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010800 	.word	0x40010800

08002404 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <MX_USART3_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_USART3_UART_Init+0x4c>)
 800243c:	f002 f985 	bl	800474a <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f7ff fa30 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200003b0 	.word	0x200003b0
 8002454:	40004800 	.word	0x40004800

08002458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a20      	ldr	r2, [pc, #128]	@ (80024f4 <HAL_UART_MspInit+0x9c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d139      	bne.n	80024ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 800247e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002482:	61d3      	str	r3, [r2, #28]
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_UART_MspInit+0xa0>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0310 	add.w	r3, r7, #16
 80024ba:	4619      	mov	r1, r3
 80024bc:	480f      	ldr	r0, [pc, #60]	@ (80024fc <HAL_UART_MspInit+0xa4>)
 80024be:	f000 fa8b 	bl	80029d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	4809      	ldr	r0, [pc, #36]	@ (80024fc <HAL_UART_MspInit+0xa4>)
 80024d8:	f000 fa7e 	bl	80029d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2027      	movs	r0, #39	@ 0x27
 80024e2:	f000 f990 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024e6:	2027      	movs	r0, #39	@ 0x27
 80024e8:	f000 f9a9 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40004800 	.word	0x40004800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010c00 	.word	0x40010c00

08002500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002500:	f7ff fcae 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480b      	ldr	r0, [pc, #44]	@ (8002534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002506:	490c      	ldr	r1, [pc, #48]	@ (8002538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002508:	4a0c      	ldr	r2, [pc, #48]	@ (800253c <LoopFillZerobss+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800251c:	4c09      	ldr	r4, [pc, #36]	@ (8002544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252a:	f002 ff31 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252e:	f7ff f91d 	bl	800176c <main>
  bx lr
 8002532:	4770      	bx	lr
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800253c:	080055d4 	.word	0x080055d4
  ldr r2, =_sbss
 8002540:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002544:	20000538 	.word	0x20000538

08002548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC1_2_IRQHandler>
	...

0800254c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_Init+0x28>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_Init+0x28>)
 8002556:	f043 0310 	orr.w	r3, r3, #16
 800255a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 f947 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	200f      	movs	r0, #15
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fab4 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f95f 	bl	800285a <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 f927 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_IncTick+0x1c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_IncTick+0x20>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a03      	ldr	r2, [pc, #12]	@ (80025f8 <HAL_IncTick+0x20>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000008 	.word	0x20000008
 80025f8:	200003f8 	.word	0x200003f8

080025fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b02      	ldr	r3, [pc, #8]	@ (800260c <HAL_GetTick+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	200003f8 	.word	0x200003f8

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff fff0 	bl	80025fc <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffe0 	bl	80025fc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008

08002658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002674:	4013      	ands	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268a:	4a04      	ldr	r2, [pc, #16]	@ (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	60d3      	str	r3, [r2, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a4:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <__NVIC_GetPriorityGrouping+0x18>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	f003 0307 	and.w	r3, r3, #7
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	db0b      	blt.n	80026e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4906      	ldr	r1, [pc, #24]	@ (80026f0 <__NVIC_EnableIRQ+0x34>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2001      	movs	r0, #1
 80026de:	fa00 f202 	lsl.w	r2, r0, r2
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	@ (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	@ (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7ff ff90 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff2d 	bl	8002658 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff42 	bl	80026a0 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff90 	bl	8002748 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5f 	bl	80026f4 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff35 	bl	80026bc <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d008      	beq.n	800289c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e020      	b.n	80028de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020e 	bic.w	r2, r2, #14
 80028aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d005      	beq.n	800290c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e051      	b.n	80029b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 020e 	bic.w	r2, r2, #14
 800291a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <HAL_DMA_Abort_IT+0xd4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d029      	beq.n	800298a <HAL_DMA_Abort_IT+0xa2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <HAL_DMA_Abort_IT+0xd8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_Abort_IT+0x9e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <HAL_DMA_Abort_IT+0xdc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01a      	beq.n	8002980 <HAL_DMA_Abort_IT+0x98>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_DMA_Abort_IT+0xe0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d012      	beq.n	800297a <HAL_DMA_Abort_IT+0x92>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <HAL_DMA_Abort_IT+0xe4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00a      	beq.n	8002974 <HAL_DMA_Abort_IT+0x8c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_DMA_Abort_IT+0xe8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d102      	bne.n	800296e <HAL_DMA_Abort_IT+0x86>
 8002968:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800296c:	e00e      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 800296e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002972:	e00b      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 8002974:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002978:	e008      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 800297a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800297e:	e005      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 8002980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002984:	e002      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 8002986:	2310      	movs	r3, #16
 8002988:	e000      	b.n	800298c <HAL_DMA_Abort_IT+0xa4>
 800298a:	2301      	movs	r3, #1
 800298c:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_DMA_Abort_IT+0xec>)
 800298e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    } 
  }
  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40020008 	.word	0x40020008
 80029c0:	4002001c 	.word	0x4002001c
 80029c4:	40020030 	.word	0x40020030
 80029c8:	40020044 	.word	0x40020044
 80029cc:	40020058 	.word	0x40020058
 80029d0:	4002006c 	.word	0x4002006c
 80029d4:	40020000 	.word	0x40020000

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	@ 0x2c
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	e169      	b.n	8002cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029ec:	2201      	movs	r2, #1
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f040 8158 	bne.w	8002cba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002c78 <HAL_GPIO_Init+0x2a0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d05e      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
 8002a14:	4a98      	ldr	r2, [pc, #608]	@ (8002c78 <HAL_GPIO_Init+0x2a0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d875      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a1a:	4a98      	ldr	r2, [pc, #608]	@ (8002c7c <HAL_GPIO_Init+0x2a4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d058      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
 8002a20:	4a96      	ldr	r2, [pc, #600]	@ (8002c7c <HAL_GPIO_Init+0x2a4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d86f      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a26:	4a96      	ldr	r2, [pc, #600]	@ (8002c80 <HAL_GPIO_Init+0x2a8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d052      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
 8002a2c:	4a94      	ldr	r2, [pc, #592]	@ (8002c80 <HAL_GPIO_Init+0x2a8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d869      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a32:	4a94      	ldr	r2, [pc, #592]	@ (8002c84 <HAL_GPIO_Init+0x2ac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d04c      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
 8002a38:	4a92      	ldr	r2, [pc, #584]	@ (8002c84 <HAL_GPIO_Init+0x2ac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d863      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a3e:	4a92      	ldr	r2, [pc, #584]	@ (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d046      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
 8002a44:	4a90      	ldr	r2, [pc, #576]	@ (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d85d      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d82a      	bhi.n	8002aa4 <HAL_GPIO_Init+0xcc>
 8002a4e:	2b12      	cmp	r3, #18
 8002a50:	d859      	bhi.n	8002b06 <HAL_GPIO_Init+0x12e>
 8002a52:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <HAL_GPIO_Init+0x80>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002ad3 	.word	0x08002ad3
 8002a5c:	08002aad 	.word	0x08002aad
 8002a60:	08002abf 	.word	0x08002abf
 8002a64:	08002b01 	.word	0x08002b01
 8002a68:	08002b07 	.word	0x08002b07
 8002a6c:	08002b07 	.word	0x08002b07
 8002a70:	08002b07 	.word	0x08002b07
 8002a74:	08002b07 	.word	0x08002b07
 8002a78:	08002b07 	.word	0x08002b07
 8002a7c:	08002b07 	.word	0x08002b07
 8002a80:	08002b07 	.word	0x08002b07
 8002a84:	08002b07 	.word	0x08002b07
 8002a88:	08002b07 	.word	0x08002b07
 8002a8c:	08002b07 	.word	0x08002b07
 8002a90:	08002b07 	.word	0x08002b07
 8002a94:	08002b07 	.word	0x08002b07
 8002a98:	08002b07 	.word	0x08002b07
 8002a9c:	08002ab5 	.word	0x08002ab5
 8002aa0:	08002ac9 	.word	0x08002ac9
 8002aa4:	4a79      	ldr	r2, [pc, #484]	@ (8002c8c <HAL_GPIO_Init+0x2b4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aaa:	e02c      	b.n	8002b06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	623b      	str	r3, [r7, #32]
          break;
 8002ab2:	e029      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	623b      	str	r3, [r7, #32]
          break;
 8002abc:	e024      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	3308      	adds	r3, #8
 8002ac4:	623b      	str	r3, [r7, #32]
          break;
 8002ac6:	e01f      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	330c      	adds	r3, #12
 8002ace:	623b      	str	r3, [r7, #32]
          break;
 8002ad0:	e01a      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ada:	2304      	movs	r3, #4
 8002adc:	623b      	str	r3, [r7, #32]
          break;
 8002ade:	e013      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	611a      	str	r2, [r3, #16]
          break;
 8002af2:	e009      	b.n	8002b08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af4:	2308      	movs	r3, #8
 8002af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	615a      	str	r2, [r3, #20]
          break;
 8002afe:	e003      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
          break;
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x130>
          break;
 8002b06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2bff      	cmp	r3, #255	@ 0xff
 8002b0c:	d801      	bhi.n	8002b12 <HAL_GPIO_Init+0x13a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	e001      	b.n	8002b16 <HAL_GPIO_Init+0x13e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2bff      	cmp	r3, #255	@ 0xff
 8002b1c:	d802      	bhi.n	8002b24 <HAL_GPIO_Init+0x14c>
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x152>
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	3b08      	subs	r3, #8
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	210f      	movs	r1, #15
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80b1 	beq.w	8002cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b58:	4b4d      	ldr	r3, [pc, #308]	@ (8002c90 <HAL_GPIO_Init+0x2b8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c90 <HAL_GPIO_Init+0x2b8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_GPIO_Init+0x2b8>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b70:	4a48      	ldr	r2, [pc, #288]	@ (8002c94 <HAL_GPIO_Init+0x2bc>)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a40      	ldr	r2, [pc, #256]	@ (8002c98 <HAL_GPIO_Init+0x2c0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_GPIO_Init+0x1ec>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c9c <HAL_GPIO_Init+0x2c4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_GPIO_Init+0x1e8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca0 <HAL_GPIO_Init+0x2c8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca4 <HAL_GPIO_Init+0x2cc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_GPIO_Init+0x1e0>
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e006      	b.n	8002bc6 <HAL_GPIO_Init+0x1ee>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e004      	b.n	8002bc6 <HAL_GPIO_Init+0x1ee>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e002      	b.n	8002bc6 <HAL_GPIO_Init+0x1ee>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_GPIO_Init+0x1ee>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	f002 0203 	and.w	r2, r2, #3
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bd6:	492f      	ldr	r1, [pc, #188]	@ (8002c94 <HAL_GPIO_Init+0x2bc>)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	492c      	ldr	r1, [pc, #176]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4928      	ldr	r1, [pc, #160]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c18:	4b23      	ldr	r3, [pc, #140]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4922      	ldr	r1, [pc, #136]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c26:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	491e      	ldr	r1, [pc, #120]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4918      	ldr	r1, [pc, #96]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4914      	ldr	r1, [pc, #80]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d021      	beq.n	8002cac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e021      	b.n	8002cba <HAL_GPIO_Init+0x2e2>
 8002c76:	bf00      	nop
 8002c78:	10320000 	.word	0x10320000
 8002c7c:	10310000 	.word	0x10310000
 8002c80:	10220000 	.word	0x10220000
 8002c84:	10210000 	.word	0x10210000
 8002c88:	10120000 	.word	0x10120000
 8002c8c:	10110000 	.word	0x10110000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40010800 	.word	0x40010800
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40011400 	.word	0x40011400
 8002ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_GPIO_Init+0x304>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	4909      	ldr	r1, [pc, #36]	@ (8002cdc <HAL_GPIO_Init+0x304>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f ae8e 	bne.w	80029ec <HAL_GPIO_Init+0x14>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	372c      	adds	r7, #44	@ 0x2c
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e272      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8087 	beq.w	8002e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d00:	4b92      	ldr	r3, [pc, #584]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d00c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d112      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5e>
 8002d18:	4b8c      	ldr	r3, [pc, #560]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b89      	ldr	r3, [pc, #548]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d06c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x12c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d168      	bne.n	8002e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e24c      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x76>
 8002d48:	4b80      	ldr	r3, [pc, #512]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e02e      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x98>
 8002d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7a      	ldr	r2, [pc, #488]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b78      	ldr	r3, [pc, #480]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a77      	ldr	r2, [pc, #476]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0xbc>
 8002d82:	4b72      	ldr	r3, [pc, #456]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a71      	ldr	r2, [pc, #452]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b68      	ldr	r3, [pc, #416]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a67      	ldr	r2, [pc, #412]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fc1e 	bl	80025fc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff fc1a 	bl	80025fc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e200      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe4>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff fc0a 	bl	80025fc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff fc06 	bl	80025fc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1ec      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b53      	ldr	r3, [pc, #332]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x10c>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e26:	4b49      	ldr	r3, [pc, #292]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x18c>
 8002e32:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x176>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c0      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3d      	ldr	r3, [pc, #244]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4939      	ldr	r1, [pc, #228]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff fbbf 	bl	80025fc <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7ff fbbb 	bl	80025fc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a1      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4927      	ldr	r1, [pc, #156]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b26      	ldr	r3, [pc, #152]	@ (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7ff fb9e 	bl	80025fc <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7ff fb9a 	bl	80025fc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e180      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03a      	beq.n	8002f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7ff fb7e 	bl	80025fc <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7ff fb7a 	bl	80025fc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e160      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 face 	bl	80034c4 <RCC_Delay>
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7ff fb64 	bl	80025fc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff fb60 	bl	80025fc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d908      	bls.n	8002f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e146      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	42420000 	.word	0x42420000
 8002f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	4b92      	ldr	r3, [pc, #584]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e9      	bne.n	8002f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a6 	beq.w	80030be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f76:	4b8b      	ldr	r3, [pc, #556]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4b88      	ldr	r3, [pc, #544]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4a87      	ldr	r2, [pc, #540]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	61d3      	str	r3, [r2, #28]
 8002f8e:	4b85      	ldr	r3, [pc, #532]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b82      	ldr	r3, [pc, #520]	@ (80031a8 <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b7f      	ldr	r3, [pc, #508]	@ (80031a8 <HAL_RCC_OscConfig+0x4c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7e      	ldr	r2, [pc, #504]	@ (80031a8 <HAL_RCC_OscConfig+0x4c8>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7ff fb21 	bl	80025fc <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7ff fb1d 	bl	80025fc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	@ 0x64
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e103      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b75      	ldr	r3, [pc, #468]	@ (80031a8 <HAL_RCC_OscConfig+0x4c8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x312>
 8002fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	e02d      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x334>
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a69      	ldr	r2, [pc, #420]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	4b67      	ldr	r3, [pc, #412]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a66      	ldr	r2, [pc, #408]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	e01c      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b05      	cmp	r3, #5
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_OscConfig+0x356>
 800301c:	4b61      	ldr	r3, [pc, #388]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a60      	ldr	r2, [pc, #384]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	4b5e      	ldr	r3, [pc, #376]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a5d      	ldr	r2, [pc, #372]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	e00b      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8003036:	4b5b      	ldr	r3, [pc, #364]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a5a      	ldr	r2, [pc, #360]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	4b58      	ldr	r3, [pc, #352]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a57      	ldr	r2, [pc, #348]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7ff fad1 	bl	80025fc <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7ff facd 	bl	80025fc <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0b1      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	4b4b      	ldr	r3, [pc, #300]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <HAL_RCC_OscConfig+0x37e>
 8003080:	e014      	b.n	80030ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7ff fabb 	bl	80025fc <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7ff fab7 	bl	80025fc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e09b      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	4b40      	ldr	r3, [pc, #256]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b3c      	ldr	r3, [pc, #240]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a3b      	ldr	r2, [pc, #236]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8087 	beq.w	80031d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c8:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d061      	beq.n	8003198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d146      	bne.n	800316a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b33      	ldr	r3, [pc, #204]	@ (80031ac <HAL_RCC_OscConfig+0x4cc>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7ff fa8b 	bl	80025fc <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ea:	f7ff fa87 	bl	80025fc <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e06d      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fc:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d108      	bne.n	8003124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003112:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4921      	ldr	r1, [pc, #132]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003124:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a19      	ldr	r1, [r3, #32]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	430b      	orrs	r3, r1
 8003136:	491b      	ldr	r1, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7ff fa5b 	bl	80025fc <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314a:	f7ff fa57 	bl	80025fc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e03d      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x46a>
 8003168:	e035      	b.n	80031d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_RCC_OscConfig+0x4cc>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff fa44 	bl	80025fc <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7ff fa40 	bl	80025fc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e026      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x498>
 8003196:	e01e      	b.n	80031d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e019      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_OscConfig+0x500>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0d0      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b67      	ldr	r3, [pc, #412]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4965      	ldr	r1, [pc, #404]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a58      	ldr	r2, [pc, #352]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800324a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a52      	ldr	r2, [pc, #328]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d040      	beq.n	8003304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d115      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	4b41      	ldr	r3, [pc, #260]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e073      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b3d      	ldr	r3, [pc, #244]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06b      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b39      	ldr	r3, [pc, #228]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4936      	ldr	r1, [pc, #216]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7ff f992 	bl	80025fc <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7ff f98e 	bl	80025fc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e053      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d210      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4922      	ldr	r1, [pc, #136]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1cc>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f8f0 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40022000 	.word	0x40022000
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080054c8 	.word	0x080054c8
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033d2:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <HAL_RCC_GetSysClockFreq+0x94>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d002      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x30>
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d003      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x36>
 80033e6:	e027      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	e027      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0c9b      	lsrs	r3, r3, #18
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003406:	4b11      	ldr	r3, [pc, #68]	@ (800344c <HAL_RCC_GetSysClockFreq+0x94>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0c5b      	lsrs	r3, r3, #17
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	4a11      	ldr	r2, [pc, #68]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x98>)
 800341a:	fb03 f202 	mul.w	r2, r3, r2
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e004      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0c      	ldr	r2, [pc, #48]	@ (800345c <HAL_RCC_GetSysClockFreq+0xa4>)
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	613b      	str	r3, [r7, #16]
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x98>)
 800343a:	613b      	str	r3, [r7, #16]
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	693b      	ldr	r3, [r7, #16]
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	007a1200 	.word	0x007a1200
 8003454:	080054e0 	.word	0x080054e0
 8003458:	080054f0 	.word	0x080054f0
 800345c:	003d0900 	.word	0x003d0900

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003464:	4b02      	ldr	r3, [pc, #8]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x10>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000000 	.word	0x20000000

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff2 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	080054d8 	.word	0x080054d8

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffde 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0adb      	lsrs	r3, r3, #11
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	080054d8 	.word	0x080054d8

080034c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <RCC_Delay+0x34>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <RCC_Delay+0x38>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a5b      	lsrs	r3, r3, #9
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034e0:	bf00      	nop
  }
  while (Delay --);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	60fa      	str	r2, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f9      	bne.n	80034e0 <RCC_Delay+0x1c>
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	20000000 	.word	0x20000000
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e041      	b.n	8003596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe fe90 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 fd92 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e032      	b.n	800361e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_TIM_Base_Start+0x88>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_TIM_Base_Start+0x48>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d2:	d009      	beq.n	80035e8 <HAL_TIM_Base_Start+0x48>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <HAL_TIM_Base_Start+0x8c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_TIM_Base_Start+0x48>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <HAL_TIM_Base_Start+0x90>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d111      	bne.n	800360c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d010      	beq.n	800361c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	e007      	b.n	800361c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e03a      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <HAL_TIM_Base_Start_IT+0x98>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x58>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d009      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x58>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x58>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d010      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e007      	b.n	80036c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800

080036d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e041      	b.n	800376e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f839 	bl	8003776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f000 fca6 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e05e      	b.n	80038b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fea0 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d107      	bne.n	800385a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <HAL_TIM_PWM_Start+0x13c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_TIM_PWM_Start+0x140>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d010      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e093      	b.n	8003a08 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fe fcf5 	bl	80022e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 fba1 	bl	8004068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4313      	orrs	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800396c:	f023 030c 	bic.w	r3, r3, #12
 8003970:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003978:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	4313      	orrs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	4313      	orrs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4313      	orrs	r3, r2
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d110      	bne.n	8003a62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d102      	bne.n	8003a4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a46:	7b7b      	ldrb	r3, [r7, #13]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e069      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a60:	e031      	b.n	8003ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d110      	bne.n	8003a8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d102      	bne.n	8003a74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a6e:	7b3b      	ldrb	r3, [r7, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e055      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a88:	e01d      	b.n	8003ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a96:	7b7b      	ldrb	r3, [r7, #13]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a9c:	7b3b      	ldrb	r3, [r7, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e03e      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_TIM_Encoder_Start+0xc4>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d008      	beq.n	8003ae4 <HAL_TIM_Encoder_Start+0xd4>
 8003ad2:	e00f      	b.n	8003af4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fd4f 	bl	8004580 <TIM_CCxChannelCmd>
      break;
 8003ae2:	e016      	b.n	8003b12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2104      	movs	r1, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fd47 	bl	8004580 <TIM_CCxChannelCmd>
      break;
 8003af2:	e00e      	b.n	8003b12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2201      	movs	r2, #1
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fd3f 	bl	8004580 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fd38 	bl	8004580 <TIM_CCxChannelCmd>
      break;
 8003b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d020      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0202 	mvn.w	r2, #2
 8003b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa5a 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa4d 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa5c 	bl	8004042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d020      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01b      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0204 	mvn.w	r2, #4
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa34 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa27 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa36 	bl	8004042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0208 	mvn.w	r2, #8
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa0e 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa01 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa10 	bl	8004042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9e8 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9db 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f9ea 	bl	8004042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0201 	mvn.w	r2, #1
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd ff50 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00c      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fd3e 	bl	8004738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9ba 	bl	8004054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0220 	mvn.w	r2, #32
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fd11 	bl	8004726 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ae      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	f200 809f 	bhi.w	8003e78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003e79 	.word	0x08003e79
 8003d48:	08003e79 	.word	0x08003e79
 8003d4c:	08003e79 	.word	0x08003e79
 8003d50:	08003db5 	.word	0x08003db5
 8003d54:	08003e79 	.word	0x08003e79
 8003d58:	08003e79 	.word	0x08003e79
 8003d5c:	08003e79 	.word	0x08003e79
 8003d60:	08003df7 	.word	0x08003df7
 8003d64:	08003e79 	.word	0x08003e79
 8003d68:	08003e79 	.word	0x08003e79
 8003d6c:	08003e79 	.word	0x08003e79
 8003d70:	08003e37 	.word	0x08003e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f9e2 	bl	8004144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6999      	ldr	r1, [r3, #24]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	619a      	str	r2, [r3, #24]
      break;
 8003db2:	e064      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fa28 	bl	8004210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      break;
 8003df4:	e043      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fa71 	bl	80042e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0208 	orr.w	r2, r2, #8
 8003e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0204 	bic.w	r2, r2, #4
 8003e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
      break;
 8003e34:	e023      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fabb 	bl	80043b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0b4      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x186>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d03e      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eea:	f200 8087 	bhi.w	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	f000 8086 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x172>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efa:	d87f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b70      	cmp	r3, #112	@ 0x70
 8003efe:	d01a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xa6>
 8003f00:	2b70      	cmp	r3, #112	@ 0x70
 8003f02:	d87b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b60      	cmp	r3, #96	@ 0x60
 8003f06:	d050      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x11a>
 8003f08:	2b60      	cmp	r3, #96	@ 0x60
 8003f0a:	d877      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b50      	cmp	r3, #80	@ 0x50
 8003f0e:	d03c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfa>
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d873      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d058      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x13a>
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d86f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b30      	cmp	r3, #48	@ 0x30
 8003f1e:	d064      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b30      	cmp	r3, #48	@ 0x30
 8003f22:	d86b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d060      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d867      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d05a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	e062      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	f000 fafc 	bl	8004542 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
      break;
 8003f62:	e04f      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	f000 fae5 	bl	8004542 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e03c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 fa5c 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2150      	movs	r1, #80	@ 0x50
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fab3 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e02c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fa7a 	bl	80044b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2160      	movs	r1, #96	@ 0x60
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 faa3 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e01c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 fa3c 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa93 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e00c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f000 fa8a 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003ffa:	e003      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e000      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a2f      	ldr	r2, [pc, #188]	@ (8004138 <TIM_Base_SetConfig+0xd0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d007      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2c      	ldr	r2, [pc, #176]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2b      	ldr	r2, [pc, #172]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <TIM_Base_SetConfig+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <TIM_Base_SetConfig+0xd4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <TIM_Base_SetConfig+0xd8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <TIM_Base_SetConfig+0xd0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]
  }
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800

08004144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 0201 	bic.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <TIM_OC1_SetConfig+0xc8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0308 	bic.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a13      	ldr	r2, [pc, #76]	@ (800420c <TIM_OC1_SetConfig+0xc8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40012c00 	.word	0x40012c00

08004210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f023 0210 	bic.w	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <TIM_OC2_SetConfig+0xd0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10d      	bne.n	800428c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <TIM_OC2_SetConfig+0xd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d113      	bne.n	80042bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800429a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00

080042e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10d      	bne.n	800435e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800435c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <TIM_OC3_SetConfig+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800436c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00

080043b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <TIM_OC4_SetConfig+0x98>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0210 	bic.w	r2, r3, #16
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	031b      	lsls	r3, r3, #12
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	f043 0307 	orr.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004542:	b480      	push	{r7}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	431a      	orrs	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e046      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a10      	ldr	r2, [pc, #64]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800

08004684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800469c:	2302      	movs	r3, #2
 800469e:	e03d      	b.n	800471c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e042      	b.n	80047e2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fd fe71 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2224      	movs	r2, #36	@ 0x24
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800478c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fd62 	bl	8005258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b08a      	sub	sp, #40	@ 0x28
 80047ee:	af02      	add	r7, sp, #8
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b20      	cmp	r3, #32
 8004808:	d175      	bne.n	80048f6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_UART_Transmit+0x2c>
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06e      	b.n	80048f8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2221      	movs	r2, #33	@ 0x21
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004828:	f7fd fee8 	bl	80025fc <HAL_GetTick>
 800482c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004842:	d108      	bne.n	8004856 <HAL_UART_Transmit+0x6c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e003      	b.n	800485e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800485e:	e02e      	b.n	80048be <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	2180      	movs	r1, #128	@ 0x80
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fb00 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e03a      	b.n	80048f8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004896:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	3302      	adds	r3, #2
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e007      	b.n	80048b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1cb      	bne.n	8004860 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2140      	movs	r1, #64	@ 0x40
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 facc 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0ba      	sub	sp, #232	@ 0xe8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800493e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_UART_IRQHandler+0x66>
 8004952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fbbc 	bl	80050dc <UART_Receive_IT>
      return;
 8004964:	e25b      	b.n	8004e1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80de 	beq.w	8004b2c <HAL_UART_IRQHandler+0x22c>
 8004970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004980:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80d1 	beq.w	8004b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_UART_IRQHandler+0xae>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_UART_IRQHandler+0xd2>
 80049ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_UART_IRQHandler+0xf6>
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <HAL_UART_IRQHandler+0x126>
 8004a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 81f2 	beq.w	8004e14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_UART_IRQHandler+0x14e>
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb47 	bl	80050dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <HAL_UART_IRQHandler+0x17a>
 8004a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04f      	beq.n	8004b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa51 	bl	8004f22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d041      	beq.n	8004b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004aba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1d9      	bne.n	8004a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ce0 <HAL_UART_IRQHandler+0x3e0>)
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd fefa 	bl	80028e8 <HAL_DMA_Abort_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e00e      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f99c 	bl	8004e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e00a      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f998 	bl	8004e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e006      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f994 	bl	8004e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b26:	e175      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	bf00      	nop
    return;
 8004b2a:	e173      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 814f 	bne.w	8004dd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8148 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8141 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80b6 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8145 	beq.w	8004e18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f080 813e 	bcs.w	8004e18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ba2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	f000 8088 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004bdc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1d9      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3314      	adds	r3, #20
 8004c02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e1      	bne.n	8004bfc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3314      	adds	r3, #20
 8004c3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e3      	bne.n	8004c38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ca2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ca4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e3      	bne.n	8004c7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd fdd9 	bl	8002872 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8bf 	bl	8004e5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cdc:	e09c      	b.n	8004e18 <HAL_UART_IRQHandler+0x518>
 8004cde:	bf00      	nop
 8004ce0:	08004fe7 	.word	0x08004fe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 808e 	beq.w	8004e1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8089 	beq.w	8004e1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	623b      	str	r3, [r7, #32]
   return(result);
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d66:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e3      	bne.n	8004d42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0310 	bic.w	r3, r3, #16
 8004d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004dac:	61fa      	str	r2, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e3      	bne.n	8004d88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f844 	bl	8004e5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dd2:	e023      	b.n	8004e1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_IRQHandler+0x4f4>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f90e 	bl	800500e <UART_Transmit_IT>
    return;
 8004df2:	e014      	b.n	8004e1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_UART_IRQHandler+0x51e>
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f94d 	bl	80050ac <UART_EndTransmit_IT>
    return;
 8004e12:	e004      	b.n	8004e1e <HAL_UART_IRQHandler+0x51e>
    return;
 8004e14:	bf00      	nop
 8004e16:	e002      	b.n	8004e1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e1c:	bf00      	nop
  }
}
 8004e1e:	37e8      	adds	r7, #232	@ 0xe8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	e03b      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d037      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fd fbb7 	bl	80025fc <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e03a      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d023      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b80      	cmp	r3, #128	@ 0x80
 8004eb6:	d020      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d01d      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d116      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f81d 	bl	8004f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2208      	movs	r2, #8
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00f      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d0b4      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b095      	sub	sp, #84	@ 0x54
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d119      	bne.n	8004fce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fba:	61ba      	str	r2, [r7, #24]
 8004fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fdc:	bf00      	nop
 8004fde:	3754      	adds	r7, #84	@ 0x54
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff21 	bl	8004e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b21      	cmp	r3, #33	@ 0x21
 8005020:	d13e      	bne.n	80050a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502a:	d114      	bne.n	8005056 <UART_Transmit_IT+0x48>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d110      	bne.n	8005056 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005048:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]
 8005054:	e008      	b.n	8005068 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6211      	str	r1, [r2, #32]
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4619      	mov	r1, r3
 8005076:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800508a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800509a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fea9 	bl	8004e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	@ 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b22      	cmp	r3, #34	@ 0x22
 80050ee:	f040 80ae 	bne.w	800524e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fa:	d117      	bne.n	800512c <UART_Receive_IT+0x50>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	b29a      	uxth	r2, r3
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
 800512a:	e026      	b.n	800517a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513e:	d007      	beq.n	8005150 <UART_Receive_IT+0x74>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <UART_Receive_IT+0x82>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e008      	b.n	8005170 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800516a:	b2da      	uxtb	r2, r3
 800516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4619      	mov	r1, r3
 8005188:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800518a:	2b00      	cmp	r3, #0
 800518c:	d15d      	bne.n	800524a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0220 	bic.w	r2, r2, #32
 800519c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d135      	bne.n	8005240 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	623a      	str	r2, [r7, #32]
 80051fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	61bb      	str	r3, [r7, #24]
   return(result);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e5      	bne.n	80051da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d10a      	bne.n	8005232 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fe0e 	bl	8004e5a <HAL_UARTEx_RxEventCallback>
 800523e:	e002      	b.n	8005246 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fdf8 	bl	8004e36 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e002      	b.n	8005250 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3730      	adds	r7, #48	@ 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005292:	f023 030c 	bic.w	r3, r3, #12
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	430b      	orrs	r3, r1
 800529e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <UART_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe f8ec 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	e002      	b.n	80052ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe f8d4 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80052cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	4a22      	ldr	r2, [pc, #136]	@ (8005370 <UART_SetConfig+0x118>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	0119      	lsls	r1, r3, #4
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fbb2 f2f3 	udiv	r2, r2, r3
 8005304:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <UART_SetConfig+0x118>)
 8005306:	fba3 0302 	umull	r0, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2064      	movs	r0, #100	@ 0x64
 800530e:	fb00 f303 	mul.w	r3, r0, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	3332      	adds	r3, #50	@ 0x32
 8005318:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <UART_SetConfig+0x118>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005324:	4419      	add	r1, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009a      	lsls	r2, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	fbb2 f2f3 	udiv	r2, r2, r3
 800533c:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <UART_SetConfig+0x118>)
 800533e:	fba3 0302 	umull	r0, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2064      	movs	r0, #100	@ 0x64
 8005346:	fb00 f303 	mul.w	r3, r0, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	@ 0x32
 8005350:	4a07      	ldr	r2, [pc, #28]	@ (8005370 <UART_SetConfig+0x118>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	440a      	add	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40013800 	.word	0x40013800
 8005370:	51eb851f 	.word	0x51eb851f

08005374 <memset>:
 8005374:	4603      	mov	r3, r0
 8005376:	4402      	add	r2, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	@ (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000000c 	.word	0x2000000c

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	2600      	movs	r6, #0
 8005394:	4d0c      	ldr	r5, [pc, #48]	@ (80053c8 <__libc_init_array+0x38>)
 8005396:	4c0d      	ldr	r4, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	f000 f874 	bl	800548c <_init>
 80053a4:	2600      	movs	r6, #0
 80053a6:	4d0a      	ldr	r5, [pc, #40]	@ (80053d0 <__libc_init_array+0x40>)
 80053a8:	4c0a      	ldr	r4, [pc, #40]	@ (80053d4 <__libc_init_array+0x44>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	080055cc 	.word	0x080055cc
 80053cc:	080055cc 	.word	0x080055cc
 80053d0:	080055cc 	.word	0x080055cc
 80053d4:	080055d0 	.word	0x080055d0

080053d8 <abort>:
 80053d8:	2006      	movs	r0, #6
 80053da:	b508      	push	{r3, lr}
 80053dc:	f000 f82c 	bl	8005438 <raise>
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fc fd32 	bl	8001e4a <_exit>

080053e6 <_raise_r>:
 80053e6:	291f      	cmp	r1, #31
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4605      	mov	r5, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	d904      	bls.n	80053fa <_raise_r+0x14>
 80053f0:	2316      	movs	r3, #22
 80053f2:	6003      	str	r3, [r0, #0]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80053fc:	b112      	cbz	r2, 8005404 <_raise_r+0x1e>
 80053fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005402:	b94b      	cbnz	r3, 8005418 <_raise_r+0x32>
 8005404:	4628      	mov	r0, r5
 8005406:	f000 f831 	bl	800546c <_getpid_r>
 800540a:	4622      	mov	r2, r4
 800540c:	4601      	mov	r1, r0
 800540e:	4628      	mov	r0, r5
 8005410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005414:	f000 b818 	b.w	8005448 <_kill_r>
 8005418:	2b01      	cmp	r3, #1
 800541a:	d00a      	beq.n	8005432 <_raise_r+0x4c>
 800541c:	1c59      	adds	r1, r3, #1
 800541e:	d103      	bne.n	8005428 <_raise_r+0x42>
 8005420:	2316      	movs	r3, #22
 8005422:	6003      	str	r3, [r0, #0]
 8005424:	2001      	movs	r0, #1
 8005426:	e7e7      	b.n	80053f8 <_raise_r+0x12>
 8005428:	2100      	movs	r1, #0
 800542a:	4620      	mov	r0, r4
 800542c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005430:	4798      	blx	r3
 8005432:	2000      	movs	r0, #0
 8005434:	e7e0      	b.n	80053f8 <_raise_r+0x12>
	...

08005438 <raise>:
 8005438:	4b02      	ldr	r3, [pc, #8]	@ (8005444 <raise+0xc>)
 800543a:	4601      	mov	r1, r0
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f7ff bfd2 	b.w	80053e6 <_raise_r>
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c

08005448 <_kill_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	2300      	movs	r3, #0
 800544c:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_kill_r+0x20>)
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	f7fc fce8 	bl	8001e2a <_kill>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d102      	bne.n	8005464 <_kill_r+0x1c>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b103      	cbz	r3, 8005464 <_kill_r+0x1c>
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	bf00      	nop
 8005468:	20000534 	.word	0x20000534

0800546c <_getpid_r>:
 800546c:	f7fc bcd6 	b.w	8001e1c <_getpid>

08005470 <memcpy>:
 8005470:	440a      	add	r2, r1
 8005472:	4291      	cmp	r1, r2
 8005474:	f100 33ff 	add.w	r3, r0, #4294967295
 8005478:	d100      	bne.n	800547c <memcpy+0xc>
 800547a:	4770      	bx	lr
 800547c:	b510      	push	{r4, lr}
 800547e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005482:	4291      	cmp	r1, r2
 8005484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005488:	d1f9      	bne.n	800547e <memcpy+0xe>
 800548a:	bd10      	pop	{r4, pc}

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
